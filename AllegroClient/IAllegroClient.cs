
using System;
using System.Collections.Generic;
using System.Text;


namespace AllegroClient
{
    public partial interface IAllegroClient
    {
        public void SetEnviroment(AllegroEnviromentType allegroEnviroment);
        public void SetToken(string token);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <param name="authKey">clientId:SecretKey in base64 fromat</param>
        /// <param name="code">user code</param>
        /// <returns></returns>
        System.Threading.Tasks.Task<TokenResponse> GetAuthToken(string authKey, string code,string redirectUrl);

        /// <summary>Modify the Buy Now price in an offer</summary>
        /// <param name="offerId">The offer identifier.</param>
        /// <param name="commandId">The unique command id generated by you.</param>
        /// <returns>The command was created successfully and is queued for processing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// 
        System.Threading.Tasks.Task<ChangePrice> OffersChangePriceCommandsAsync(string offerId, Guid commandId, ChangePriceWithoutOutput body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify the Buy Now price in an offer</summary>
        /// <param name="offerId">The offer identifier.</param>
        /// <param name="commandId">The unique command id generated by you.</param>
        /// <returns>The command was created successfully and is queued for processing.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChangePrice> OffersChangePriceCommandsAsync(string offerId, Guid commandId, ChangePriceWithoutOutput body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a draft offer</summary>
        /// <returns>Offer created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersPostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a draft offer</summary>
        /// <returns>Offer created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersPostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get seller's offers</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="name">The text to search in the offer title.</param>
        /// <param name="sellingMode_price_amount_gte">The lower threshold of price.</param>
        /// <param name="sellingMode_price_amount_lte">The upper threshold of price.</param>
        /// <param name="publication_status">The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: `publication.status=INACTIVE&amp;publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.</param>
        /// <param name="sellingMode_format">The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: `sellingMode.format=BUY_NOW&amp;sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.</param>
        /// <param name="external_id">The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: `external.id=1233&amp;external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.</param>
        /// <param name="delivery_shippingRates_id">The ID of shipping rates. Returns offers with given shipping rates ID.</param>
        /// <param name="delivery_shippingRates_id_empty">Allow to filter offers by existence of shipping rates ID.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by offer creation time, descending.</param>
        /// <param name="limit">The maximum number of offers returned in the response.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <returns>The list of offers returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffersSearchResultDto> SaleOffersGetAsync(string offer_id, string name, double? sellingMode_price_amount_gte, double? sellingMode_price_amount_lte, IEnumerable<Anonymous> publication_status, IEnumerable<Anonymous2> sellingMode_format, IEnumerable<string> external_id, Guid? delivery_shippingRates_id, bool? delivery_shippingRates_id_empty, Sort? sort, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get seller's offers</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="name">The text to search in the offer title.</param>
        /// <param name="sellingMode_price_amount_gte">The lower threshold of price.</param>
        /// <param name="sellingMode_price_amount_lte">The upper threshold of price.</param>
        /// <param name="publication_status">The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: `publication.status=INACTIVE&amp;publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.</param>
        /// <param name="sellingMode_format">The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: `sellingMode.format=BUY_NOW&amp;sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.</param>
        /// <param name="external_id">The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: `external.id=1233&amp;external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.</param>
        /// <param name="delivery_shippingRates_id">The ID of shipping rates. Returns offers with given shipping rates ID.</param>
        /// <param name="delivery_shippingRates_id_empty">Allow to filter offers by existence of shipping rates ID.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by offer creation time, descending.</param>
        /// <param name="limit">The maximum number of offers returned in the response.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <returns>The list of offers returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffersSearchResultDto> SaleOffersGetAsync(string offer_id, string name, double? sellingMode_price_amount_gte, double? sellingMode_price_amount_lte, IEnumerable<Anonymous> publication_status, IEnumerable<Anonymous2> sellingMode_format, IEnumerable<string> external_id, Guid? delivery_shippingRates_id, bool? delivery_shippingRates_id_empty, Sort? sort, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Complete a draft offer or edit an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersPutAsync(string offerId, string bodyJson);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete a draft offer or edit an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersPutAsync(string offerId, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get all fields of the particular offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersGetAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all fields of the particular offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Offer> SaleOffersGetAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a draft offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOffersDeleteAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a draft offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOffersDeleteAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Batch offer publish / unpublish</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">publicationChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsPutAsync(string commandId, PublicationChangeCommandDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer publish / unpublish</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">publicationChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsPutAsync(string commandId, PublicationChangeCommandDto body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Publish command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsGetAsync(string commandId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Publish command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Publish command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferPublicationCommandsTasksAsync(string commandId, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Publish command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferPublicationCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get classified packages assigned to an offer</summary>
        /// <param name="offerId">Offer ID.</param>
        /// <returns>Packages returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedResponse> SaleOfferClassifiedsPackagesGetAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get classified packages assigned to an offer</summary>
        /// <param name="offerId">Offer ID.</param>
        /// <returns>Packages returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedResponse> SaleOfferClassifiedsPackagesGetAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Assign packages to a classified</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <param name="body">Packages that should be assigned to the classified.</param>
        /// <returns>Packages have been successfully assigned to the classified.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferClassifiedsPackagesPutAsync(string offerId, ClassifiedPackages body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign packages to a classified</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <param name="body">Packages that should be assigned to the classified.</param>
        /// <returns>Packages have been successfully assigned to the classified.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferClassifiedsPackagesPutAsync(string offerId, ClassifiedPackages body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get configurations of packages</summary>
        /// <param name="category_id">The category ID.</param>
        /// <returns>Package configurations for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedPackageConfigs> SaleClassifiedsPackagesByCategoryIdGetAsync(string category_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get configurations of packages</summary>
        /// <param name="category_id">The category ID.</param>
        /// <returns>Package configurations for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedPackageConfigs> SaleClassifiedsPackagesByCategoryIdGetAsync(string category_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the configuration of a package</summary>
        /// <param name="packageId">The classifieds package ID.</param>
        /// <returns>The package's configuration returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedPackageConfig> SaleClassifiedsPackagesGetAsync(string packageId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the configuration of a package</summary>
        /// <param name="packageId">The classifieds package ID.</param>
        /// <returns>The package's configuration returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassifiedPackageConfig> SaleClassifiedsPackagesGetAsync(string packageId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get any user's ratings summary</summary>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Feedback statistics returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRatingSummaryResponse> UsersRatingsSummaryAsync(string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get any user's ratings summary</summary>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Feedback statistics returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRatingSummaryResponse> UsersRatingsSummaryAsync(string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's ratings</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your ratings only.</param>
        /// <param name="recommended">Filter by recommended.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRatingListResponse> SaleUserRatingsAsync(string user_id, Recommended? recommended, int? offset, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's ratings</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your ratings only.</param>
        /// <param name="recommended">Filter by recommended.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRatingListResponse> SaleUserRatingsAsync(string user_id, Recommended? recommended, int? offset, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>Answer for user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Answer> SaleUserRatingsAnswerAsync(string ratingId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Answer for user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Answer> SaleUserRatingsAnswerAsync(string ratingId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Request removal of user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Removal> SaleUserRatingsRemovalAsync(string ratingId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request removal of user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Removal> SaleUserRatingsRemovalAsync(string ratingId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get basic information about user</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeResponse> MeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get basic information about user</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeResponse> MeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Create additional services group</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create additional services group</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's additional services groups</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroups> SaleOfferAdditionalServicesGroupsGetAsync(int? offset, int? limit, string user_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's additional services groups</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroups> SaleOfferAdditionalServicesGroupsGetAsync(int? offset, int? limit, string user_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a new promotion</summary>
        /// <returns>Successfully created the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsPostAsync(SellerCreateRebateRequestDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new promotion</summary>
        /// <returns>Successfully created the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsPostAsync(SellerCreateRebateRequestDto body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's list of promotions</summary>
        /// <param name="user_id">The id of the user who is the owner of the promotions.</param>
        /// <param name="limit">Limit of promotions per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promotions are returned.</param>
        /// <param name="offer_id">Filter by offer id.</param>
        /// <param name="promotionType">Filter by promotion type.</param>
        /// <returns>Successfully returned the requested list of promotions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebatesDto> SaleLoyaltyPromotionsGetAsync(string user_id, int? limit, int? offset, string offer_id, PromotionType? promotionType);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's list of promotions</summary>
        /// <param name="user_id">The id of the user who is the owner of the promotions.</param>
        /// <param name="limit">Limit of promotions per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promotions are returned.</param>
        /// <param name="offer_id">Filter by offer id.</param>
        /// <param name="promotionType">Filter by promotion type.</param>
        /// <returns>Successfully returned the requested list of promotions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebatesDto> SaleLoyaltyPromotionsGetAsync(string user_id, int? limit, int? offset, string offer_id, PromotionType? promotionType, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a promotion data by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully returned the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsGetAsync(string promotionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a promotion data by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully returned the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsGetAsync(string promotionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Deactivate a promotion by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully deactivated the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionsDeleteAsync(string promotionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deactivate a promotion by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully deactivated the requested promotion</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionsDeleteAsync(string promotionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create an application for a promotion campaign</summary>
        /// <param name="body">request</param>
        /// <returns>Promotion campaign application created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionCampaignResponseDto> SaleLoyaltyPromotionCampaignsPostAsync(PromotionCampaignRequestDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an application for a promotion campaign</summary>
        /// <param name="body">request</param>
        /// <returns>Promotion campaign application created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionCampaignResponseDto> SaleLoyaltyPromotionCampaignsPostAsync(PromotionCampaignRequestDto body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's promotion campaigns</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Active or suspended promotion campaigns returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionCampaignsResponseDto> SaleLoyaltyPromotionCampaignsGetAsync(string promotion_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's promotion campaigns</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Active or suspended promotion campaigns returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PromotionCampaignsResponseDto> SaleLoyaltyPromotionCampaignsGetAsync(string promotion_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a campaign in a promotion</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="campaign_id">The campaign unique id.</param>
        /// <returns>Campaign deletion requested successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignsDeleteAsync(string promotion_id, string campaign_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a campaign in a promotion</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="campaign_id">The campaign unique id.</param>
        /// <returns>Campaign deletion requested successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignsDeleteAsync(string promotion_id, string campaign_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Successfully returned promotion campaign application</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SaleLoyaltyPromotionCampaignApplicationsGetAsync(string applicationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Successfully returned promotion campaign application</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SaleLoyaltyPromotionCampaignApplicationsGetAsync(string applicationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Promotion campaign application deletion requested successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignApplicationsDeleteAsync(string applicationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Promotion campaign application deletion requested successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignApplicationsDeleteAsync(string applicationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Preview offer fees</summary>
        /// <param name="body">command</param>
        /// <returns>Returns applicable fees</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Wraps_listing_and_commissions_fees> PricingFeePreviewAsync(Wrapper_type_for_preview_conditions body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Preview offer fees</summary>
        /// <param name="body">command</param>
        /// <returns>Returns applicable fees</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Wraps_listing_and_commissions_fees> PricingFeePreviewAsync(Wrapper_type_for_preview_conditions body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Calculate fee and commission for an offer</summary>
        /// <returns>Fee calculated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FeePreviewResponse> PricingOfferFeePreviewAsync(PublicOfferPreviewRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Calculate fee and commission for an offer</summary>
        /// <returns>Fee calculated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FeePreviewResponse> PricingOfferFeePreviewAsync(PublicOfferPreviewRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Batch offer modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsPutAsync(string commandId, OfferChangeCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsPutAsync(string commandId, OfferChangeCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modification command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsGetAsync(string commandId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modification command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modification command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferModificationCommandsTasksAsync(string commandId, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modification command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferModificationCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Batch offer price modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerPriceChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsPutAsync(string commandId, OfferPriceChangeCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer price modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerPriceChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsPutAsync(string commandId, OfferPriceChangeCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change price command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsGetAsync(string commandId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change price command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change price command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferPriceChangeCommandsTasksAsync(string commandId, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change price command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferPriceChangeCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Batch offer quantity modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerQuantityChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsPutAsync(string commandId, OfferQuantityChangeCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer quantity modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerQuantityChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsPutAsync(string commandId, OfferQuantityChangeCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change quantity command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsGetAsync(string commandId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change quantity command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change quantity command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferQuantityChangeCommandsTasksAsync(string commandId, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change quantity command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskReport> SaleOfferQuantityChangeCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get IDs of Allegro categories</summary>
        /// <param name="parent_id">The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned.</param>
        /// <returns>The list of categories returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoriesDto> SaleCategoriesByParentIdGetAsync(string parent_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get IDs of Allegro categories</summary>
        /// <param name="parent_id">The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned.</param>
        /// <returns>The list of categories returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoriesDto> SaleCategoriesByParentIdGetAsync(string parent_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a category by ID</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The details of a category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDto> SaleCategoriesByCategoryIdGetAsync(string categoryId = null);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a category by ID</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The details of a category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDto> SaleCategoriesByCategoryIdGetAsync(string categoryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get parameters supported by a category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of parameters for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryParameterList> SaleCategoriesParametersAsync(string categoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get parameters supported by a category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of parameters for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryParameterList> SaleCategoriesParametersAsync(string categoryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get product parameters available in given category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of product parameters for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryProductParameterList> SaleCategoriesProductParametersAsync(string categoryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get product parameters available in given category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of product parameters for the category returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryProductParameterList> SaleCategoriesProductParametersAsync(string categoryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's additional services definitions</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefinitionsResponse> SaleOfferAdditionalServicesDefinitionsAsync(int? offset, int? limit, string user_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's additional services definitions</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefinitionsResponse> SaleOfferAdditionalServicesDefinitionsAsync(int? offset, int? limit, string user_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's shipping rates</summary>
        /// <param name="seller_id">Shipping rates owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> SaleShippingRatesBySellerIdGetAsync(string seller_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's shipping rates</summary>
        /// <param name="seller_id">Shipping rates owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> SaleShippingRatesBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a new shipping rates set</summary>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPostAsync(ShippingRatesSet body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new shipping rates set</summary>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPostAsync(ShippingRatesSet body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the details of a shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesGetAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of a shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesGetAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Edit a user's shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPutAsync(string id, ShippingRatesSet body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a user's shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPutAsync(string id, ShippingRatesSet body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Modify the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsPutAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsPutAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a point of service</summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServicePostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a point of service</summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServicePostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's points of service</summary>
        /// <param name="seller_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResult> PointsOfServiceBySellerIdGetAsync(string seller_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's points of service</summary>
        /// <param name="seller_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResult> PointsOfServiceBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the details of a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServiceGetAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServiceGetAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modify a point of service</summary>
        /// <param name="id">Point of service ID. Must match values with 'id' property from the body.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServicePutAsync(string id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify a point of service</summary>
        /// <param name="id">Point of service ID. Must match values with 'id' property from the body.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Pos> PointsOfServicePutAsync(string id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PointsOfServiceDeleteAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PointsOfServiceDeleteAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a new contact</summary>
        /// <param name="body">New contact</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPostAsync(ContactRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new contact</summary>
        /// <param name="body">New contact</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPostAsync(ContactRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's contacts</summary>
        /// <param name="seller_id">Contacts owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseList> SaleOfferContactsBySellerIdGetAsync(string seller_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's contacts</summary>
        /// <param name="seller_id">Contacts owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseList> SaleOfferContactsBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsGetAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsGetAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modify contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <param name="body">Contact</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPutAsync(string id, ContactRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <param name="body">Contact</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPutAsync(string id, ContactRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the list of delivery methods</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> SaleDeliveryMethodsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of delivery methods</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> SaleDeliveryMethodsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the details of an additional services group</summary>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsGetAsync(string groupId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of an additional services group</summary>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsGetAsync(string groupId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modify an additional services group</summary>
        /// <param name="groupId">Additional service group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPutAsync(string groupId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify an additional services group</summary>
        /// <param name="groupId">Additional service group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPutAsync(string groupId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a size table details</summary>
        /// <param name="tableId">Table identifier.</param>
        /// <returns>Size table returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PublicTableDto> SaleSizeTablesByTableIdGetAsync(string tableId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a size table details</summary>
        /// <param name="tableId">Table identifier.</param>
        /// <returns>Size table returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PublicTableDto> SaleSizeTablesByTableIdGetAsync(string tableId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's size tables</summary>
        /// <param name="user_id">User identifier.</param>
        /// <returns>Size tables returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PublicTablesDto> SaleSizeTablesGetAsync(string user_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's size tables</summary>
        /// <param name="user_id">User identifier.</param>
        /// <returns>Size tables returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PublicTablesDto> SaleSizeTablesGetAsync(string user_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's return policies</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your return policies only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPoliciesList_ReturnPolicyBasic_> AfterSalesServiceConditionsReturnPoliciesGetAsync(string seller_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's return policies</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your return policies only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPoliciesList_ReturnPolicyBasic_> AfterSalesServiceConditionsReturnPoliciesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create new user's return policy</summary>
        /// <param name="body">Return Policy</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPostAsync(ReturnPolicyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's return policy</summary>
        /// <param name="body">Return Policy</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPostAsync(ReturnPolicyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesGetAsync(string returnPolicyId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesGetAsync(string returnPolicyId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <param name="body">Return Policy</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPutAsync(string returnPolicyId, ReturnPolicyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <param name="body">Return Policy</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPutAsync(string returnPolicyId, ReturnPolicyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's implied warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your implied warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantiesList_ImpliedWarrantyBasic_> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string seller_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's implied warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your implied warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantiesList_ImpliedWarrantyBasic_> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create new user's implied warranty</summary>
        /// <param name="body">Implied warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPostAsync(ImpliedWarrantyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's implied warranty</summary>
        /// <param name="body">Implied warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPostAsync(ImpliedWarrantyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string impliedWarrantyId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string impliedWarrantyId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <param name="body">Implied warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPutAsync(string impliedWarrantyId, ImpliedWarrantyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <param name="body">Implied warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPutAsync(string impliedWarrantyId, ImpliedWarrantyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantiesList_WarrantyBasic_> AfterSalesServiceConditionsWarrantiesGetAsync(string seller_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantiesList_WarrantyBasic_> AfterSalesServiceConditionsWarrantiesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create new user's warranty</summary>
        /// <param name="body">Warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPostAsync(WarrantyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's warranty</summary>
        /// <param name="body">Warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPostAsync(WarrantyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesGetAsync(string warrantyId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesGetAsync(string warrantyId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Change the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <param name="body">Warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPutAsync(string warrantyId, WarrantyRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <param name="body">Warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPutAsync(string warrantyId, WarrantyRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a warranty attachment metadata</summary>
        /// <param name="body">After sale services attachment</param>
        /// <returns>Attachment created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPostAsync(Body body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a warranty attachment metadata</summary>
        /// <param name="body">After sale services attachment</param>
        /// <returns>Attachment created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPostAsync(Body body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Upload an warranty attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPutAsync(string attachmentId, System.IO.Stream body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an warranty attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPutAsync(string attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's current offer quotes</summary>
        /// <param name="name">Offer quote name.</param>
        /// <param name="offer_id">List of offer Ids, maximum 20 values.</param>
        /// <returns>Returns current offer quotes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferQuotesDto> PricingOfferQuotesAsync(string name, IEnumerable<string> offer_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's current offer quotes</summary>
        /// <param name="name">Offer quote name.</param>
        /// <param name="offer_id">List of offer Ids, maximum 20 values.</param>
        /// <returns>Returns current offer quotes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferQuotesDto> PricingOfferQuotesAsync(string name, IEnumerable<string> offer_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create variant set</summary>
        /// <returns>Variant set created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create variant set</summary>
        /// <returns>Variant set created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's variant sets</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your variant sets only.</param>
        /// <param name="offset">Index of first returned variant set.</param>
        /// <param name="limit">Maximum number of returned variant sets.</param>
        /// <param name="query">Filter variant sets by name or offer id.</param>
        /// <returns>Variant sets returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSets> SaleOfferVariantsGetAsync(string user_id, int? offset, int? limit, string query);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's variant sets</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your variant sets only.</param>
        /// <param name="offset">Index of first returned variant set.</param>
        /// <param name="limit">Maximum number of returned variant sets.</param>
        /// <param name="query">Filter variant sets by name or offer id.</param>
        /// <returns>Variant sets returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSets> SaleOfferVariantsGetAsync(string user_id, int? offset, int? limit, string query, System.Threading.CancellationToken cancellationToken);

        /// <summary>Update variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPutAsync(string setId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPutAsync(string setId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsGetAsync(string setId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsGetAsync(string setId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferVariantsDeleteAsync(string setId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferVariantsDeleteAsync(string setId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Upload an offer image</summary>
        /// <returns>Image uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferImageUploadResponse> SaleImagesAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an offer image</summary>
        /// <returns>Image uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferImageUploadResponse> SaleImagesAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create an offer attachment</summary>
        /// <returns>Attachment created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferAttachment> SaleOfferAttachmentsPostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an offer attachment</summary>
        /// <returns>Attachment created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferAttachment> SaleOfferAttachmentsPostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Upload an offer attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferAttachmentsPutAsync(Guid attachmentId, System.IO.Stream body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an offer attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferAttachmentsPutAsync(Guid attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Search offers</summary>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="phrase">The search phrase. The phrase is searched in different fields of the offers depending on the value of the `searchMode` parameter.</param>
        /// <param name="seller_id">The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.</param>
        /// <param name="searchMode">Defines where the given phrase should be searched in. Allowed values:
        /// 
        ///   - *REGULAR* - searching for a phrase in the title,
        ///   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
        ///   - *CLOSED* - searching for a phrase in the title of closed offers.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <param name="limit">The maximum number of offers in a response.</param>
        /// <param name="sort">Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means descending order.</param>
        /// <param name="include">Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use `-` prefix to exclude an entity.
        /// Example:
        /// `include=-all&amp;include=filters&amp;include=sort` - returns only filters and sort entities.</param>
        /// <param name="fallback">Defines the behaviour of the search engine when no results with exact phrase match are found:
        /// 
        ///   - *true* - related (not exact) results are returned,
        ///   - *false* - empty results are returned.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///     {
        ///     	"id": "parameter.11323",
        ///     	"type": "MULTI",
        ///     	"name": "Stan",
        ///     	"values": [{
        ///     			"value": "11323_1",
        ///     			"name": "nowe",
        ///     			"count": 21,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_2",
        ///     			"name": "używane",
        ///     			"count": 157,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_238066",
        ///     			"name": "po zwrocie",
        ///     			"count": 1,
        ///     			"selected": false
        ///     		}
        ///     	]
        ///     }
        ///   ````
        /// You can use 'Stan' filter to query results, i.e.:
        ///   * `parameter.11323=11323_1` for "nowe"
        ///   * `parameter.11323=11323_2` for "używane"
        ///   * `parameter.11323=11323_238066` for "po zwrocie".</param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListingResponse> OffersListingAsync(string category_id, string phrase, string seller_id, SearchMode? searchMode, int? offset, int? limit, Sort2? sort, string include, bool? fallback, IDictionary<string, string> dynamic_filters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search offers</summary>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="phrase">The search phrase. The phrase is searched in different fields of the offers depending on the value of the `searchMode` parameter.</param>
        /// <param name="seller_id">The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.</param>
        /// <param name="searchMode">Defines where the given phrase should be searched in. Allowed values:
        /// 
        ///   - *REGULAR* - searching for a phrase in the title,
        ///   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
        ///   - *CLOSED* - searching for a phrase in the title of closed offers.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <param name="limit">The maximum number of offers in a response.</param>
        /// <param name="sort">Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means descending order.</param>
        /// <param name="include">Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use `-` prefix to exclude an entity.
        /// Example:
        /// `include=-all&amp;include=filters&amp;include=sort` - returns only filters and sort entities.</param>
        /// <param name="fallback">Defines the behaviour of the search engine when no results with exact phrase match are found:
        /// 
        ///   - *true* - related (not exact) results are returned,
        ///   - *false* - empty results are returned.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///     {
        ///     	"id": "parameter.11323",
        ///     	"type": "MULTI",
        ///     	"name": "Stan",
        ///     	"values": [{
        ///     			"value": "11323_1",
        ///     			"name": "nowe",
        ///     			"count": 21,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_2",
        ///     			"name": "używane",
        ///     			"count": 157,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_238066",
        ///     			"name": "po zwrocie",
        ///     			"count": 1,
        ///     			"selected": false
        ///     		}
        ///     	]
        ///     }
        ///   ````
        /// You can use 'Stan' filter to query results, i.e.:
        ///   * `parameter.11323=11323_1` for "nowe"
        ///   * `parameter.11323=11323_2` for "używane"
        ///   * `parameter.11323=11323_238066` for "po zwrocie".</param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListingResponse> OffersListingAsync(string category_id, string phrase, string seller_id, SearchMode? searchMode, int? offset, int? limit, Sort2? sort, string include, bool? fallback, IDictionary<string, string> dynamic_filters, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get order events</summary>
        /// <param name="from">You can use the event ID to retrieve subsequent chunks of events.</param>
        /// <param name="type">Specify array of event types for filtering. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
        ///   * `BUYER_CANCELLED`: purchase was cancelled by buyer
        ///   * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.</param>
        /// <param name="limit">The maximum number of events returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderEventsList> OrderEventsAsync(string from, IEnumerable<string> type, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get order events</summary>
        /// <param name="from">You can use the event ID to retrieve subsequent chunks of events.</param>
        /// <param name="type">Specify array of event types for filtering. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
        ///   * `BUYER_CANCELLED`: purchase was cancelled by buyer
        ///   * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.</param>
        /// <param name="limit">The maximum number of events returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderEventsList> OrderEventsAsync(string from, IEnumerable<string> type, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get order events statistics</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderEventStats> OrderEventStatsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get order events statistics</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderEventStats> OrderEventStatsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's orders</summary>
        /// <param name="offset">Index of first returned checkout-form from all search results.</param>
        /// <param name="limit">Maximum number of checkout-forms in response.</param>
        /// <param name="status">Specify status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in.
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
        ///   * `CANCELLED`: purchase cancelled by buyer.</param>
        /// <param name="fulfillment_status">Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `NEW`
        ///   * `PROCESSING`
        ///   * `READY_FOR_SHIPMENT`
        ///   * `SENT`
        ///   * `CANCELLED`.</param>
        /// <param name="fulfillment_shipmentSummary_lineItemsSent">Specify filter for line items sending status. Allowed values are:
        ///   * `NONE`: none of line items have tracking number specified
        ///   * `SOME`: some of line items have tracking number specified
        ///   * `ALL`: all of line items have tracking number specified.</param>
        /// <param name="lineItems_boughtAt_lte">Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="lineItems_boughtAt_gte">Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="payment_id">Find checkout-forms having specified payment id.</param>
        /// <param name="surcharges_id">Find checkout-forms having specified surcharge id.</param>
        /// <param name="delivery_method_id">Find checkout-forms having specified delivery method id.</param>
        /// <param name="buyer_login">Find checkout-forms having specified buyer login.</param>
        /// <param name="updatedAt_lte">Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="updatedAt_gte">Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutForms> OrderCheckoutFormsGetAsync(int? offset, int? limit, string status, string fulfillment_status, string fulfillment_shipmentSummary_lineItemsSent, DateTimeOffset? lineItems_boughtAt_lte, DateTimeOffset? lineItems_boughtAt_gte, string payment_id, string surcharges_id, string delivery_method_id, string buyer_login, DateTimeOffset? updatedAt_lte, DateTimeOffset? updatedAt_gte, Sort3? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's orders</summary>
        /// <param name="offset">Index of first returned checkout-form from all search results.</param>
        /// <param name="limit">Maximum number of checkout-forms in response.</param>
        /// <param name="status">Specify status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in.
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
        ///   * `CANCELLED`: purchase cancelled by buyer.</param>
        /// <param name="fulfillment_status">Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `NEW`
        ///   * `PROCESSING`
        ///   * `READY_FOR_SHIPMENT`
        ///   * `SENT`
        ///   * `CANCELLED`.</param>
        /// <param name="fulfillment_shipmentSummary_lineItemsSent">Specify filter for line items sending status. Allowed values are:
        ///   * `NONE`: none of line items have tracking number specified
        ///   * `SOME`: some of line items have tracking number specified
        ///   * `ALL`: all of line items have tracking number specified.</param>
        /// <param name="lineItems_boughtAt_lte">Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="lineItems_boughtAt_gte">Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="payment_id">Find checkout-forms having specified payment id.</param>
        /// <param name="surcharges_id">Find checkout-forms having specified surcharge id.</param>
        /// <param name="delivery_method_id">Find checkout-forms having specified delivery method id.</param>
        /// <param name="buyer_login">Find checkout-forms having specified buyer login.</param>
        /// <param name="updatedAt_lte">Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="updatedAt_gte">Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutForms> OrderCheckoutFormsGetAsync(int? offset, int? limit, string status, string fulfillment_status, string fulfillment_shipmentSummary_lineItemsSent, DateTimeOffset? lineItems_boughtAt_lte, DateTimeOffset? lineItems_boughtAt_gte, string payment_id, string surcharges_id, string delivery_method_id, string buyer_login, DateTimeOffset? updatedAt_lte, DateTimeOffset? updatedAt_gte, Sort3? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get an order's details</summary>
        /// <param name="id">Checkout form identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutForm> OrderCheckoutFormsGetAsync(Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an order's details</summary>
        /// <param name="id">Checkout form identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutForm> OrderCheckoutFormsGetAsync(Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a list of available shipping carriers</summary>
        /// <returns>List of available shipping carriers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersShippingCarriersResponse> OrderCarriersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of available shipping carriers</summary>
        /// <returns>List of available shipping carriers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersShippingCarriersResponse> OrderCarriersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a list of parcel tracking numbers</summary>
        /// <param name="id">Order identifier.</param>
        /// <returns>Returns a list of parcel tracking numbers (shipments)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutFormOrderWaybillResponse> OrderCheckoutFormsShipmentsGetAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of parcel tracking numbers</summary>
        /// <param name="id">Order identifier.</param>
        /// <returns>Returns a list of parcel tracking numbers (shipments)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutFormOrderWaybillResponse> OrderCheckoutFormsShipmentsGetAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Add a parcel tracking number</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>The request is OK and the parcel tracking number will be assigned to the order</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutFormAddWaybillCreated> OrderCheckoutFormsShipmentsPostAsync(string id, CheckoutFormAddWaybillRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a parcel tracking number</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>The request is OK and the parcel tracking number will be assigned to the order</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckoutFormAddWaybillCreated> OrderCheckoutFormsShipmentsPostAsync(string id, CheckoutFormAddWaybillRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Set seller order status</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="checkoutForm_revision">Checkout form revision.</param>
        /// <param name="body">request</param>
        /// <returns>Fulfillment set successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderCheckoutFormsFulfillmentAsync(string id, string checkoutForm_revision, CheckoutFormFulfillment body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set seller order status</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="checkoutForm_revision">Checkout form revision.</param>
        /// <param name="body">request</param>
        /// <returns>Fulfillment set successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderCheckoutFormsFulfillmentAsync(string id, string checkoutForm_revision, CheckoutFormFulfillment body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's disputes</summary>
        /// <param name="checkoutForm_id">Checkout form identifier.</param>
        /// <param name="limit">The maximum number of disputes in a response.</param>
        /// <param name="offset">Index of first returned dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeListResponse> SaleDisputesGetAsync(Guid? checkoutForm_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's disputes</summary>
        /// <param name="checkoutForm_id">Checkout form identifier.</param>
        /// <param name="limit">The maximum number of disputes in a response.</param>
        /// <param name="offset">Index of first returned dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeListResponse> SaleDisputesGetAsync(Guid? checkoutForm_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dispute> SaleDisputesGetAsync(Guid disputeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dispute> SaleDisputesGetAsync(Guid disputeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the messages within a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <param name="limit">The maximum number of messages within dispute returned in a response.</param>
        /// <param name="offset">Index of first returned message within dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeMessageList> SaleDisputesMessagesGetAsync(Guid disputeId, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the messages within a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <param name="limit">The maximum number of messages within dispute returned in a response.</param>
        /// <param name="offset">Index of first returned message within dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeMessageList> SaleDisputesMessagesGetAsync(Guid disputeId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Add a message to a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeMessage> SaleDisputesMessagesPostAsync(Guid disputeId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a message to a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeMessage> SaleDisputesMessagesPostAsync(Guid disputeId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create an attachment declaration</summary>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeAttachmentId> SaleDisputeAttachmentsPostAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an attachment declaration</summary>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisputeAttachmentId> SaleDisputeAttachmentsPostAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Upload a dispute message attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleDisputeAttachmentsPutAsync(Guid attachmentId, System.IO.Stream body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload a dispute message attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleDisputeAttachmentsPutAsync(Guid attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get an attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SaleDisputeAttachmentsGetAsync(Guid attachmentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> SaleDisputeAttachmentsGetAsync(Guid attachmentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get mapping for line item id</summary>
        /// <param name="lineItemId">Line item identifier.</param>
        /// <param name="dealId">Deal identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LineItemIdMappings> OrderLineItemIdMappingsAsync(Guid? lineItemId, string dealId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get mapping for line item id</summary>
        /// <param name="lineItemId">Line item identifier.</param>
        /// <param name="dealId">Deal identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LineItemIdMappings> OrderLineItemIdMappingsAsync(Guid? lineItemId, string dealId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a tag</summary>
        /// <param name="body">request</param>
        /// <returns>Successfully created the requested tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagId> SaleOfferTagsPostAsync(TagRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a tag</summary>
        /// <param name="body">request</param>
        /// <returns>Successfully created the requested tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagId> SaleOfferTagsPostAsync(TagRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the user's tags</summary>
        /// <param name="user_id">User identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully returned the requested list of tags</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagListResponse> SaleOfferTagsGetAsync(string user_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's tags</summary>
        /// <param name="user_id">User identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully returned the requested list of tags</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagListResponse> SaleOfferTagsGetAsync(string user_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <returns>Successfully deleted tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferTagsDeleteAsync(string tagId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <returns>Successfully deleted tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferTagsDeleteAsync(string tagId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Modify a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully updated the requested tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferTagsPutAsync(string tagId, TagRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully updated the requested tag</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOfferTagsPutAsync(string tagId, TagRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Assign tags to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully assigned tag to offer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOffersTagsPostAsync(string offerId, TagIdsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign tags to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully assigned tag to offer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleOffersTagsPostAsync(string offerId, TagIdsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get tags assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned list of assigned tags</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagListResponse> SaleOffersTagsGetAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get tags assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned list of assigned tags</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagListResponse> SaleOffersTagsGetAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get offer rating</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>OK.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferRating> SaleOffersRatingAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get offer rating</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>OK.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferRating> SaleOffersRatingAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Get shipping rates assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned assigned shipping rates set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferShippingRates> SaleOffersShippingRatesAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get shipping rates assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned assigned shipping rates set</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OfferShippingRates> SaleOffersShippingRatesAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get search products results</summary>
        /// <param name="ean">The EAN values can include EAN, ISBN, and UPC identifier types.</param>
        /// <param name="phrase">Search phrase.</param>
        /// <param name="category_id">The category identifier to filter results.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///   {
        ///     "id": "127448",
        ///     "name": "Kolor",
        ///     "type": "SINGLE",
        ///     "values": [
        ///       {
        ///         "name": "biały",
        ///         "value": "2"
        ///       },
        ///       {
        ///         "name": "czarny",
        ///         "value": "1" }
        ///     ]
        ///   }
        ///   ````
        /// You can use 'Kolor' filter to query results, i.e.:
        ///   * `127448=2` for "biały"
        ///   * `127448=1` for "czarny".</param>
        /// <param name="page_id">A "cursor" to the next set of results.</param>
        /// <returns>Successful operation.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSaleProductsResponse> SaleProductsGetAsync(string ean, string phrase, string category_id, IDictionary<string, string> dynamic_filters, string page_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get search products results</summary>
        /// <param name="ean">The EAN values can include EAN, ISBN, and UPC identifier types.</param>
        /// <param name="phrase">Search phrase.</param>
        /// <param name="category_id">The category identifier to filter results.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///   {
        ///     "id": "127448",
        ///     "name": "Kolor",
        ///     "type": "SINGLE",
        ///     "values": [
        ///       {
        ///         "name": "biały",
        ///         "value": "2"
        ///       },
        ///       {
        ///         "name": "czarny",
        ///         "value": "1" }
        ///     ]
        ///   }
        ///   ````
        /// You can use 'Kolor' filter to query results, i.e.:
        ///   * `127448=2` for "biały"
        ///   * `127448=1` for "czarny".</param>
        /// <param name="page_id">A "cursor" to the next set of results.</param>
        /// <returns>Successful operation.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSaleProductsResponse> SaleProductsGetAsync(string ean, string phrase, string category_id, IDictionary<string, string> dynamic_filters, string page_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get all data of the particular product</summary>
        /// <param name="productId">The product identifier.</param>
        /// <returns>Product returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductDto> SaleProductsGetAsync(string productId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all data of the particular product</summary>
        /// <param name="productId">The product identifier.</param>
        /// <returns>Product returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductDto> SaleProductsGetAsync(string productId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Propose a product</summary>
        /// <returns>Product proposed successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductDto> SaleProductProposalsAsync(ProposeSaleProductRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Propose a product</summary>
        /// <returns>Product proposed successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductDto> SaleProductProposalsAsync(ProposeSaleProductRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create offer based on product</summary>
        /// <returns>Offer created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductOfferResponse> SaleProductOffersAsync(SaleProductOfferRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create offer based on product</summary>
        /// <returns>Offer created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleProductOfferResponse> SaleProductOffersAsync(SaleProductOfferRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get list of categories where compatibility list is supported</summary>
        /// <returns>Configuration of supported categories.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityListSupportedCategoriesDto> SaleCompatibilityListSupportedCategoriesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of categories where compatibility list is supported</summary>
        /// <returns>Configuration of supported categories.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibilityListSupportedCategoriesDto> SaleCompatibilityListSupportedCategoriesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Get list of compatible product groups</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Groups of compatible products returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibleProductsGroupsDto> SaleCompatibleProductsGroupsAsync(string if_Modified_Since, string type, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of compatible product groups</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Groups of compatible products returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibleProductsGroupsDto> SaleCompatibleProductsGroupsAsync(string if_Modified_Since, string type, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get list of compatible products</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Header is ignored if `phrase` parameter is used.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="group_id">Group identifier from `/sale/compatible-products/groups` resource. Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.</param>
        /// <param name="tecdoc_kTypNr">Identifier of passenger vehicle (kTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="tecdoc_nTypNr">Identifier of commercial vehicle (nTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="phrase">Query for compatible products. When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.</param>
        /// <param name="limit">The limit of returned items. If `phrase` parameter is present, parameter is ignored and maximum value is set to `200`.</param>
        /// <param name="offset">The offset of returned items. If `phrase` parameter is present, parameter is ignored.</param>
        /// <returns>Compatible products returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibleProductsListDto> SaleCompatibleProductsAsync(string if_Modified_Since, string type, string group_id, string tecdoc_kTypNr, string tecdoc_nTypNr, string phrase, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of compatible products</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Header is ignored if `phrase` parameter is used.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="group_id">Group identifier from `/sale/compatible-products/groups` resource. Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.</param>
        /// <param name="tecdoc_kTypNr">Identifier of passenger vehicle (kTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="tecdoc_nTypNr">Identifier of commercial vehicle (nTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="phrase">Query for compatible products. When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.</param>
        /// <param name="limit">The limit of returned items. If `phrase` parameter is present, parameter is ignored and maximum value is set to `200`.</param>
        /// <param name="offset">The offset of returned items. If `phrase` parameter is present, parameter is ignored.</param>
        /// <returns>Compatible products returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompatibleProductsListDto> SaleCompatibleProductsAsync(string if_Modified_Since, string type, string group_id, string tecdoc_kTypNr, string tecdoc_nTypNr, string phrase, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get user's additional emails</summary>
        /// <returns>List of user's additional emails returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmailsResponse> AccountAdditionalEmailsGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get user's additional emails</summary>
        /// <returns>List of user's additional emails returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmailsResponse> AccountAdditionalEmailsGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>Add a new additional email address to user's account</summary>
        /// <param name="body">request</param>
        /// <returns>Additional email added successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsPostAsync(AdditionalEmailRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a new additional email address to user's account</summary>
        /// <param name="body">request</param>
        /// <returns>Additional email added successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsPostAsync(AdditionalEmailRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get information about a particular additional email</summary>
        /// <param name="emailId">Id of the additional email.</param>
        /// <returns>Additional email returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsGetAsync(string emailId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get information about a particular additional email</summary>
        /// <param name="emailId">Id of the additional email.</param>
        /// <returns>Additional email returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsGetAsync(string emailId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete an additional email address</summary>
        /// <param name="emailId">Id of the additional email to be deleted.</param>
        /// <returns>Successfully deleted additional email</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountAdditionalEmailsDeleteAsync(string emailId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an additional email address</summary>
        /// <param name="emailId">Id of the additional email to be deleted.</param>
        /// <returns>Successfully deleted additional email</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountAdditionalEmailsDeleteAsync(string emailId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Payment operations history</summary>
        /// <param name="wallet_type">Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout.</param>
        /// <param name="wallet_paymentOperator">Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator.</param>
        /// <param name="payment_id">The payment ID.</param>
        /// <param name="participant_login">Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer.</param>
        /// <param name="occurredAt_gte">The minimum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">The maximum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="group">Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>The payment operations history for given search criteria returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOperations> PaymentsPaymentOperationsAsync(Type? wallet_type, PaymentOperator? wallet_paymentOperator, Guid? payment_id, string participant_login, DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<Anonymous3> group, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Payment operations history</summary>
        /// <param name="wallet_type">Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout.</param>
        /// <param name="wallet_paymentOperator">Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator.</param>
        /// <param name="payment_id">The payment ID.</param>
        /// <param name="participant_login">Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer.</param>
        /// <param name="occurredAt_gte">The minimum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">The maximum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="group">Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>The payment operations history for given search criteria returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentOperations> PaymentsPaymentOperationsAsync(Type? wallet_type, PaymentOperator? wallet_paymentOperator, Guid? payment_id, string participant_login, DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<Anonymous3> group, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Mapping of payment identifiers</summary>
        /// <param name="paymentId">Payment identifier.</param>
        /// <param name="transactionId">Transaction identifier.</param>
        /// <returns>The payment identifiers for given query param returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentIdMapping> PaymentsPaymentIdMappingsAsync(Guid? paymentId, string transactionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mapping of payment identifiers</summary>
        /// <param name="paymentId">Payment identifier.</param>
        /// <param name="transactionId">Transaction identifier.</param>
        /// <returns>The payment identifiers for given query param returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentIdMapping> PaymentsPaymentIdMappingsAsync(Guid? paymentId, string transactionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get list of blacklisted users</summary>
        /// <param name="offset">Index of first returned user from all results.</param>
        /// <param name="limit">Maximum number of users in response.</param>
        /// <returns>List of blacklisted users returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlackListPagedResponse> SaleBlacklistedUsersGetAsync(int? offset, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of blacklisted users</summary>
        /// <param name="offset">Index of first returned user from all results.</param>
        /// <param name="limit">Maximum number of users in response.</param>
        /// <returns>List of blacklisted users returned successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlackListPagedResponse> SaleBlacklistedUsersGetAsync(int? offset, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>Add a users to the blacklist</summary>
        /// <param name="body">request</param>
        /// <returns>Users successfully added to the blacklist.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlackListResponse> SaleBlacklistedUsersPostAsync(BlacklistRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a users to the blacklist</summary>
        /// <param name="body">request</param>
        /// <returns>Users successfully added to the blacklist.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlackListResponse> SaleBlacklistedUsersPostAsync(BlacklistRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Remove users from the blacklist</summary>
        /// <param name="excludedUserId">Remove users from the blacklist.</param>
        /// <returns>User removed form the blacklist successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleBlacklistedUsersDeleteAsync(long excludedUserId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove users from the blacklist</summary>
        /// <param name="excludedUserId">Remove users from the blacklist.</param>
        /// <returns>User removed form the blacklist successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaleBlacklistedUsersDeleteAsync(long excludedUserId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Place a bid in an auction</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid succesfully placed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidPutAsync(string offerId, BidRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place a bid in an auction</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid succesfully placed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidPutAsync(string offerId, BidRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get current user's bid information</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid information succesfully found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidGetAsync(string offerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get current user's bid information</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid information succesfully found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidGetAsync(string offerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get events about the seller's offers</summary>
        /// <param name="from">The ID of the last seen event. Events that occured after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of offer events returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerOfferEventsResponse> SaleOfferEventsAsync(string from, int? limit, IEnumerable<Anonymous4> type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get events about the seller's offers</summary>
        /// <param name="from">The ID of the last seen event. Events that occured after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of offer events returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SellerOfferEventsResponse> SaleOfferEventsAsync(string from, int? limit, IEnumerable<Anonymous4> type, System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Get a list of available badge campaigns</summary>
        /// <returns>List of available badge campaigns.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBadgeCampaignsList> SaleBadgeCampaignsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of available badge campaigns</summary>
        /// <returns>List of available badge campaigns.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBadgeCampaignsList> SaleBadgeCampaignsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Apply for badge in selected offer</summary>
        /// <returns>Successfully applied for a badge.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplication> SaleBadgesPostAsync(BadgeApplicationRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Apply for badge in selected offer</summary>
        /// <returns>Successfully applied for a badge.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplication> SaleBadgesPostAsync(BadgeApplicationRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Get a list of badges</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of badges returned in the response.</param>
        /// <returns>Successfully returned list of badges.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgesList> SaleBadgesGetAsync(string offer_id, int? offset, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of badges</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of badges returned in the response.</param>
        /// <returns>Successfully returned list of badges.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgesList> SaleBadgesGetAsync(string offer_id, int? offset, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Get a badge application details</summary>
        /// <param name="applicationId">Badge application ID.</param>
        /// <returns>Successfully returned badge application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplication> SaleBadgeApplicationsGetAsync(string applicationId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a badge application details</summary>
        /// <param name="applicationId">Badge application ID.</param>
        /// <returns>Successfully returned badge application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplication> SaleBadgeApplicationsGetAsync(string applicationId, System.Threading.CancellationToken cancellationToken);

        /// <summary>[BETA] Get a list of badge applications</summary>
        /// <param name="campaign_id">Campaign ID.</param>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of applications returned in the response.</param>
        /// <returns>Successfully returned badge applications list.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplications> SaleBadgeApplicationsGetAsync(string campaign_id, string offer_id, int? offset, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of badge applications</summary>
        /// <param name="campaign_id">Campaign ID.</param>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of applications returned in the response.</param>
        /// <returns>Successfully returned badge applications list.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BadgeApplications> SaleBadgeApplicationsGetAsync(string campaign_id, string offer_id, int? offset, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>Initiate a refund of a payment</summary>
        /// <returns>Refund request created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefundDetails> PaymentsRefundsPostAsync(InitializeRefund body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a refund of a payment</summary>
        /// <returns>Refund request created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefundDetails> PaymentsRefundsPostAsync(InitializeRefund body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a list of refunded payments</summary>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <param name="id">ID of the refund.</param>
        /// <param name="payment_id">ID of the payment.</param>
        /// <param name="occurredAt_gte">Minimum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">Maximum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="status">Current status of payment refund.</param>
        /// <returns>List of payments refunds returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PaymentsRefundsGetAsync(int? limit, int? offset, Guid? id, Guid? payment_id, DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<Anonymous5> status);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of refunded payments</summary>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <param name="id">ID of the refund.</param>
        /// <param name="payment_id">ID of the payment.</param>
        /// <param name="occurredAt_gte">Minimum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">Maximum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="status">Current status of payment refund.</param>
        /// <returns>List of payments refunds returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PaymentsRefundsGetAsync(int? limit, int? offset, Guid? id, Guid? payment_id, DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<Anonymous5> status, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a list of billing entries</summary>
        /// <param name="occurredAt_gte">Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.</param>
        /// <param name="occurredAt_lte">Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.</param>
        /// <param name="type_id">List of billing types by which billing entries are filtered.</param>
        /// <param name="offer_id">Offer ID by which billing entries are filtered.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>List of billing entries returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> BillingBillingEntriesAsync(DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<string> type_id, string offer_id, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of billing entries</summary>
        /// <param name="occurredAt_gte">Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.</param>
        /// <param name="occurredAt_lte">Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.</param>
        /// <param name="type_id">List of billing types by which billing entries are filtered.</param>
        /// <param name="offer_id">Offer ID by which billing entries are filtered.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>List of billing entries returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> BillingBillingEntriesAsync(DateTimeOffset? occurredAt_gte, DateTimeOffset? occurredAt_lte, IEnumerable<string> type_id, string offer_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a refund application details</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Successfully returned refund application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefundClaim> OrderRefundClaimsGetAsync(string claimId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a refund application details</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Successfully returned refund application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefundClaim> OrderRefundClaimsGetAsync(string claimId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Cancel a refund application</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Refund application was cancelled successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderRefundClaimsDeleteAsync(string claimId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel a refund application</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Refund application was cancelled successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderRefundClaimsDeleteAsync(string claimId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a list of refund applications</summary>
        /// <param name="lineItem_offer_id">ID of the offer associated with the refund application.</param>
        /// <param name="buyer_login">Login of the buyer that made the purchase associated with the refund application.</param>
        /// <param name="status">Status of the refund application.</param>
        /// <param name="limit">Maximum number of returned refund applications in response.</param>
        /// <param name="offset">Index of the first returned refund application from all search results.</param>
        /// <returns>Successfully returned list of refund applications.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> OrderRefundClaimsGetAsync(string lineItem_offer_id, string buyer_login, Status? status, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of refund applications</summary>
        /// <param name="lineItem_offer_id">ID of the offer associated with the refund application.</param>
        /// <param name="buyer_login">Login of the buyer that made the purchase associated with the refund application.</param>
        /// <param name="status">Status of the refund application.</param>
        /// <param name="limit">Maximum number of returned refund applications in response.</param>
        /// <param name="offset">Index of the first returned refund application from all search results.</param>
        /// <returns>Successfully returned list of refund applications.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> OrderRefundClaimsGetAsync(string lineItem_offer_id, string buyer_login, Status? status, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a refund application</summary>
        /// <returns>The refund application was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderRefundClaimsPostAsync(RefundClaimRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a refund application</summary>
        /// <returns>The refund application was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrderRefundClaimsPostAsync(RefundClaimRequest body, System.Threading.CancellationToken cancellationToken);

    }
}
