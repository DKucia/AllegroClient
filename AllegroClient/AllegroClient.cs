//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AllegroClient
{
    using global::AllegroClient;
    using Newtonsoft.Json;
    using System;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class AllegroClient :IAllegroClient
    {
        private string _baseUrl = "https://api.allegro.pl/";
        private string _token;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private AllegroEnviromentType _enviroment = AllegroEnviromentType.Production;

        public AllegroClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        public AllegroClient(AllegroEnviromentType allegroEnviroment,string token)
        {
            
            _enviroment = allegroEnviroment;
            SetBaseUrl(allegroEnviroment);
            _token = token;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
        
        public void SetToken(string token )
        {
            _token = token;
        }

        public void SetEnviroment(AllegroEnviromentType allegroEnviroment)
        {
            _enviroment = allegroEnviroment;
            SetBaseUrl(allegroEnviroment);
        }

        private void SetBaseUrl(AllegroEnviromentType enviromentType)
        {
            if (enviromentType.Equals(AllegroEnviromentType.Production))
            {
                _baseUrl = "https://api.allegro.pl/";
            }
            else
            {
                _baseUrl = "https://api.allegro.pl.allegrosandbox.pl/";
            }
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            settings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        private void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url)
        {
            request.Headers.Add("Authorization", "Bearer "+_token);
        }
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        public async  Task<TokenResponse> GetAuthToken(string authKey, string code,string redirectUri)
        {
            string url;
            if (_enviroment.Equals(AllegroEnviromentType.Production))
                url = $"https://allegro.pl/auth/oauth/token?grant_type=authorization_code&code={code}&redirect_uri={redirectUri}&prompt=confirm";
            else
                url = $"https://allegro.pl.allegrosandbox.pl/auth/oauth/token?grant_type=authorization_code&code={code}&redirect_uri={redirectUri}&prompt=confirm";
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authKey);
            var response = await client.PostAsync(url,null);
            if (!response.IsSuccessStatusCode)
            {
                var objectResponse =await  response.Content.ReadAsStringAsync();
                throw new AllegroException<ErrorsHolder>("The request query parameters are invalid.", (int)response.StatusCode, objectResponse,  null,null,null);
            }

            return JsonConvert.DeserializeObject<TokenResponse>(await response.Content.ReadAsStringAsync());

        }

        /// <summary>Modify the Buy Now price in an offer</summary>
        /// <param name="offerId">The offer identifier.</param>
        /// <param name="commandId">The unique command id generated by you.</param>
        /// <returns>The command was created successfully and is queued for processing.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ChangePrice> OffersChangePriceCommandsAsync(string offerId, System.Guid commandId, ChangePriceWithoutOutput body)
        {
            return OffersChangePriceCommandsAsync(offerId, commandId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify the Buy Now price in an offer</summary>
        /// <param name="offerId">The offer identifier.</param>
        /// <param name="commandId">The unique command id generated by you.</param>
        /// <returns>The command was created successfully and is queued for processing.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ChangePrice> OffersChangePriceCommandsAsync(string offerId, System.Guid commandId, ChangePriceWithoutOutput body, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offers/{offerId}/change-price-commands/{commandId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChangePrice>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("An immediate error response is returned whether the command input data is not valid or there is an internal problem with our systems.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a draft offer</summary>
        /// <returns>Offer created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Offer> SaleOffersPostAsync(object body)
        {
            return SaleOffersPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a draft offer</summary>
        /// <returns>Offer created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Offer> SaleOffersPostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Offer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get seller's offers</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="name">The text to search in the offer title.</param>
        /// <param name="sellingMode_price_amount_gte">The lower threshold of price.</param>
        /// <param name="sellingMode_price_amount_lte">The upper threshold of price.</param>
        /// <param name="publication_status">The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: `publication.status=INACTIVE&amp;publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.</param>
        /// <param name="sellingMode_format">The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: `sellingMode.format=BUY_NOW&amp;sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.</param>
        /// <param name="external_id">The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: `external.id=1233&amp;external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.</param>
        /// <param name="delivery_shippingRates_id">The ID of shipping rates. Returns offers with given shipping rates ID.</param>
        /// <param name="delivery_shippingRates_id_empty">Allow to filter offers by existence of shipping rates ID.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by offer creation time, descending.</param>
        /// <param name="limit">The maximum number of offers returned in the response.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <returns>The list of offers returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OffersSearchResultDto> SaleOffersGetAsync(string offer_id, string name, double? sellingMode_price_amount_gte, double? sellingMode_price_amount_lte, System.Collections.Generic.IEnumerable<Anonymous> publication_status, System.Collections.Generic.IEnumerable<Anonymous2> sellingMode_format, System.Collections.Generic.IEnumerable<string> external_id, System.Guid? delivery_shippingRates_id, bool? delivery_shippingRates_id_empty, Sort? sort, int? limit, int? offset)
        {
            return SaleOffersGetAsync(offer_id, name, sellingMode_price_amount_gte, sellingMode_price_amount_lte, publication_status, sellingMode_format, external_id, delivery_shippingRates_id, delivery_shippingRates_id_empty, sort, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get seller's offers</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="name">The text to search in the offer title.</param>
        /// <param name="sellingMode_price_amount_gte">The lower threshold of price.</param>
        /// <param name="sellingMode_price_amount_lte">The upper threshold of price.</param>
        /// <param name="publication_status">The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: `publication.status=INACTIVE&amp;publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.</param>
        /// <param name="sellingMode_format">The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: `sellingMode.format=BUY_NOW&amp;sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.</param>
        /// <param name="external_id">The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: `external.id=1233&amp;external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.</param>
        /// <param name="delivery_shippingRates_id">The ID of shipping rates. Returns offers with given shipping rates ID.</param>
        /// <param name="delivery_shippingRates_id_empty">Allow to filter offers by existence of shipping rates ID.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by offer creation time, descending.</param>
        /// <param name="limit">The maximum number of offers returned in the response.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <returns>The list of offers returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OffersSearchResultDto> SaleOffersGetAsync(string offer_id, string name, double? sellingMode_price_amount_gte, double? sellingMode_price_amount_lte, System.Collections.Generic.IEnumerable<Anonymous> publication_status, System.Collections.Generic.IEnumerable<Anonymous2> sellingMode_format, System.Collections.Generic.IEnumerable<string> external_id, System.Guid? delivery_shippingRates_id, bool? delivery_shippingRates_id_empty, Sort? sort, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers?");
            if (offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sellingMode_price_amount_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sellingMode.price.amount.gte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellingMode_price_amount_gte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sellingMode_price_amount_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sellingMode.price.amount.lte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sellingMode_price_amount_lte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (publication_status != null) 
            {
                foreach (var item_ in publication_status) { urlBuilder_.Append(System.Uri.EscapeDataString("publication.status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sellingMode_format != null) 
            {
                foreach (var item_ in sellingMode_format) { urlBuilder_.Append(System.Uri.EscapeDataString("sellingMode.format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (external_id != null) 
            {
                foreach (var item_ in external_id) { urlBuilder_.Append(System.Uri.EscapeDataString("external.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (delivery_shippingRates_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("delivery.shippingRates.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delivery_shippingRates_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (delivery_shippingRates_id_empty != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("delivery.shippingRates.id.empty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delivery_shippingRates_id_empty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OffersSearchResultDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The request query parameters are invalid.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OffersSearchResultDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Complete a draft offer or edit an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer updated successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Offer> SaleOffersPutAsync(string offerId, string bodyJson)
        {
            return SaleOffersPutAsync(offerId, bodyJson, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete a draft offer or edit an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer updated successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Offer> SaleOffersPutAsync(string offerId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "201") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Created", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Offer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get all fields of the particular offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Offer> SaleOffersGetAsync(string offerId)
        {
            return SaleOffersGetAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all fields of the particular offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Offer returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Offer> SaleOffersGetAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Offer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a draft offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>No content</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOffersDeleteAsync(string offerId)
        {
            return SaleOffersDeleteAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a draft offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>No content</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOffersDeleteAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Batch offer publish / unpublish</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">publicationChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsPutAsync(string commandId, PublicationChangeCommandDto body)
        {
            return SaleOfferPublicationCommandsPutAsync(commandId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer publish / unpublish</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">publicationChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsPutAsync(string commandId, PublicationChangeCommandDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-publication-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Semantically incorrect request or provided conditions not correct", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command id was already used", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Publish command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsGetAsync(string commandId)
        {
            return SaleOfferPublicationCommandsGetAsync(commandId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Publish command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferPublicationCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-publication-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Publish command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskReport> SaleOfferPublicationCommandsTasksAsync(string commandId, int? limit, int? offset)
        {
            return SaleOfferPublicationCommandsTasksAsync(commandId, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Publish command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskReport> SaleOfferPublicationCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-publication-commands/{commandId}/tasks?");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get classified packages assigned to an offer</summary>
        /// <param name="offerId">Offer ID.</param>
        /// <returns>Packages returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClassifiedResponse> SaleOfferClassifiedsPackagesGetAsync(string offerId)
        {
            return SaleOfferClassifiedsPackagesGetAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get classified packages assigned to an offer</summary>
        /// <param name="offerId">Offer ID.</param>
        /// <returns>Packages returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClassifiedResponse> SaleOfferClassifiedsPackagesGetAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-classifieds-packages/{offerId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClassifiedResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Classified not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ClassifiedResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign packages to a classified</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <param name="body">Packages that should be assigned to the classified.</param>
        /// <returns>Packages have been successfully assigned to the classified.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOfferClassifiedsPackagesPutAsync(string offerId, ClassifiedPackages body)
        {
            return SaleOfferClassifiedsPackagesPutAsync(offerId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign packages to a classified</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <param name="body">Packages that should be assigned to the classified.</param>
        /// <returns>Packages have been successfully assigned to the classified.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOfferClassifiedsPackagesPutAsync(string offerId, ClassifiedPackages body, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-classifieds-packages/{offerId}");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get configurations of packages</summary>
        /// <param name="category_id">The category ID.</param>
        /// <returns>Package configurations for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClassifiedPackageConfigs> SaleClassifiedsPackagesByCategoryIdGetAsync(string category_id)
        {
            return SaleClassifiedsPackagesByCategoryIdGetAsync(category_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get configurations of packages</summary>
        /// <param name="category_id">The category ID.</param>
        /// <returns>Package configurations for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClassifiedPackageConfigs> SaleClassifiedsPackagesByCategoryIdGetAsync(string category_id, System.Threading.CancellationToken cancellationToken)
        {
            if (category_id == null)
                throw new System.ArgumentNullException("category_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/classifieds-packages?");
            urlBuilder_.Append(System.Uri.EscapeDataString("category.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClassifiedPackageConfigs>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ClassifiedPackageConfigs);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the configuration of a package</summary>
        /// <param name="packageId">The classifieds package ID.</param>
        /// <returns>The package's configuration returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClassifiedPackageConfig> SaleClassifiedsPackagesGetAsync(string packageId)
        {
            return SaleClassifiedsPackagesGetAsync(packageId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the configuration of a package</summary>
        /// <param name="packageId">The classifieds package ID.</param>
        /// <returns>The package's configuration returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClassifiedPackageConfig> SaleClassifiedsPackagesGetAsync(string packageId, System.Threading.CancellationToken cancellationToken)
        {
            if (packageId == null)
                throw new System.ArgumentNullException("packageId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/classifieds-packages/{packageId}");
            urlBuilder_.Replace("{packageId}", System.Uri.EscapeDataString(ConvertToString(packageId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClassifiedPackageConfig>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The classifieds package not found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ClassifiedPackageConfig);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get any user's ratings summary</summary>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Feedback statistics returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserRatingSummaryResponse> UsersRatingsSummaryAsync(string userId)
        {
            return UsersRatingsSummaryAsync(userId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get any user's ratings summary</summary>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Feedback statistics returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserRatingSummaryResponse> UsersRatingsSummaryAsync(string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users/{userId}/ratings-summary");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRatingSummaryResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("User with the given ID not found or user is not a seller.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserRatingSummaryResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's ratings</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your ratings only.</param>
        /// <param name="recommended">Filter by recommended.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserRatingListResponse> SaleUserRatingsAsync(string user_id, Recommended? recommended, int? offset, int? limit)
        {
            return SaleUserRatingsAsync(user_id, recommended, offset, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's ratings</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your ratings only.</param>
        /// <param name="recommended">Filter by recommended.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserRatingListResponse> SaleUserRatingsAsync(string user_id, Recommended? recommended, int? offset, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/user-ratings?");
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recommended != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recommended") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recommended, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRatingListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserRatingListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Answer for user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Answer> SaleUserRatingsAnswerAsync(string ratingId, object body)
        {
            return SaleUserRatingsAnswerAsync(ratingId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Answer for user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Answer> SaleUserRatingsAnswerAsync(string ratingId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (ratingId == null)
                throw new System.ArgumentNullException("ratingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/user-ratings/{ratingId}/answer");
            urlBuilder_.Replace("{ratingId}", System.Uri.EscapeDataString(ConvertToString(ratingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Answer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Answer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Request removal of user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Removal> SaleUserRatingsRemovalAsync(string ratingId, object body)
        {
            return SaleUserRatingsRemovalAsync(ratingId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request removal of user's rating</summary>
        /// <param name="ratingId">ID of the rating.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Removal> SaleUserRatingsRemovalAsync(string ratingId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (ratingId == null)
                throw new System.ArgumentNullException("ratingId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/user-ratings/{ratingId}/removal");
            urlBuilder_.Replace("{ratingId}", System.Uri.EscapeDataString(ConvertToString(ratingId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Removal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Removal);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get basic information about user</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MeResponse> MeAsync()
        {
            return MeAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get basic information about user</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MeResponse> MeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/me");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - when token is without user context", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create additional services group</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPostAsync(object body)
        {
            return SaleOfferAdditionalServicesGroupsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create additional services group</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-additional-services/groups");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalServicesGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalServicesGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's additional services groups</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalServicesGroups> SaleOfferAdditionalServicesGroupsGetAsync(int? offset, int? limit, string user_id)
        {
            return SaleOfferAdditionalServicesGroupsGetAsync(offset, limit, user_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's additional services groups</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalServicesGroups> SaleOfferAdditionalServicesGroupsGetAsync(int? offset, int? limit, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-additional-services/groups?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalServicesGroups>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalServicesGroups);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new promotion</summary>
        /// <returns>Successfully created the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsPostAsync(SellerCreateRebateRequestDto body)
        {
            return SaleLoyaltyPromotionsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new promotion</summary>
        /// <returns>Successfully created the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsPostAsync(SellerCreateRebateRequestDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotions");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SellerRebateDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation failed - your request was correct, but the promotion could not be created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SellerRebateDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's list of promotions</summary>
        /// <param name="user_id">The id of the user who is the owner of the promotions.</param>
        /// <param name="limit">Limit of promotions per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promotions are returned.</param>
        /// <param name="offer_id">Filter by offer id.</param>
        /// <param name="promotionType">Filter by promotion type.</param>
        /// <returns>Successfully returned the requested list of promotions</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SellerRebatesDto> SaleLoyaltyPromotionsGetAsync(string user_id, int? limit, int? offset, string offer_id, PromotionType? promotionType)
        {
            return SaleLoyaltyPromotionsGetAsync(user_id, limit, offset, offer_id, promotionType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's list of promotions</summary>
        /// <param name="user_id">The id of the user who is the owner of the promotions.</param>
        /// <param name="limit">Limit of promotions per page.</param>
        /// <param name="offset">Distance between the beginning of the document and the point from which promotions are returned.</param>
        /// <param name="offer_id">Filter by offer id.</param>
        /// <param name="promotionType">Filter by promotion type.</param>
        /// <returns>Successfully returned the requested list of promotions</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SellerRebatesDto> SaleLoyaltyPromotionsGetAsync(string user_id, int? limit, int? offset, string offer_id, PromotionType? promotionType, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotions?");
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (promotionType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("promotionType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(promotionType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SellerRebatesDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User id not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Restrictions were not satisfied", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SellerRebatesDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a promotion data by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully returned the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsGetAsync(string promotionId)
        {
            return SaleLoyaltyPromotionsGetAsync(promotionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a promotion data by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully returned the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SellerRebateDto> SaleLoyaltyPromotionsGetAsync(string promotionId, System.Threading.CancellationToken cancellationToken)
        {
            if (promotionId == null)
                throw new System.ArgumentNullException("promotionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotions/{promotionId}");
            urlBuilder_.Replace("{promotionId}", System.Uri.EscapeDataString(ConvertToString(promotionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SellerRebateDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SellerRebateDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Deactivate a promotion by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully deactivated the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleLoyaltyPromotionsDeleteAsync(string promotionId)
        {
            return SaleLoyaltyPromotionsDeleteAsync(promotionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deactivate a promotion by id</summary>
        /// <param name="promotionId">Promotion identifier.</param>
        /// <returns>Successfully deactivated the requested promotion</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleLoyaltyPromotionsDeleteAsync(string promotionId, System.Threading.CancellationToken cancellationToken)
        {
            if (promotionId == null)
                throw new System.ArgumentNullException("promotionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotions/{promotionId}");
            urlBuilder_.Replace("{promotionId}", System.Uri.EscapeDataString(ConvertToString(promotionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion cannot be reactivated", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an application for a promotion campaign</summary>
        /// <param name="body">request</param>
        /// <returns>Promotion campaign application created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PromotionCampaignResponseDto> SaleLoyaltyPromotionCampaignsPostAsync(PromotionCampaignRequestDto body)
        {
            return SaleLoyaltyPromotionCampaignsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an application for a promotion campaign</summary>
        /// <param name="body">request</param>
        /// <returns>Promotion campaign application created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PromotionCampaignResponseDto> SaleLoyaltyPromotionCampaignsPostAsync(PromotionCampaignRequestDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotion-campaigns");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PromotionCampaignResponseDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation failed - your request was correct, but the promotion campaign application could not be created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PromotionCampaignResponseDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's promotion campaigns</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Active or suspended promotion campaigns returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PromotionCampaignsResponseDto> SaleLoyaltyPromotionCampaignsGetAsync(string promotion_id, int? limit, int? offset)
        {
            return SaleLoyaltyPromotionCampaignsGetAsync(promotion_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's promotion campaigns</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Active or suspended promotion campaigns returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PromotionCampaignsResponseDto> SaleLoyaltyPromotionCampaignsGetAsync(string promotion_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotion-campaigns?");
            if (promotion_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("promotion.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(promotion_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PromotionCampaignsResponseDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion campaign not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PromotionCampaignsResponseDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a campaign in a promotion</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="campaign_id">The campaign unique id.</param>
        /// <returns>Campaign deletion requested successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignsDeleteAsync(string promotion_id, string campaign_id)
        {
            return SaleLoyaltyPromotionCampaignsDeleteAsync(promotion_id, campaign_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a campaign in a promotion</summary>
        /// <param name="promotion_id">The promotion unique id.</param>
        /// <param name="campaign_id">The campaign unique id.</param>
        /// <returns>Campaign deletion requested successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignsDeleteAsync(string promotion_id, string campaign_id, System.Threading.CancellationToken cancellationToken)
        {
            if (promotion_id == null)
                throw new System.ArgumentNullException("promotion_id");
    
            if (campaign_id == null)
                throw new System.ArgumentNullException("campaign_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotion-campaigns?");
            urlBuilder_.Append(System.Uri.EscapeDataString("promotion.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(promotion_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("campaign.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(campaign_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Campaign cannot be deleted", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Successfully returned promotion campaign application</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> SaleLoyaltyPromotionCampaignApplicationsGetAsync(string applicationId)
        {
            return SaleLoyaltyPromotionCampaignApplicationsGetAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Successfully returned promotion campaign application</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> SaleLoyaltyPromotionCampaignApplicationsGetAsync(string applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotion-campaign-applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "303") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Promotion campaign application verified and accepted", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion campaign application not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Promotion campaign application deletion requested successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignApplicationsDeleteAsync(string applicationId)
        {
            return SaleLoyaltyPromotionCampaignApplicationsDeleteAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an application for promotion campaign</summary>
        /// <param name="applicationId">The application unique id.</param>
        /// <returns>Promotion campaign application deletion requested successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleLoyaltyPromotionCampaignApplicationsDeleteAsync(string applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/loyalty/promotion-campaign-applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion campaign application not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Promotion campaign application cannot be deleted", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Preview offer fees</summary>
        /// <param name="body">command</param>
        /// <returns>Returns applicable fees</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Wraps_listing_and_commissions_fees> PricingFeePreviewAsync(Wrapper_type_for_preview_conditions body)
        {
            return PricingFeePreviewAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Preview offer fees</summary>
        /// <param name="body">command</param>
        /// <returns>Returns applicable fees</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Wraps_listing_and_commissions_fees> PricingFeePreviewAsync(Wrapper_type_for_preview_conditions body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pricing/fee-preview");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Wraps_listing_and_commissions_fees>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Server understands the content but can not process the requested data (example not existing categoryId)", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Wraps_listing_and_commissions_fees);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Calculate fee and commission for an offer</summary>
        /// <returns>Fee calculated successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FeePreviewResponse> PricingOfferFeePreviewAsync(PublicOfferPreviewRequest body)
        {
            return PricingOfferFeePreviewAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Calculate fee and commission for an offer</summary>
        /// <returns>Fee calculated successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FeePreviewResponse> PricingOfferFeePreviewAsync(PublicOfferPreviewRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pricing/offer-fee-preview");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FeePreviewResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FeePreviewResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Batch offer modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsPutAsync(string commandId, OfferChangeCommand body)
        {
            return SaleOfferModificationCommandsPutAsync(commandId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsPutAsync(string commandId, OfferChangeCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-modification-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Semantically incorrect request or provided conditions not correct", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command id was already used", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modification command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsGetAsync(string commandId)
        {
            return SaleOfferModificationCommandsGetAsync(commandId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modification command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferModificationCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-modification-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modification command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskReport> SaleOfferModificationCommandsTasksAsync(string commandId, int? limit, int? offset)
        {
            return SaleOfferModificationCommandsTasksAsync(commandId, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modification command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskReport> SaleOfferModificationCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-modification-commands/{commandId}/tasks?");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Batch offer price modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerPriceChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsPutAsync(string commandId, OfferPriceChangeCommand body)
        {
            return SaleOfferPriceChangeCommandsPutAsync(commandId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer price modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerPriceChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsPutAsync(string commandId, OfferPriceChangeCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-price-change-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Semantically incorrect request or provided conditions not correct", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command id was already used", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change price command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsGetAsync(string commandId)
        {
            return SaleOfferPriceChangeCommandsGetAsync(commandId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change price command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferPriceChangeCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-price-change-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change price command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskReport> SaleOfferPriceChangeCommandsTasksAsync(string commandId, int? limit, int? offset)
        {
            return SaleOfferPriceChangeCommandsTasksAsync(commandId, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change price command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskReport> SaleOfferPriceChangeCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-price-change-commands/{commandId}/tasks?");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Batch offer quantity modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerQuantityChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsPutAsync(string commandId, OfferQuantityChangeCommand body)
        {
            return SaleOfferQuantityChangeCommandsPutAsync(commandId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Batch offer quantity modification</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="body">offerQuantityChangeCommandDto</param>
        /// <returns>Command was registered</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsPutAsync(string commandId, OfferQuantityChangeCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-quantity-change-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Semantically incorrect request or provided conditions not correct", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command id was already used", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change quantity command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsGetAsync(string commandId)
        {
            return SaleOfferQuantityChangeCommandsGetAsync(commandId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change quantity command summary</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <returns>report was generated and successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GeneralReport> SaleOfferQuantityChangeCommandsGetAsync(string commandId, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-quantity-change-commands/{commandId}");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GeneralReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GeneralReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change quantity command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskReport> SaleOfferQuantityChangeCommandsTasksAsync(string commandId, int? limit, int? offset)
        {
            return SaleOfferQuantityChangeCommandsTasksAsync(commandId, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change quantity command detailed report</summary>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Task status successfully returned</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskReport> SaleOfferQuantityChangeCommandsTasksAsync(string commandId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (commandId == null)
                throw new System.ArgumentNullException("commandId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-quantity-change-commands/{commandId}/tasks?");
            urlBuilder_.Replace("{commandId}", System.Uri.EscapeDataString(ConvertToString(commandId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Command not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get IDs of Allegro categories</summary>
        /// <param name="parent_id">The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned.</param>
        /// <returns>The list of categories returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CategoriesDto> SaleCategoriesByParentIdGetAsync(string parent_id=null)
        {
            return SaleCategoriesByParentIdGetAsync(parent_id, System.Threading.CancellationToken.None);
        }


        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get IDs of Allegro categories</summary>
        /// <param name="parent_id">The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned.</param>
        /// <returns>The list of categories returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CategoriesDto> SaleCategoriesByParentIdGetAsync(string parent_id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/categories?");
            if (parent_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("parent.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parent_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));

    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoriesDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The category with the given ID does not exist.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CategoriesDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a category by ID</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The details of a category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CategoryDto> SaleCategoriesByCategoryIdGetAsync(string categoryId)
        {
            return SaleCategoriesByCategoryIdGetAsync(categoryId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a category by ID</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The details of a category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CategoryDto> SaleCategoriesByCategoryIdGetAsync(string categoryId, System.Threading.CancellationToken cancellationToken)
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/categories/{categoryId}");
            urlBuilder_.Replace("{categoryId}", System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The category with the given ID does not exist.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CategoryDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get parameters supported by a category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of parameters for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CategoryParameterList> SaleCategoriesParametersAsync(string categoryId)
        {
            return SaleCategoriesParametersAsync(categoryId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get parameters supported by a category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of parameters for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CategoryParameterList> SaleCategoriesParametersAsync(string categoryId, System.Threading.CancellationToken cancellationToken)
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/categories/{categoryId}/parameters");
            urlBuilder_.Replace("{categoryId}", System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryParameterList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The category with the given ID does not exist.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CategoryParameterList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get product parameters available in given category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of product parameters for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CategoryProductParameterList> SaleCategoriesProductParametersAsync(string categoryId)
        {
            return SaleCategoriesProductParametersAsync(categoryId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get product parameters available in given category</summary>
        /// <param name="categoryId">The category ID.</param>
        /// <returns>The list of product parameters for the category returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CategoryProductParameterList> SaleCategoriesProductParametersAsync(string categoryId, System.Threading.CancellationToken cancellationToken)
        {
            if (categoryId == null)
                throw new System.ArgumentNullException("categoryId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/categories/{categoryId}/product-parameters");
            urlBuilder_.Replace("{categoryId}", System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryProductParameterList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The category with the given ID does not exist.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CategoryProductParameterList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's additional services definitions</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionsResponse> SaleOfferAdditionalServicesDefinitionsAsync(int? offset, int? limit, string user_id)
        {
            return SaleOfferAdditionalServicesDefinitionsAsync(offset, limit, user_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's additional services definitions</summary>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="user_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionsResponse> SaleOfferAdditionalServicesDefinitionsAsync(int? offset, int? limit, string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-additional-services/definitions?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DefinitionsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's shipping rates</summary>
        /// <param name="seller_id">Shipping rates owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> SaleShippingRatesBySellerIdGetAsync(string seller_id)
        {
            return SaleShippingRatesBySellerIdGetAsync(seller_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's shipping rates</summary>
        /// <param name="seller_id">Shipping rates owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> SaleShippingRatesBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/shipping-rates?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new shipping rates set</summary>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPostAsync(ShippingRatesSet body)
        {
            return SaleShippingRatesPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new shipping rates set</summary>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPostAsync(ShippingRatesSet body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/shipping-rates");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingRatesSet>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("The user has reached the limit of shipping rates sets. Information on the limit will be returned in the error message.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ShippingRatesSet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the details of a shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesGetAsync(string id)
        {
            return SaleShippingRatesGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of a shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/shipping-rates/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingRatesSet>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Shipping rates set with given ID not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ShippingRatesSet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Edit a user's shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPutAsync(string id, ShippingRatesSet body)
        {
            return SaleShippingRatesPutAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a user's shipping rates set</summary>
        /// <param name="id">Shipping rates set identifier.</param>
        /// <param name="body">Shipping rates set</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ShippingRatesSet> SaleShippingRatesPutAsync(string id, ShippingRatesSet body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/shipping-rates/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingRatesSet>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Set with given id does not exist", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ShippingRatesSet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsGetAsync()
        {
            return SaleDeliverySettingsGetAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/delivery-settings");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeliverySettingsDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - not allowed to access user data.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeliverySettingsDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsPutAsync()
        {
            return SaleDeliverySettingsPutAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify the user's delivery settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeliverySettingsDto> SaleDeliverySettingsPutAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/delivery-settings");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/vnd.allegro.public.v1+json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeliverySettingsDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - not allowed to access user data.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeliverySettingsDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a point of service</summary>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Pos> PointsOfServicePostAsync(object body)
        {
            return PointsOfServicePostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a point of service</summary>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Pos> PointsOfServicePostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/points-of-service");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Pos>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Pos);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's points of service</summary>
        /// <param name="seller_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> PointsOfServiceBySellerIdGetAsync(string seller_id)
        {
            return PointsOfServiceBySellerIdGetAsync(seller_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's points of service</summary>
        /// <param name="seller_id">User identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchResult> PointsOfServiceBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/points-of-service?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the details of a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Pos> PointsOfServiceGetAsync(string id)
        {
            return PointsOfServiceGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Pos> PointsOfServiceGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/points-of-service/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Pos>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Pos);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify a point of service</summary>
        /// <param name="id">Point of service ID. Must match values with 'id' property from the body.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Pos> PointsOfServicePutAsync(string id, object body)
        {
            return PointsOfServicePutAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify a point of service</summary>
        /// <param name="id">Point of service ID. Must match values with 'id' property from the body.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Pos> PointsOfServicePutAsync(string id, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/points-of-service/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Pos>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Pos);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>No content</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PointsOfServiceDeleteAsync(string id)
        {
            return PointsOfServiceDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a point of service</summary>
        /// <param name="id">Point of service ID.</param>
        /// <returns>No content</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PointsOfServiceDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/points-of-service/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new contact</summary>
        /// <param name="body">New contact</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPostAsync(ContactRequest body)
        {
            return SaleOfferContactsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new contact</summary>
        /// <param name="body">New contact</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPostAsync(ContactRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-contacts");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContactResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's contacts</summary>
        /// <param name="seller_id">Contacts owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContactResponseList> SaleOfferContactsBySellerIdGetAsync(string seller_id)
        {
            return SaleOfferContactsBySellerIdGetAsync(seller_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's contacts</summary>
        /// <param name="seller_id">Contacts owner identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContactResponseList> SaleOfferContactsBySellerIdGetAsync(string seller_id, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-contacts?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactResponseList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContactResponseList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsGetAsync(string id)
        {
            return SaleOfferContactsGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-contacts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContactResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <param name="body">Contact</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPutAsync(string id, ContactRequest body)
        {
            return SaleOfferContactsPutAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify contact details</summary>
        /// <param name="id">Contact identifier.</param>
        /// <param name="body">Contact</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContactResponse> SaleOfferContactsPutAsync(string id, ContactRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-contacts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContactResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the list of delivery methods</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> SaleDeliveryMethodsAsync()
        {
            return SaleDeliveryMethodsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of delivery methods</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> SaleDeliveryMethodsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/delivery-methods");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Authentication required.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the details of an additional services group</summary>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsGetAsync(string groupId)
        {
            return SaleOfferAdditionalServicesGroupsGetAsync(groupId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of an additional services group</summary>
        /// <param name="groupId">Additional Service Group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsGetAsync(string groupId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-additional-services/groups/{groupId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalServicesGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalServicesGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify an additional services group</summary>
        /// <param name="groupId">Additional service group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPutAsync(string groupId, object body)
        {
            return SaleOfferAdditionalServicesGroupsPutAsync(groupId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify an additional services group</summary>
        /// <param name="groupId">Additional service group ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalServicesGroupResponse> SaleOfferAdditionalServicesGroupsPutAsync(string groupId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-additional-services/groups/{groupId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalServicesGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalServicesGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a size table details</summary>
        /// <param name="tableId">Table identifier.</param>
        /// <returns>Size table returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PublicTableDto> SaleSizeTablesByTableIdGetAsync(string tableId)
        {
            return SaleSizeTablesByTableIdGetAsync(tableId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a size table details</summary>
        /// <param name="tableId">Table identifier.</param>
        /// <returns>Size table returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PublicTableDto> SaleSizeTablesByTableIdGetAsync(string tableId, System.Threading.CancellationToken cancellationToken)
        {
            if (tableId == null)
                throw new System.ArgumentNullException("tableId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/size-tables/{tableId}");
            urlBuilder_.Replace("{tableId}", System.Uri.EscapeDataString(ConvertToString(tableId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PublicTableDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PublicTableDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's size tables</summary>
        /// <param name="user_id">User identifier.</param>
        /// <returns>Size tables returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PublicTablesDto> SaleSizeTablesGetAsync(string user_id)
        {
            return SaleSizeTablesGetAsync(user_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's size tables</summary>
        /// <param name="user_id">User identifier.</param>
        /// <returns>Size tables returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PublicTablesDto> SaleSizeTablesGetAsync(string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/size-tables?");
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PublicTablesDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PublicTablesDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's return policies</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your return policies only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnPoliciesList_ReturnPolicyBasic_> AfterSalesServiceConditionsReturnPoliciesGetAsync(string seller_id, int? limit, int? offset)
        {
            return AfterSalesServiceConditionsReturnPoliciesGetAsync(seller_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's return policies</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your return policies only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnPoliciesList_ReturnPolicyBasic_> AfterSalesServiceConditionsReturnPoliciesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/return-policies?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPoliciesList_ReturnPolicyBasic_>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ReturnPoliciesList_ReturnPolicyBasic_);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create new user's return policy</summary>
        /// <param name="body">Return Policy</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPostAsync(ReturnPolicyRequest body)
        {
            return AfterSalesServiceConditionsReturnPoliciesPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's return policy</summary>
        /// <param name="body">Return Policy</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPostAsync(ReturnPolicyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/return-policies");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPolicyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ReturnPolicyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesGetAsync(string returnPolicyId)
        {
            return AfterSalesServiceConditionsReturnPoliciesGetAsync(returnPolicyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesGetAsync(string returnPolicyId, System.Threading.CancellationToken cancellationToken)
        {
            if (returnPolicyId == null)
                throw new System.ArgumentNullException("returnPolicyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/return-policies/{returnPolicyId}");
            urlBuilder_.Replace("{returnPolicyId}", System.Uri.EscapeDataString(ConvertToString(returnPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPolicyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ReturnPolicyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <param name="body">Return Policy</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPutAsync(string returnPolicyId, ReturnPolicyRequest body)
        {
            return AfterSalesServiceConditionsReturnPoliciesPutAsync(returnPolicyId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's return policy</summary>
        /// <param name="returnPolicyId">The ID of the return policy.</param>
        /// <param name="body">Return Policy</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnPolicyResponse> AfterSalesServiceConditionsReturnPoliciesPutAsync(string returnPolicyId, ReturnPolicyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (returnPolicyId == null)
                throw new System.ArgumentNullException("returnPolicyId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/return-policies/{returnPolicyId}");
            urlBuilder_.Replace("{returnPolicyId}", System.Uri.EscapeDataString(ConvertToString(returnPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnPolicyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ReturnPolicyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's implied warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your implied warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ImpliedWarrantiesList_ImpliedWarrantyBasic_> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string seller_id, int? limit, int? offset)
        {
            return AfterSalesServiceConditionsImpliedWarrantiesGetAsync(seller_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's implied warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your implied warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ImpliedWarrantiesList_ImpliedWarrantyBasic_> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/implied-warranties?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImpliedWarrantiesList_ImpliedWarrantyBasic_>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ImpliedWarrantiesList_ImpliedWarrantyBasic_);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create new user's implied warranty</summary>
        /// <param name="body">Implied warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPostAsync(ImpliedWarrantyRequest body)
        {
            return AfterSalesServiceConditionsImpliedWarrantiesPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's implied warranty</summary>
        /// <param name="body">Implied warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPostAsync(ImpliedWarrantyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/implied-warranties");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImpliedWarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ImpliedWarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string impliedWarrantyId)
        {
            return AfterSalesServiceConditionsImpliedWarrantiesGetAsync(impliedWarrantyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesGetAsync(string impliedWarrantyId, System.Threading.CancellationToken cancellationToken)
        {
            if (impliedWarrantyId == null)
                throw new System.ArgumentNullException("impliedWarrantyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}");
            urlBuilder_.Replace("{impliedWarrantyId}", System.Uri.EscapeDataString(ConvertToString(impliedWarrantyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImpliedWarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ImpliedWarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <param name="body">Implied warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPutAsync(string impliedWarrantyId, ImpliedWarrantyRequest body)
        {
            return AfterSalesServiceConditionsImpliedWarrantiesPutAsync(impliedWarrantyId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's implied warranty</summary>
        /// <param name="impliedWarrantyId">The ID of the implied warranty.</param>
        /// <param name="body">Implied warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ImpliedWarrantyResponse> AfterSalesServiceConditionsImpliedWarrantiesPutAsync(string impliedWarrantyId, ImpliedWarrantyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (impliedWarrantyId == null)
                throw new System.ArgumentNullException("impliedWarrantyId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}");
            urlBuilder_.Replace("{impliedWarrantyId}", System.Uri.EscapeDataString(ConvertToString(impliedWarrantyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImpliedWarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ImpliedWarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WarrantiesList_WarrantyBasic_> AfterSalesServiceConditionsWarrantiesGetAsync(string seller_id, int? limit, int? offset)
        {
            return AfterSalesServiceConditionsWarrantiesGetAsync(seller_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's warranties</summary>
        /// <param name="seller_id">Filter by user id. You are allowed to get your warranties only.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WarrantiesList_WarrantyBasic_> AfterSalesServiceConditionsWarrantiesGetAsync(string seller_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seller_id == null)
                throw new System.ArgumentNullException("seller_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/warranties?");
            urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarrantiesList_WarrantyBasic_>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WarrantiesList_WarrantyBasic_);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create new user's warranty</summary>
        /// <param name="body">Warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPostAsync(WarrantyRequest body)
        {
            return AfterSalesServiceConditionsWarrantiesPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new user's warranty</summary>
        /// <param name="body">Warranty</param>
        /// <returns>Created</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPostAsync(WarrantyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/warranties");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesGetAsync(string warrantyId)
        {
            return AfterSalesServiceConditionsWarrantiesGetAsync(warrantyId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesGetAsync(string warrantyId, System.Threading.CancellationToken cancellationToken)
        {
            if (warrantyId == null)
                throw new System.ArgumentNullException("warrantyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/warranties/{warrantyId}");
            urlBuilder_.Replace("{warrantyId}", System.Uri.EscapeDataString(ConvertToString(warrantyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Change the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <param name="body">Warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPutAsync(string warrantyId, WarrantyRequest body)
        {
            return AfterSalesServiceConditionsWarrantiesPutAsync(warrantyId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Change the user's warranty</summary>
        /// <param name="warrantyId">The ID of the warranty.</param>
        /// <param name="body">Warranty</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WarrantyResponse> AfterSalesServiceConditionsWarrantiesPutAsync(string warrantyId, WarrantyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (warrantyId == null)
                throw new System.ArgumentNullException("warrantyId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/warranties/{warrantyId}");
            urlBuilder_.Replace("{warrantyId}", System.Uri.EscapeDataString(ConvertToString(warrantyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarrantyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WarrantyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a warranty attachment metadata</summary>
        /// <param name="body">After sale services attachment</param>
        /// <returns>Attachment created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPostAsync(Body body)
        {
            return AfterSalesServiceConditionsAttachmentsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a warranty attachment metadata</summary>
        /// <param name="body">After sale services attachment</param>
        /// <returns>Attachment created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPostAsync(Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/attachments");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AfterSalesServicesAttachment>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "415") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unsupported media type.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AfterSalesServicesAttachment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Upload an warranty attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPutAsync(string attachmentId, System.IO.Stream body)
        {
            return AfterSalesServiceConditionsAttachmentsPutAsync(attachmentId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an warranty attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AfterSalesServicesAttachment> AfterSalesServiceConditionsAttachmentsPutAsync(string attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/after-sales-service-conditions/attachments/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/pdf");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AfterSalesServicesAttachment>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not found.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "413") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Payload too large.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid file content.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AfterSalesServicesAttachment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's current offer quotes</summary>
        /// <param name="name">Offer quote name.</param>
        /// <param name="offer_id">List of offer Ids, maximum 20 values.</param>
        /// <returns>Returns current offer quotes</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OfferQuotesDto> PricingOfferQuotesAsync(string name, System.Collections.Generic.IEnumerable<string> offer_id)
        {
            return PricingOfferQuotesAsync(name, offer_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's current offer quotes</summary>
        /// <param name="name">Offer quote name.</param>
        /// <param name="offer_id">List of offer Ids, maximum 20 values.</param>
        /// <returns>Returns current offer quotes</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OfferQuotesDto> PricingOfferQuotesAsync(string name, System.Collections.Generic.IEnumerable<string> offer_id, System.Threading.CancellationToken cancellationToken)
        {
            if (offer_id == null)
                throw new System.ArgumentNullException("offer_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pricing/offer-quotes?");
            if (name != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            foreach (var item_ in offer_id) { urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferQuotesDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Invalid request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Full authentication is required to access this resource", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "503") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Service is currently unavailable. Please try again later.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OfferQuotesDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create variant set</summary>
        /// <returns>Variant set created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPostAsync(object body)
        {
            return SaleOfferVariantsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create variant set</summary>
        /// <returns>Variant set created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-variants");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VariantSetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(VariantSetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's variant sets</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your variant sets only.</param>
        /// <param name="offset">Index of first returned variant set.</param>
        /// <param name="limit">Maximum number of returned variant sets.</param>
        /// <param name="query">Filter variant sets by name or offer id.</param>
        /// <returns>Variant sets returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VariantSets> SaleOfferVariantsGetAsync(string user_id, int? offset, int? limit, string query)
        {
            return SaleOfferVariantsGetAsync(user_id, offset, limit, query, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's variant sets</summary>
        /// <param name="user_id">Filter by user id, you are allowed to get your variant sets only.</param>
        /// <param name="offset">Index of first returned variant set.</param>
        /// <param name="limit">Maximum number of returned variant sets.</param>
        /// <param name="query">Filter variant sets by name or offer id.</param>
        /// <returns>Variant sets returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VariantSets> SaleOfferVariantsGetAsync(string user_id, int? offset, int? limit, string query, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-variants?");
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VariantSets>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(VariantSets);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set updated successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPutAsync(string setId, object body)
        {
            return SaleOfferVariantsPutAsync(setId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set updated successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsPutAsync(string setId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (setId == null)
                throw new System.ArgumentNullException("setId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-variants/{setId}");
            urlBuilder_.Replace("{setId}", System.Uri.EscapeDataString(ConvertToString(setId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VariantSetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(VariantSetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsGetAsync(string setId)
        {
            return SaleOfferVariantsGetAsync(setId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VariantSetResponse> SaleOfferVariantsGetAsync(string setId, System.Threading.CancellationToken cancellationToken)
        {
            if (setId == null)
                throw new System.ArgumentNullException("setId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-variants/{setId}");
            urlBuilder_.Replace("{setId}", System.Uri.EscapeDataString(ConvertToString(setId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VariantSetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(VariantSetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set deleted successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOfferVariantsDeleteAsync(string setId)
        {
            return SaleOfferVariantsDeleteAsync(setId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variant set</summary>
        /// <param name="setId">Variant set identifier.</param>
        /// <returns>Variant set deleted successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOfferVariantsDeleteAsync(string setId, System.Threading.CancellationToken cancellationToken)
        {
            if (setId == null)
                throw new System.ArgumentNullException("setId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-variants/{setId}");
            urlBuilder_.Replace("{setId}", System.Uri.EscapeDataString(ConvertToString(setId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Variant set not found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Upload an offer image</summary>
        /// <returns>Image uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OfferImageUploadResponse> SaleImagesAsync(object body)
        {
            return SaleImagesAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an offer image</summary>
        /// <returns>Image uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OfferImageUploadResponse> SaleImagesAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/images");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferImageUploadResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "413") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Image is too big", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "415") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unsupported media type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable entity (problem with image server)", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OfferImageUploadResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an offer attachment</summary>
        /// <returns>Attachment created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OfferAttachment> SaleOfferAttachmentsPostAsync(object body)
        {
            return SaleOfferAttachmentsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an offer attachment</summary>
        /// <returns>Attachment created successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OfferAttachment> SaleOfferAttachmentsPostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-attachments");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferAttachment>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "415") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unsupported media type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OfferAttachment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Upload an offer attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOfferAttachmentsPutAsync(System.Guid attachmentId, System.IO.Stream body)
        {
            return SaleOfferAttachmentsPutAsync(attachmentId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload an offer attachment</summary>
        /// <param name="attachmentId">The ID of the attachment.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOfferAttachmentsPutAsync(System.Guid attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-attachments/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/pdf");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Search offers</summary>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="phrase">The search phrase. The phrase is searched in different fields of the offers depending on the value of the `searchMode` parameter.</param>
        /// <param name="seller_id">The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.</param>
        /// <param name="searchMode">Defines where the given phrase should be searched in. Allowed values:
        /// 
        ///   - *REGULAR* - searching for a phrase in the title,
        ///   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
        ///   - *CLOSED* - searching for a phrase in the title of closed offers.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <param name="limit">The maximum number of offers in a response.</param>
        /// <param name="sort">Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means descending order.</param>
        /// <param name="include">Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use `-` prefix to exclude an entity.
        /// Example:
        /// `include=-all&amp;include=filters&amp;include=sort` - returns only filters and sort entities.</param>
        /// <param name="fallback">Defines the behaviour of the search engine when no results with exact phrase match are found:
        /// 
        ///   - *true* - related (not exact) results are returned,
        ///   - *false* - empty results are returned.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///     {
        ///     	"id": "parameter.11323",
        ///     	"type": "MULTI",
        ///     	"name": "Stan",
        ///     	"values": [{
        ///     			"value": "11323_1",
        ///     			"name": "nowe",
        ///     			"count": 21,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_2",
        ///     			"name": "używane",
        ///     			"count": 157,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_238066",
        ///     			"name": "po zwrocie",
        ///     			"count": 1,
        ///     			"selected": false
        ///     		}
        ///     	]
        ///     }
        ///   ````
        /// You can use 'Stan' filter to query results, i.e.:
        ///   * `parameter.11323=11323_1` for "nowe"
        ///   * `parameter.11323=11323_2` for "używane"
        ///   * `parameter.11323=11323_238066` for "po zwrocie".</param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ListingResponse> OffersListingAsync(string category_id, string phrase, string seller_id, SearchMode? searchMode, int? offset, int? limit, Sort2? sort, string include, bool? fallback, System.Collections.Generic.IDictionary<string, string> dynamic_filters)
        {
            return OffersListingAsync(category_id, phrase, seller_id, searchMode, offset, limit, sort, include, fallback, dynamic_filters, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search offers</summary>
        /// <param name="category_id">The identifier of the category, where you want to search for offers.</param>
        /// <param name="phrase">The search phrase. The phrase is searched in different fields of the offers depending on the value of the `searchMode` parameter.</param>
        /// <param name="seller_id">The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.</param>
        /// <param name="searchMode">Defines where the given phrase should be searched in. Allowed values:
        /// 
        ///   - *REGULAR* - searching for a phrase in the title,
        ///   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
        ///   - *CLOSED* - searching for a phrase in the title of closed offers.</param>
        /// <param name="offset">Index of the first returned offer from all search results.</param>
        /// <param name="limit">The maximum number of offers in a response.</param>
        /// <param name="sort">Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means descending order.</param>
        /// <param name="include">Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use `-` prefix to exclude an entity.
        /// Example:
        /// `include=-all&amp;include=filters&amp;include=sort` - returns only filters and sort entities.</param>
        /// <param name="fallback">Defines the behaviour of the search engine when no results with exact phrase match are found:
        /// 
        ///   - *true* - related (not exact) results are returned,
        ///   - *false* - empty results are returned.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///     {
        ///     	"id": "parameter.11323",
        ///     	"type": "MULTI",
        ///     	"name": "Stan",
        ///     	"values": [{
        ///     			"value": "11323_1",
        ///     			"name": "nowe",
        ///     			"count": 21,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_2",
        ///     			"name": "używane",
        ///     			"count": 157,
        ///     			"selected": false
        ///     		},
        ///     		{
        ///     			"value": "11323_238066",
        ///     			"name": "po zwrocie",
        ///     			"count": 1,
        ///     			"selected": false
        ///     		}
        ///     	]
        ///     }
        ///   ````
        /// You can use 'Stan' filter to query results, i.e.:
        ///   * `parameter.11323=11323_1` for "nowe"
        ///   * `parameter.11323=11323_2` for "używane"
        ///   * `parameter.11323=11323_238066` for "po zwrocie".</param>
        /// <returns>The request successfully returns the search result.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ListingResponse> OffersListingAsync(string category_id, string phrase, string seller_id, SearchMode? searchMode, int? offset, int? limit, Sort2? sort, string include, bool? fallback, System.Collections.Generic.IDictionary<string, string> dynamic_filters, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/offers/listing?");
            if (category_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phrase != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phrase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phrase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (seller_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seller.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seller_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchMode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (include != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fallback != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fallback") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fallback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dynamic_filters != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Dynamic filters") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dynamic_filters, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListingResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request. Check if all necessary parameters are provided.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Given category was not found. Check category.id parameter.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("One of parameters have invalid value or given parameters combination is forbidden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Internal service error.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "502") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Error caused by upstream service failure.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ListingResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get order events</summary>
        /// <param name="from">You can use the event ID to retrieve subsequent chunks of events.</param>
        /// <param name="type">Specify array of event types for filtering. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
        ///   * `BUYER_CANCELLED`: purchase was cancelled by buyer
        ///   * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.</param>
        /// <param name="limit">The maximum number of events returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderEventsList> OrderEventsAsync(string from, System.Collections.Generic.IEnumerable<string> type, int? limit)
        {
            return OrderEventsAsync(from, type, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get order events</summary>
        /// <param name="from">You can use the event ID to retrieve subsequent chunks of events.</param>
        /// <param name="type">Specify array of event types for filtering. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
        ///   * `BUYER_CANCELLED`: purchase was cancelled by buyer
        ///   * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.</param>
        /// <param name="limit">The maximum number of events returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrderEventsList> OrderEventsAsync(string from, System.Collections.Generic.IEnumerable<string> type, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/events?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderEventsList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OrderEventsList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get order events statistics</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrderEventStats> OrderEventStatsAsync()
        {
            return OrderEventStatsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get order events statistics</summary>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrderEventStats> OrderEventStatsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/event-stats");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderEventStats>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OrderEventStats);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's orders</summary>
        /// <param name="offset">Index of first returned checkout-form from all search results.</param>
        /// <param name="limit">Maximum number of checkout-forms in response.</param>
        /// <param name="status">Specify status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in.
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
        ///   * `CANCELLED`: purchase cancelled by buyer.</param>
        /// <param name="fulfillment_status">Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `NEW`
        ///   * `PROCESSING`
        ///   * `READY_FOR_SHIPMENT`
        ///   * `SENT`
        ///   * `CANCELLED`.</param>
        /// <param name="fulfillment_shipmentSummary_lineItemsSent">Specify filter for line items sending status. Allowed values are:
        ///   * `NONE`: none of line items have tracking number specified
        ///   * `SOME`: some of line items have tracking number specified
        ///   * `ALL`: all of line items have tracking number specified.</param>
        /// <param name="lineItems_boughtAt_lte">Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="lineItems_boughtAt_gte">Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="payment_id">Find checkout-forms having specified payment id.</param>
        /// <param name="surcharges_id">Find checkout-forms having specified surcharge id.</param>
        /// <param name="delivery_method_id">Find checkout-forms having specified delivery method id.</param>
        /// <param name="buyer_login">Find checkout-forms having specified buyer login.</param>
        /// <param name="updatedAt_lte">Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="updatedAt_gte">Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CheckoutForms> OrderCheckoutFormsGetAsync(int? offset, int? limit, string status, string fulfillment_status, string fulfillment_shipmentSummary_lineItemsSent, System.DateTimeOffset? lineItems_boughtAt_lte, System.DateTimeOffset? lineItems_boughtAt_gte, string payment_id, string surcharges_id, string delivery_method_id, string buyer_login, System.DateTimeOffset? updatedAt_lte, System.DateTimeOffset? updatedAt_gte, Sort3? sort)
        {
            return OrderCheckoutFormsGetAsync(offset, limit, status, fulfillment_status, fulfillment_shipmentSummary_lineItemsSent, lineItems_boughtAt_lte, lineItems_boughtAt_gte, payment_id, surcharges_id, delivery_method_id, buyer_login, updatedAt_lte, updatedAt_gte, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's orders</summary>
        /// <param name="offset">Index of first returned checkout-form from all search results.</param>
        /// <param name="limit">Maximum number of checkout-forms in response.</param>
        /// <param name="status">Specify status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `BOUGHT`: purchase without checkout form filled in.
        ///   * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
        ///   * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
        ///   * `CANCELLED`: purchase cancelled by buyer.</param>
        /// <param name="fulfillment_status">Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:
        ///   * `NEW`
        ///   * `PROCESSING`
        ///   * `READY_FOR_SHIPMENT`
        ///   * `SENT`
        ///   * `CANCELLED`.</param>
        /// <param name="fulfillment_shipmentSummary_lineItemsSent">Specify filter for line items sending status. Allowed values are:
        ///   * `NONE`: none of line items have tracking number specified
        ///   * `SOME`: some of line items have tracking number specified
        ///   * `ALL`: all of line items have tracking number specified.</param>
        /// <param name="lineItems_boughtAt_lte">Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="lineItems_boughtAt_gte">Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="payment_id">Find checkout-forms having specified payment id.</param>
        /// <param name="surcharges_id">Find checkout-forms having specified surcharge id.</param>
        /// <param name="delivery_method_id">Find checkout-forms having specified delivery method id.</param>
        /// <param name="buyer_login">Find checkout-forms having specified buyer login.</param>
        /// <param name="updatedAt_lte">Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.</param>
        /// <param name="updatedAt_gte">Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.</param>
        /// <param name="sort">The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order. If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CheckoutForms> OrderCheckoutFormsGetAsync(int? offset, int? limit, string status, string fulfillment_status, string fulfillment_shipmentSummary_lineItemsSent, System.DateTimeOffset? lineItems_boughtAt_lte, System.DateTimeOffset? lineItems_boughtAt_gte, string payment_id, string surcharges_id, string delivery_method_id, string buyer_login, System.DateTimeOffset? updatedAt_lte, System.DateTimeOffset? updatedAt_gte, Sort3? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/checkout-forms?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillment_status != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillment.status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillment_status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillment_shipmentSummary_lineItemsSent != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillment.shipmentSummary.lineItemsSent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillment_shipmentSummary_lineItemsSent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItems_boughtAt_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lineItems.boughtAt.lte") + "=").Append(System.Uri.EscapeDataString(lineItems_boughtAt_lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineItems_boughtAt_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lineItems.boughtAt.gte") + "=").Append(System.Uri.EscapeDataString(lineItems_boughtAt_gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payment_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payment.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payment_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (surcharges_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("surcharges.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(surcharges_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (delivery_method_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("delivery.method.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delivery_method_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (buyer_login != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("buyer.login") + "=").Append(System.Uri.EscapeDataString(ConvertToString(buyer_login, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAt_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt.lte") + "=").Append(System.Uri.EscapeDataString(updatedAt_lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAt_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt.gte") + "=").Append(System.Uri.EscapeDataString(updatedAt_gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutForms>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Bad Request - Returned when request parameters contains illegal values.\n", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity - Returned when limit or offset value is outside an acceptable range\n", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CheckoutForms);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an order's details</summary>
        /// <param name="id">Checkout form identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CheckoutForm> OrderCheckoutFormsGetAsync(System.Guid id)
        {
            return OrderCheckoutFormsGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an order's details</summary>
        /// <param name="id">Checkout form identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CheckoutForm> OrderCheckoutFormsGetAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/checkout-forms/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutForm>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CheckoutForm);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of available shipping carriers</summary>
        /// <returns>List of available shipping carriers.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OrdersShippingCarriersResponse> OrderCarriersAsync()
        {
            return OrderCarriersAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of available shipping carriers</summary>
        /// <returns>List of available shipping carriers.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OrdersShippingCarriersResponse> OrderCarriersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/carriers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdersShippingCarriersResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OrdersShippingCarriersResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of parcel tracking numbers</summary>
        /// <param name="id">Order identifier.</param>
        /// <returns>Returns a list of parcel tracking numbers (shipments)</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CheckoutFormOrderWaybillResponse> OrderCheckoutFormsShipmentsGetAsync(string id)
        {
            return OrderCheckoutFormsShipmentsGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of parcel tracking numbers</summary>
        /// <param name="id">Order identifier.</param>
        /// <returns>Returns a list of parcel tracking numbers (shipments)</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CheckoutFormOrderWaybillResponse> OrderCheckoutFormsShipmentsGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/checkout-forms/{id}/shipments");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutFormOrderWaybillResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Authentication failed, e.g. token is expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Order not found or doesn\u2019t belong to the seller", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CheckoutFormOrderWaybillResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a parcel tracking number</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>The request is OK and the parcel tracking number will be assigned to the order</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CheckoutFormAddWaybillCreated> OrderCheckoutFormsShipmentsPostAsync(string id, CheckoutFormAddWaybillRequest body)
        {
            return OrderCheckoutFormsShipmentsPostAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a parcel tracking number</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="body">request</param>
        /// <returns>The request is OK and the parcel tracking number will be assigned to the order</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CheckoutFormAddWaybillCreated> OrderCheckoutFormsShipmentsPostAsync(string id, CheckoutFormAddWaybillRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/checkout-forms/{id}/shipments");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutFormAddWaybillCreated>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long)", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Authentication failed, e.g. token is expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Order not found or doesn\u2019t belong to the seller", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Some of the provided data is invalid, e.g. line item doesn\u2019t belong to the order", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CheckoutFormAddWaybillCreated);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set seller order status</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="checkoutForm_revision">Checkout form revision.</param>
        /// <param name="body">request</param>
        /// <returns>Fulfillment set successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task OrderCheckoutFormsFulfillmentAsync(string id, string checkoutForm_revision, CheckoutFormFulfillment body)
        {
            return OrderCheckoutFormsFulfillmentAsync(id, checkoutForm_revision, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set seller order status</summary>
        /// <param name="id">Order identifier.</param>
        /// <param name="checkoutForm_revision">Checkout form revision.</param>
        /// <param name="body">request</param>
        /// <returns>Fulfillment set successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task OrderCheckoutFormsFulfillmentAsync(string id, string checkoutForm_revision, CheckoutFormFulfillment body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/checkout-forms/{id}/fulfillment?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (checkoutForm_revision != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkoutForm.revision") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkoutForm_revision, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Authentication failed, e.g. token is expired", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Order not found or doesn\u2019t belong to the seller", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Conflict. Provided revision is outdated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Some of the provided data is invalid, e.g. unrecognized status value", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's disputes</summary>
        /// <param name="checkoutForm_id">Checkout form identifier.</param>
        /// <param name="limit">The maximum number of disputes in a response.</param>
        /// <param name="offset">Index of first returned dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisputeListResponse> SaleDisputesGetAsync(System.Guid? checkoutForm_id, int? limit, int? offset)
        {
            return SaleDisputesGetAsync(checkoutForm_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's disputes</summary>
        /// <param name="checkoutForm_id">Checkout form identifier.</param>
        /// <param name="limit">The maximum number of disputes in a response.</param>
        /// <param name="offset">Index of first returned dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisputeListResponse> SaleDisputesGetAsync(System.Guid? checkoutForm_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/disputes?");
            if (checkoutForm_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkoutForm.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkoutForm_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisputeListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DisputeListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a single dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Dispute> SaleDisputesGetAsync(System.Guid disputeId)
        {
            return SaleDisputesGetAsync(disputeId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Dispute> SaleDisputesGetAsync(System.Guid disputeId, System.Threading.CancellationToken cancellationToken)
        {
            if (disputeId == null)
                throw new System.ArgumentNullException("disputeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/disputes/{disputeId}");
            urlBuilder_.Replace("{disputeId}", System.Uri.EscapeDataString(ConvertToString(disputeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Dispute>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Dispute);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the messages within a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <param name="limit">The maximum number of messages within dispute returned in a response.</param>
        /// <param name="offset">Index of first returned message within dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisputeMessageList> SaleDisputesMessagesGetAsync(System.Guid disputeId, int? limit, int? offset)
        {
            return SaleDisputesMessagesGetAsync(disputeId, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the messages within a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <param name="limit">The maximum number of messages within dispute returned in a response.</param>
        /// <param name="offset">Index of first returned message within dispute.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisputeMessageList> SaleDisputesMessagesGetAsync(System.Guid disputeId, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (disputeId == null)
                throw new System.ArgumentNullException("disputeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/disputes/{disputeId}/messages?");
            urlBuilder_.Replace("{disputeId}", System.Uri.EscapeDataString(ConvertToString(disputeId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisputeMessageList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DisputeMessageList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a message to a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>CREATED</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisputeMessage> SaleDisputesMessagesPostAsync(System.Guid disputeId, object body)
        {
            return SaleDisputesMessagesPostAsync(disputeId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a message to a dispute</summary>
        /// <param name="disputeId">Dispute identifier.</param>
        /// <returns>CREATED</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisputeMessage> SaleDisputesMessagesPostAsync(System.Guid disputeId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (disputeId == null)
                throw new System.ArgumentNullException("disputeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/disputes/{disputeId}/messages");
            urlBuilder_.Replace("{disputeId}", System.Uri.EscapeDataString(ConvertToString(disputeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisputeMessage>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DisputeMessage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an attachment declaration</summary>
        /// <returns>CREATED</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisputeAttachmentId> SaleDisputeAttachmentsPostAsync(object body)
        {
            return SaleDisputeAttachmentsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an attachment declaration</summary>
        /// <returns>CREATED</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisputeAttachmentId> SaleDisputeAttachmentsPostAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/dispute-attachments");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisputeAttachmentId>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DisputeAttachmentId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Upload a dispute message attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleDisputeAttachmentsPutAsync(System.Guid attachmentId, System.IO.Stream body)
        {
            return SaleDisputeAttachmentsPutAsync(attachmentId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload a dispute message attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>File uploaded correctly</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleDisputeAttachmentsPutAsync(System.Guid attachmentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/dispute-attachments/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("image/png");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Syntactically incorrect request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Invalid or missing bearer token", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "413") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("File is too big", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "415") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unsupported media type", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> SaleDisputeAttachmentsGetAsync(System.Guid attachmentId)
        {
            return SaleDisputeAttachmentsGetAsync(attachmentId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an attachment</summary>
        /// <param name="attachmentId">Attachment identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> SaleDisputeAttachmentsGetAsync(System.Guid attachmentId, System.Threading.CancellationToken cancellationToken)
        {
            if (attachmentId == null)
                throw new System.ArgumentNullException("attachmentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/dispute-attachments/{attachmentId}");
            urlBuilder_.Replace("{attachmentId}", System.Uri.EscapeDataString(ConvertToString(attachmentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get mapping for line item id</summary>
        /// <param name="lineItemId">Line item identifier.</param>
        /// <param name="dealId">Deal identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LineItemIdMappings> OrderLineItemIdMappingsAsync(System.Guid? lineItemId, string dealId)
        {
            return OrderLineItemIdMappingsAsync(lineItemId, dealId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get mapping for line item id</summary>
        /// <param name="lineItemId">Line item identifier.</param>
        /// <param name="dealId">Deal identifier.</param>
        /// <returns>OK</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LineItemIdMappings> OrderLineItemIdMappingsAsync(System.Guid? lineItemId, string dealId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/line-item-id-mappings?");
            if (lineItemId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lineItemId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItemId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dealId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dealId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dealId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LineItemIdMappings>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Missing required parameter. Provide lineItemId or dealId.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(LineItemIdMappings);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a tag</summary>
        /// <param name="body">request</param>
        /// <returns>Successfully created the requested tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TagId> SaleOfferTagsPostAsync(TagRequest body)
        {
            return SaleOfferTagsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a tag</summary>
        /// <param name="body">request</param>
        /// <returns>Successfully created the requested tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TagId> SaleOfferTagsPostAsync(TagRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-tags");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TagId>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation failed - your request was correct, but the tag could not be created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User is not brandzone user and doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TagId);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the user's tags</summary>
        /// <param name="user_id">User identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully returned the requested list of tags</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TagListResponse> SaleOfferTagsGetAsync(string user_id, int? limit, int? offset)
        {
            return SaleOfferTagsGetAsync(user_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the user's tags</summary>
        /// <param name="user_id">User identifier.</param>
        /// <param name="limit">The limit of elements in the response.</param>
        /// <param name="offset">The offset of elements in the response.</param>
        /// <returns>Successfully returned the requested list of tags</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TagListResponse> SaleOfferTagsGetAsync(string user_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-tags?");
            urlBuilder_.Append(System.Uri.EscapeDataString("user.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TagListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User is not brandzone user and doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TagListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <returns>Successfully deleted tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOfferTagsDeleteAsync(string tagId)
        {
            return SaleOfferTagsDeleteAsync(tagId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <returns>Successfully deleted tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOfferTagsDeleteAsync(string tagId, System.Threading.CancellationToken cancellationToken)
        {
            if (tagId == null)
                throw new System.ArgumentNullException("tagId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-tags/{tagId}");
            urlBuilder_.Replace("{tagId}", System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Tag not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User is not brandzone user and doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Modify a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully updated the requested tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOfferTagsPutAsync(string tagId, TagRequest body)
        {
            return SaleOfferTagsPutAsync(tagId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Modify a tag</summary>
        /// <param name="tagId">Tag identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully updated the requested tag</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOfferTagsPutAsync(string tagId, TagRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (tagId == null)
                throw new System.ArgumentNullException("tagId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-tags/{tagId}");
            urlBuilder_.Replace("{tagId}", System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation failed - your request was correct, but the tag could not be updated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User is not brandzone user and doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign tags to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully assigned tag to offer</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleOffersTagsPostAsync(string offerId, TagIdsRequest body)
        {
            return SaleOffersTagsPostAsync(offerId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign tags to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <param name="body">request</param>
        /// <returns>Successfully assigned tag to offer</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleOffersTagsPostAsync(string offerId, TagIdsRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}/tags");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - offer is created by someone else or user is not brandzone user or doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation failed - your request was correct, but the tag could not be assigned.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get tags assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned list of assigned tags</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TagListResponse> SaleOffersTagsGetAsync(string offerId)
        {
            return SaleOffersTagsGetAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get tags assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned list of assigned tags</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TagListResponse> SaleOffersTagsGetAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}/tags");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TagListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User is not brandzone user and doesn\'t have tags subscription", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TagListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get offer rating</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>OK.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OfferRating> SaleOffersRatingAsync(string offerId)
        {
            return SaleOffersRatingAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get offer rating</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>OK.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OfferRating> SaleOffersRatingAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}/rating");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferRating>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Offer access denied.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Offer not found.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OfferRating);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Get shipping rates assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned assigned shipping rates set</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OfferShippingRates> SaleOffersShippingRatesAsync(string offerId)
        {
            return SaleOffersShippingRatesAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get shipping rates assigned to an offer</summary>
        /// <param name="offerId">Offer identifier.</param>
        /// <returns>Successfully returned assigned shipping rates set</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OfferShippingRates> SaleOffersShippingRatesAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offers/{offerId}/shipping-rates");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfferShippingRates>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized action", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(OfferShippingRates);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get search products results</summary>
        /// <param name="ean">The EAN values can include EAN, ISBN, and UPC identifier types.</param>
        /// <param name="phrase">Search phrase.</param>
        /// <param name="category_id">The category identifier to filter results.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///   {
        ///     "id": "127448",
        ///     "name": "Kolor",
        ///     "type": "SINGLE",
        ///     "values": [
        ///       {
        ///         "name": "biały",
        ///         "value": "2"
        ///       },
        ///       {
        ///         "name": "czarny",
        ///         "value": "1" }
        ///     ]
        ///   }
        ///   ````
        /// You can use 'Kolor' filter to query results, i.e.:
        ///   * `127448=2` for "biały"
        ///   * `127448=1` for "czarny".</param>
        /// <param name="page_id">A "cursor" to the next set of results.</param>
        /// <returns>Successful operation.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSaleProductsResponse> SaleProductsGetAsync(string ean, string phrase, string category_id, System.Collections.Generic.IDictionary<string, string> dynamic_filters, string page_id)
        {
            return SaleProductsGetAsync(ean, phrase, category_id, dynamic_filters, page_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get search products results</summary>
        /// <param name="ean">The EAN values can include EAN, ISBN, and UPC identifier types.</param>
        /// <param name="phrase">Search phrase.</param>
        /// <param name="category_id">The category identifier to filter results.</param>
        /// <param name="dynamic_filters">You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value. When the filter definition looks like:
        ///   ````
        ///   {
        ///     "id": "127448",
        ///     "name": "Kolor",
        ///     "type": "SINGLE",
        ///     "values": [
        ///       {
        ///         "name": "biały",
        ///         "value": "2"
        ///       },
        ///       {
        ///         "name": "czarny",
        ///         "value": "1" }
        ///     ]
        ///   }
        ///   ````
        /// You can use 'Kolor' filter to query results, i.e.:
        ///   * `127448=2` for "biały"
        ///   * `127448=1` for "czarny".</param>
        /// <param name="page_id">A "cursor" to the next set of results.</param>
        /// <returns>Successful operation.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSaleProductsResponse> SaleProductsGetAsync(string ean, string phrase, string category_id, System.Collections.Generic.IDictionary<string, string> dynamic_filters, string page_id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/products?");
            if (ean != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phrase != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phrase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phrase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (category_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dynamic_filters != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Dynamic filters") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dynamic_filters, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSaleProductsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("One of parameters have invalid value.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetSaleProductsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get all data of the particular product</summary>
        /// <param name="productId">The product identifier.</param>
        /// <returns>Product returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SaleProductDto> SaleProductsGetAsync(string productId)
        {
            return SaleProductsGetAsync(productId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all data of the particular product</summary>
        /// <param name="productId">The product identifier.</param>
        /// <returns>Product returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SaleProductDto> SaleProductsGetAsync(string productId, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/products/{productId}");
            urlBuilder_.Replace("{productId}", System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleProductDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SaleProductDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Propose a product</summary>
        /// <returns>Product proposed successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SaleProductDto> SaleProductProposalsAsync(ProposeSaleProductRequest body)
        {
            return SaleProductProposalsAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Propose a product</summary>
        /// <returns>Product proposed successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SaleProductDto> SaleProductProposalsAsync(ProposeSaleProductRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/product-proposals");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleProductDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - not allowed to access.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Product already exists. Url of the existing product is provided in the HTTP Location header field of the response.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SaleProductDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create offer based on product</summary>
        /// <returns>Offer created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SaleProductOfferResponse> SaleProductOffersAsync(SaleProductOfferRequest body)
        {
            return SaleProductOffersAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create offer based on product</summary>
        /// <returns>Offer created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SaleProductOfferResponse> SaleProductOffersAsync(SaleProductOfferRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/product-offers");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.beta.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleProductOfferResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden - not allowed to access.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SaleProductOfferResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get list of categories where compatibility list is supported</summary>
        /// <returns>Configuration of supported categories.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompatibilityListSupportedCategoriesDto> SaleCompatibilityListSupportedCategoriesAsync()
        {
            return SaleCompatibilityListSupportedCategoriesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of categories where compatibility list is supported</summary>
        /// <returns>Configuration of supported categories.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompatibilityListSupportedCategoriesDto> SaleCompatibilityListSupportedCategoriesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/compatibility-list/supported-categories");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompatibilityListSupportedCategoriesDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompatibilityListSupportedCategoriesDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get list of compatible product groups</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Groups of compatible products returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompatibleProductsGroupsDto> SaleCompatibleProductsGroupsAsync(string if_Modified_Since, string type, int? limit, int? offset)
        {
            return SaleCompatibleProductsGroupsAsync(if_Modified_Since, type, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of compatible product groups</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="limit">The limit of returned items.</param>
        /// <param name="offset">The offset of returned items.</param>
        /// <returns>Groups of compatible products returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompatibleProductsGroupsDto> SaleCompatibleProductsGroupsAsync(string if_Modified_Since, string type, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/compatible-products/groups?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_Modified_Since != null)
                        request_.Headers.TryAddWithoutValidation("If-Modified-Since", ConvertToString(if_Modified_Since, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompatibleProductsGroupsDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Data has not been modified after the date provided in If-Modified-Since header.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompatibleProductsGroupsDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get list of compatible products</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Header is ignored if `phrase` parameter is used.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="group_id">Group identifier from `/sale/compatible-products/groups` resource. Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.</param>
        /// <param name="tecdoc_kTypNr">Identifier of passenger vehicle (kTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="tecdoc_nTypNr">Identifier of commercial vehicle (nTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="phrase">Query for compatible products. When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.</param>
        /// <param name="limit">The limit of returned items. If `phrase` parameter is present, parameter is ignored and maximum value is set to `200`.</param>
        /// <param name="offset">The offset of returned items. If `phrase` parameter is present, parameter is ignored.</param>
        /// <returns>Compatible products returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CompatibleProductsListDto> SaleCompatibleProductsAsync(string if_Modified_Since, string type, string group_id, string tecdoc_kTypNr, string tecdoc_nTypNr, string phrase, int? limit, int? offset)
        {
            return SaleCompatibleProductsAsync(if_Modified_Since, type, group_id, tecdoc_kTypNr, tecdoc_nTypNr, phrase, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of compatible products</summary>
        /// <param name="if_Modified_Since">Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Header is ignored if `phrase` parameter is used.</param>
        /// <param name="type">Type of compatible products. You can find available types in the response for the GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt;supported-categories&lt;/a&gt; resource. You can use value provided in `itemsType`, for categories where `inputType=ID`.</param>
        /// <param name="group_id">Group identifier from `/sale/compatible-products/groups` resource. Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.</param>
        /// <param name="tecdoc_kTypNr">Identifier of passenger vehicle (kTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="tecdoc_nTypNr">Identifier of commercial vehicle (nTypNr) from TecDoc database. When used, `group.id` parameter is ignored.</param>
        /// <param name="phrase">Query for compatible products. When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.</param>
        /// <param name="limit">The limit of returned items. If `phrase` parameter is present, parameter is ignored and maximum value is set to `200`.</param>
        /// <param name="offset">The offset of returned items. If `phrase` parameter is present, parameter is ignored.</param>
        /// <returns>Compatible products returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CompatibleProductsListDto> SaleCompatibleProductsAsync(string if_Modified_Since, string type, string group_id, string tecdoc_kTypNr, string tecdoc_nTypNr, string phrase, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/compatible-products?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (group_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("group.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(group_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tecdoc_kTypNr != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tecdoc.kTypNr") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tecdoc_kTypNr, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tecdoc_nTypNr != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tecdoc.nTypNr") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tecdoc_nTypNr, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phrase != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phrase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phrase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_Modified_Since != null)
                        request_.Headers.TryAddWithoutValidation("If-Modified-Since", ConvertToString(if_Modified_Since, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompatibleProductsListDto>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Data has not been modified after the date provided in If-Modified-Since header.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CompatibleProductsListDto);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get user's additional emails</summary>
        /// <returns>List of user's additional emails returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalEmailsResponse> AccountAdditionalEmailsGetAsync()
        {
            return AccountAdditionalEmailsGetAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get user's additional emails</summary>
        /// <returns>List of user's additional emails returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalEmailsResponse> AccountAdditionalEmailsGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/additional-emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalEmailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalEmailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a new additional email address to user's account</summary>
        /// <param name="body">request</param>
        /// <returns>Additional email added successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsPostAsync(AdditionalEmailRequest body)
        {
            return AccountAdditionalEmailsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a new additional email address to user's account</summary>
        /// <param name="body">request</param>
        /// <returns>Additional email added successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsPostAsync(AdditionalEmailRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/additional-emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalEmail>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Email address provided in the request is not valid", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalEmail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get information about a particular additional email</summary>
        /// <param name="emailId">Id of the additional email.</param>
        /// <returns>Additional email returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsGetAsync(string emailId)
        {
            return AccountAdditionalEmailsGetAsync(emailId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get information about a particular additional email</summary>
        /// <param name="emailId">Id of the additional email.</param>
        /// <returns>Additional email returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AdditionalEmail> AccountAdditionalEmailsGetAsync(string emailId, System.Threading.CancellationToken cancellationToken)
        {
            if (emailId == null)
                throw new System.ArgumentNullException("emailId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/additional-emails/{emailId}");
            urlBuilder_.Replace("{emailId}", System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdditionalEmail>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Additional email not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AdditionalEmail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete an additional email address</summary>
        /// <param name="emailId">Id of the additional email to be deleted.</param>
        /// <returns>Successfully deleted additional email</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AccountAdditionalEmailsDeleteAsync(string emailId)
        {
            return AccountAdditionalEmailsDeleteAsync(emailId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an additional email address</summary>
        /// <param name="emailId">Id of the additional email to be deleted.</param>
        /// <returns>Successfully deleted additional email</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AccountAdditionalEmailsDeleteAsync(string emailId, System.Threading.CancellationToken cancellationToken)
        {
            if (emailId == null)
                throw new System.ArgumentNullException("emailId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/account/additional-emails/{emailId}");
            urlBuilder_.Replace("{emailId}", System.Uri.EscapeDataString(ConvertToString(emailId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Additional email not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Payment operations history</summary>
        /// <param name="wallet_type">Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout.</param>
        /// <param name="wallet_paymentOperator">Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator.</param>
        /// <param name="payment_id">The payment ID.</param>
        /// <param name="participant_login">Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer.</param>
        /// <param name="occurredAt_gte">The minimum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">The maximum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="group">Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>The payment operations history for given search criteria returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PaymentOperations> PaymentsPaymentOperationsAsync(Type? wallet_type, PaymentOperator? wallet_paymentOperator, System.Guid? payment_id, string participant_login, System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<Anonymous3> group, int? limit, int? offset)
        {
            return PaymentsPaymentOperationsAsync(wallet_type, wallet_paymentOperator, payment_id, participant_login, occurredAt_gte, occurredAt_lte, group, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Payment operations history</summary>
        /// <param name="wallet_type">Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout.</param>
        /// <param name="wallet_paymentOperator">Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator.</param>
        /// <param name="payment_id">The payment ID.</param>
        /// <param name="participant_login">Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer.</param>
        /// <param name="occurredAt_gte">The minimum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">The maximum date and time of operation occurrence in ISO 8601 format.</param>
        /// <param name="group">Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>The payment operations history for given search criteria returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PaymentOperations> PaymentsPaymentOperationsAsync(Type? wallet_type, PaymentOperator? wallet_paymentOperator, System.Guid? payment_id, string participant_login, System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<Anonymous3> group, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/payments/payment-operations?");
            if (wallet_type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("wallet.type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(wallet_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wallet_paymentOperator != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("wallet.paymentOperator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(wallet_paymentOperator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payment_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payment.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payment_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (participant_login != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("participant.login") + "=").Append(System.Uri.EscapeDataString(ConvertToString(participant_login, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAt_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.gte") + "=").Append(System.Uri.EscapeDataString(occurredAt_gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAt_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.lte") + "=").Append(System.Uri.EscapeDataString(occurredAt_lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (group != null) 
            {
                foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentOperations>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PaymentOperations);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Mapping of payment identifiers</summary>
        /// <param name="paymentId">Payment identifier.</param>
        /// <param name="transactionId">Transaction identifier.</param>
        /// <returns>The payment identifiers for given query param returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PaymentIdMapping> PaymentsPaymentIdMappingsAsync(System.Guid? paymentId, string transactionId)
        {
            return PaymentsPaymentIdMappingsAsync(paymentId, transactionId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Mapping of payment identifiers</summary>
        /// <param name="paymentId">Payment identifier.</param>
        /// <param name="transactionId">Transaction identifier.</param>
        /// <returns>The payment identifiers for given query param returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PaymentIdMapping> PaymentsPaymentIdMappingsAsync(System.Guid? paymentId, string transactionId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/payments/payment-id-mappings?");
            if (paymentId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transactionId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transactionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentIdMapping>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Returned when none or every of query params was provided in search parameters.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PaymentIdMapping);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get list of blacklisted users</summary>
        /// <param name="offset">Index of first returned user from all results.</param>
        /// <param name="limit">Maximum number of users in response.</param>
        /// <returns>List of blacklisted users returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BlackListPagedResponse> SaleBlacklistedUsersGetAsync(int? offset, int? limit)
        {
            return SaleBlacklistedUsersGetAsync(offset, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of blacklisted users</summary>
        /// <param name="offset">Index of first returned user from all results.</param>
        /// <param name="limit">Maximum number of users in response.</param>
        /// <returns>List of blacklisted users returned successfully</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BlackListPagedResponse> SaleBlacklistedUsersGetAsync(int? offset, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/blacklisted-users?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlackListPagedResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BlackListPagedResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a users to the blacklist</summary>
        /// <param name="body">request</param>
        /// <returns>Users successfully added to the blacklist.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BlackListResponse> SaleBlacklistedUsersPostAsync(BlacklistRequest body)
        {
            return SaleBlacklistedUsersPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a users to the blacklist</summary>
        /// <param name="body">request</param>
        /// <returns>Users successfully added to the blacklist.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BlackListResponse> SaleBlacklistedUsersPostAsync(BlacklistRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/blacklisted-users");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlackListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("User already added to the blacklist.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Request is invalid", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BlackListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove users from the blacklist</summary>
        /// <param name="excludedUserId">Remove users from the blacklist.</param>
        /// <returns>User removed form the blacklist successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SaleBlacklistedUsersDeleteAsync(long excludedUserId)
        {
            return SaleBlacklistedUsersDeleteAsync(excludedUserId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove users from the blacklist</summary>
        /// <param name="excludedUserId">Remove users from the blacklist.</param>
        /// <returns>User removed form the blacklist successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SaleBlacklistedUsersDeleteAsync(long excludedUserId, System.Threading.CancellationToken cancellationToken)
        {
            if (excludedUserId == null)
                throw new System.ArgumentNullException("excludedUserId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/blacklisted-users/{excludedUserId}");
            urlBuilder_.Replace("{excludedUserId}", System.Uri.EscapeDataString(ConvertToString(excludedUserId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Place a bid in an auction</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid succesfully placed</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidPutAsync(string offerId, BidRequest body)
        {
            return BiddingOffersBidPutAsync(offerId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place a bid in an auction</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid succesfully placed</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidPutAsync(string offerId, BidRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/bidding/offers/{offerId}/bid");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MyBidResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Bad request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Auction not found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("If bidding was not allowed (see message for explanation).", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MyBidResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get current user's bid information</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid information succesfully found.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidGetAsync(string offerId)
        {
            return BiddingOffersBidGetAsync(offerId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get current user's bid information</summary>
        /// <param name="offerId">The offer ID.</param>
        /// <returns>Bid information succesfully found.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MyBidResponse> BiddingOffersBidGetAsync(string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (offerId == null)
                throw new System.ArgumentNullException("offerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/bidding/offers/{offerId}/bid");
            urlBuilder_.Replace("{offerId}", System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MyBidResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Auction not found or user did not bid in the auction.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MyBidResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get events about the seller's offers</summary>
        /// <param name="from">The ID of the last seen event. Events that occured after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of offer events returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SellerOfferEventsResponse> SaleOfferEventsAsync(string from, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> type)
        {
            return SaleOfferEventsAsync(from, limit, type, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get events about the seller's offers</summary>
        /// <param name="from">The ID of the last seen event. Events that occured after the given event will be returned.</param>
        /// <param name="limit">The number of events that will be returned in the response.</param>
        /// <param name="type">The types of events that will be returned in the response. All types of events are returned by default.</param>
        /// <returns>The list of offer events returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SellerOfferEventsResponse> SaleOfferEventsAsync(string from, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/offer-events?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null) 
            {
                foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SellerOfferEventsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Invalid parameters supplied in the request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SellerOfferEventsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Get a list of available badge campaigns</summary>
        /// <returns>List of available badge campaigns.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetBadgeCampaignsList> SaleBadgeCampaignsAsync()
        {
            return SaleBadgeCampaignsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of available badge campaigns</summary>
        /// <returns>List of available badge campaigns.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetBadgeCampaignsList> SaleBadgeCampaignsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/badge-campaigns");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBadgeCampaignsList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Account is not a Company account type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBadgeCampaignsList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Apply for badge in selected offer</summary>
        /// <returns>Successfully applied for a badge.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BadgeApplication> SaleBadgesPostAsync(BadgeApplicationRequest body)
        {
            return SaleBadgesPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Apply for badge in selected offer</summary>
        /// <returns>Successfully applied for a badge.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BadgeApplication> SaleBadgesPostAsync(BadgeApplicationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/badges");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.beta.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadgeApplication>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Syntactically incorrect request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Account is not a Company account type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Validation error. Invalid parameters provided in the request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BadgeApplication);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Get a list of badges</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of badges returned in the response.</param>
        /// <returns>Successfully returned list of badges.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BadgesList> SaleBadgesGetAsync(string offer_id, int? offset, int? limit)
        {
            return SaleBadgesGetAsync(offer_id, offset, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of badges</summary>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of badges returned in the response.</param>
        /// <returns>Successfully returned list of badges.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BadgesList> SaleBadgesGetAsync(string offer_id, int? offset, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/badges?");
            if (offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadgesList>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Invalid values supplied in the query parameters.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Account is not a Company account type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BadgesList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Get a badge application details</summary>
        /// <param name="applicationId">Badge application ID.</param>
        /// <returns>Successfully returned badge application.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BadgeApplication> SaleBadgeApplicationsGetAsync(string applicationId)
        {
            return SaleBadgeApplicationsGetAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a badge application details</summary>
        /// <param name="applicationId">Badge application ID.</param>
        /// <returns>Successfully returned badge application.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BadgeApplication> SaleBadgeApplicationsGetAsync(string applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/badge-applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadgeApplication>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Account is not a Company account type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Badge application not found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BadgeApplication);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>[BETA] Get a list of badge applications</summary>
        /// <param name="campaign_id">Campaign ID.</param>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of applications returned in the response.</param>
        /// <returns>Successfully returned badge applications list.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BadgeApplications> SaleBadgeApplicationsGetAsync(string campaign_id, string offer_id, int? offset, int? limit)
        {
            return SaleBadgeApplicationsGetAsync(campaign_id, offer_id, offset, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[BETA] Get a list of badge applications</summary>
        /// <param name="campaign_id">Campaign ID.</param>
        /// <param name="offer_id">Offer ID.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="limit">The maximum number of applications returned in the response.</param>
        /// <returns>Successfully returned badge applications list.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BadgeApplications> SaleBadgeApplicationsGetAsync(string campaign_id, string offer_id, int? offset, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sale/badge-applications?");
            if (campaign_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("campaign.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(campaign_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.beta.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadgeApplications>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Invalid values supplied in the query parameters.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Account is not a Company account type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BadgeApplications);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Initiate a refund of a payment</summary>
        /// <returns>Refund request created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RefundDetails> PaymentsRefundsPostAsync(InitializeRefund body)
        {
            return PaymentsRefundsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate a refund of a payment</summary>
        /// <returns>Refund request created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RefundDetails> PaymentsRefundsPostAsync(InitializeRefund body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/payments/refunds");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RefundDetails>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Syntactically incorrect request.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Payment not found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RefundDetails);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of refunded payments</summary>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <param name="id">ID of the refund.</param>
        /// <param name="payment_id">ID of the payment.</param>
        /// <param name="occurredAt_gte">Minimum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">Maximum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="status">Current status of payment refund.</param>
        /// <returns>List of payments refunds returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> PaymentsRefundsGetAsync(int? limit, int? offset, System.Guid? id, System.Guid? payment_id, System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<Anonymous5> status)
        {
            return PaymentsRefundsGetAsync(limit, offset, id, payment_id, occurredAt_gte, occurredAt_lte, status, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of refunded payments</summary>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <param name="id">ID of the refund.</param>
        /// <param name="payment_id">ID of the payment.</param>
        /// <param name="occurredAt_gte">Minimum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="occurredAt_lte">Maximum date and time when the refund occurred provided in ISO 8601 format.</param>
        /// <param name="status">Current status of payment refund.</param>
        /// <returns>List of payments refunds returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> PaymentsRefundsGetAsync(int? limit, int? offset, System.Guid? id, System.Guid? payment_id, System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<Anonymous5> status, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/payments/refunds?");
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payment_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payment.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payment_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAt_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.gte") + "=").Append(System.Uri.EscapeDataString(occurredAt_gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAt_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.lte") + "=").Append(System.Uri.EscapeDataString(occurredAt_lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null) 
            {
                foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity. Returned when any of the given search parameters have an invalid value.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of billing entries</summary>
        /// <param name="occurredAt_gte">Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.</param>
        /// <param name="occurredAt_lte">Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.</param>
        /// <param name="type_id">List of billing types by which billing entries are filtered.</param>
        /// <param name="offer_id">Offer ID by which billing entries are filtered.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>List of billing entries returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> BillingBillingEntriesAsync(System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<string> type_id, string offer_id, int? limit, int? offset)
        {
            return BillingBillingEntriesAsync(occurredAt_gte, occurredAt_lte, type_id, offer_id, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of billing entries</summary>
        /// <param name="occurredAt_gte">Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.</param>
        /// <param name="occurredAt_lte">Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.</param>
        /// <param name="type_id">List of billing types by which billing entries are filtered.</param>
        /// <param name="offer_id">Offer ID by which billing entries are filtered.</param>
        /// <param name="limit">Number of returned operations.</param>
        /// <param name="offset">Index of the first returned payment operation from all search results.</param>
        /// <returns>List of billing entries returned successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> BillingBillingEntriesAsync(System.DateTimeOffset? occurredAt_gte, System.DateTimeOffset? occurredAt_lte, System.Collections.Generic.IEnumerable<string> type_id, string offer_id, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/billing/billing-entries?");
            if (occurredAt_gte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.gte") + "=").Append(System.Uri.EscapeDataString(occurredAt_gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAt_lte != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAt.lte") + "=").Append(System.Uri.EscapeDataString(occurredAt_lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type_id != null) 
            {
                foreach (var item_ in type_id) { urlBuilder_.Append(System.Uri.EscapeDataString("type.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthError>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<AuthError>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorsHolder>(response_, headers_).ConfigureAwait(false);
                            throw new AllegroException<ErrorsHolder>("Unprocessable Entity", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a refund application details</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Successfully returned refund application.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RefundClaim> OrderRefundClaimsGetAsync(string claimId)
        {
            return OrderRefundClaimsGetAsync(claimId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a refund application details</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Successfully returned refund application.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RefundClaim> OrderRefundClaimsGetAsync(string claimId, System.Threading.CancellationToken cancellationToken)
        {
            if (claimId == null)
                throw new System.ArgumentNullException("claimId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/refund-claims/{claimId}");
            urlBuilder_.Replace("{claimId}", System.Uri.EscapeDataString(ConvertToString(claimId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RefundClaim>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application does not belong to you.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application not found.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Acceptable", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RefundClaim);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Cancel a refund application</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Refund application was cancelled successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task OrderRefundClaimsDeleteAsync(string claimId)
        {
            return OrderRefundClaimsDeleteAsync(claimId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel a refund application</summary>
        /// <param name="claimId">Refund application ID.</param>
        /// <returns>Refund application was cancelled successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task OrderRefundClaimsDeleteAsync(string claimId, System.Threading.CancellationToken cancellationToken)
        {
            if (claimId == null)
                throw new System.ArgumentNullException("claimId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/refund-claims/{claimId}");
            urlBuilder_.Replace("{claimId}", System.Uri.EscapeDataString(ConvertToString(claimId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application does not belong to you.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application not found.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Acceptable", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application has already been processed.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of refund applications</summary>
        /// <param name="lineItem_offer_id">ID of the offer associated with the refund application.</param>
        /// <param name="buyer_login">Login of the buyer that made the purchase associated with the refund application.</param>
        /// <param name="status">Status of the refund application.</param>
        /// <param name="limit">Maximum number of returned refund applications in response.</param>
        /// <param name="offset">Index of the first returned refund application from all search results.</param>
        /// <returns>Successfully returned list of refund applications.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response5> OrderRefundClaimsGetAsync(string lineItem_offer_id, string buyer_login, Status? status, int? limit, int? offset)
        {
            return OrderRefundClaimsGetAsync(lineItem_offer_id, buyer_login, status, limit, offset, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of refund applications</summary>
        /// <param name="lineItem_offer_id">ID of the offer associated with the refund application.</param>
        /// <param name="buyer_login">Login of the buyer that made the purchase associated with the refund application.</param>
        /// <param name="status">Status of the refund application.</param>
        /// <param name="limit">Maximum number of returned refund applications in response.</param>
        /// <param name="offset">Index of the first returned refund application from all search results.</param>
        /// <returns>Successfully returned list of refund applications.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response5> OrderRefundClaimsGetAsync(string lineItem_offer_id, string buyer_login, Status? status, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/refund-claims?");
            if (lineItem_offer_id != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lineItem.offer.id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineItem_offer_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (buyer_login != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("buyer.login") + "=").Append(System.Uri.EscapeDataString(ConvertToString(buyer_login, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.allegro.public.v1+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Refund application does not belong to you.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Acceptable", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a refund application</summary>
        /// <returns>The refund application was created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task OrderRefundClaimsPostAsync(RefundClaimRequest body)
        {
            return OrderRefundClaimsPostAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a refund application</summary>
        /// <returns>The refund application was created successfully.</returns>
        /// <exception cref="AllegroException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task OrderRefundClaimsPostAsync(RefundClaimRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/order/refund-claims");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/vnd.allegro.public.v1+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Not Acceptable", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "422") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AllegroException("Unprocessable Entity", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new AllegroException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AllegroException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AllegroException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }

      
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class InitializeRefund 
    {
        [Newtonsoft.Json.JsonProperty("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public RefundPayment Payment { get; set; } = new RefundPayment();
    
        /// <summary>Reason for a payment refund.</summary>
        [Newtonsoft.Json.JsonProperty("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InitializeRefundReason Reason { get; set; }
    
        /// <summary>List of order's line items which can be refunded.</summary>
        [Newtonsoft.Json.JsonProperty("lineItems")]
        public System.Collections.Generic.ICollection<RefundLineItem> LineItems { get; set; }
    
        /// <summary>Payment refund for delivery.</summary>
        [Newtonsoft.Json.JsonProperty("delivery")]
        public Delivery2 Delivery { get; set; }
    
        /// <summary>Payment refund for overpaid.</summary>
        [Newtonsoft.Json.JsonProperty("overpaid")]
        public Overpaid Overpaid { get; set; }
    
        /// <summary>List of surcharges for payment which can be refunded.</summary>
        [Newtonsoft.Json.JsonProperty("surcharges")]
        public System.Collections.Generic.ICollection<PaymentsSurcharge> Surcharges { get; set; }
    
        /// <summary>Payment refund for additional services.</summary>
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        public AdditionalServices AdditionalServices { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Detailed information about the refund application.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundClaim 
    {
        /// <summary>ID of the returned refund application.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        /// <summary>Status of the returned refund application.
        /// - `IN_PROGRESS` - the application is being processed or awaits user or admin action.
        /// - `WAITING_FOR_PAYMENT_REFUND` - the application is being processed and awaits payment refund to buyer.
        /// - `GRANTED` - the application was accepted and a commission refund was granted as requested, or the application was rejected and the seller successfully appealed.
        /// - `REJECTED` - the application was rejected and no commission was refunded.
        /// - `REJECTED_AFTER_APPEAL` - the application was initially rejected and the seller unsuccessfully appealed.
        /// - `CANCELLED` - the application was cancelled by the seller.
        /// - `APPEALED` - the application was rejected and the seller appealed, but the appeal has not yet finished processing.</summary>
        [Newtonsoft.Json.JsonProperty("status")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefundClaimStatus Status { get; set; }
    
        /// <summary>Quantity of product for which the seller filed the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public int Quantity { get; set; }
    
        /// <summary>Money value of the returned refund application.</summary>
        [Newtonsoft.Json.JsonProperty("commission")]
        public Commission Commission { get; set; }
    
        /// <summary>Buyer associated with the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("buyer")]
        public Buyer Buyer { get; set; }
    
        /// <summary>Date when the refund application was created.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset ?CreatedAt { get; set; }
    
        /// <summary>Purchase associated with the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("lineItem")]
        public LineItem LineItem { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundClaimRequest 
    {
        /// <summary>Purchase for which a refund application will be created.</summary>
        [Newtonsoft.Json.JsonProperty("lineItem")]
        public LineItem2 LineItem { get; set; }
    
        /// <summary>Quantity of product for which the refund application will be created. Must be greater than zero.</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public int Quantity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Detailed information about the refund.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundDetails 
    {
        /// <summary>The payment refund identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public RefundPayment Payment { get; set; }
    
        /// <summary>Reason for a payment refund.</summary>
        [Newtonsoft.Json.JsonProperty("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefundDetailsReason Reason { get; set; }
    
        /// <summary>Current status of payment refund.</summary>
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefundDetailsStatus Status { get; set; }
    
        /// <summary>Date and time when the refund was created provided in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalValue")]
        [System.ComponentModel.DataAnnotations.Required]
        public RefundTotalValue TotalValue { get; set; }
    
        /// <summary>List of order's line items which can be refunded.</summary>
        [Newtonsoft.Json.JsonProperty("lineItems")]
        public System.Collections.Generic.ICollection<RefundLineItem> LineItems { get; set; }
    
        /// <summary>Payment refund for delivery.</summary>
        [Newtonsoft.Json.JsonProperty("delivery")]
        public Delivery3 Delivery { get; set; }
    
        /// <summary>Payment refund for overpaid.</summary>
        [Newtonsoft.Json.JsonProperty("overpaid")]
        public Overpaid2 Overpaid { get; set; }
    
        /// <summary>List of surcharges for payment which can be refunded.</summary>
        [Newtonsoft.Json.JsonProperty("surcharges")]
        public System.Collections.Generic.ICollection<PaymentsSurcharge> Surcharges { get; set; }
    
        /// <summary>Payment refund for additional services.</summary>
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        public AdditionalServices2 AdditionalServices { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundLineItem 
    {
        /// <summary>The line-item identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        /// <summary>Type for line items refund. QUANTITY is provided when you can refund one or more items. AMOUNT is provided when you can refund a partial price.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefundLineItemType Type { get; set; }
    
        /// <summary>This field is provided for QUANTITY type only. It specifies how many items will be refunded.</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public double Quantity { get; set; }
    
        /// <summary>This field is available for AMOUNT type only and specifies the amount refunded to the customer.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public Value Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Payment affected by refund operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundPayment 
    {
        /// <summary>The payment identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PaymentsSurcharge 
    {
        /// <summary>The payment identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundSurchargeValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServiceDefinitionRequest 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServiceRequest 
    {
        [Newtonsoft.Json.JsonProperty("definition")]
        [System.ComponentModel.DataAnnotations.Required]
        public AdditionalServiceDefinitionRequest Definition { get; set; } = new AdditionalServiceDefinitionRequest();
    
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("configurations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Configuration> Configurations { get; set; } = new System.Collections.ObjectModel.Collection<Configuration>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServiceResponse 
    {
        [Newtonsoft.Json.JsonProperty("configurations")]
        public System.Collections.Generic.ICollection<Configuration> Configurations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("definition")]
        public BasicDefinitionResponse Definition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServicesGroup 
    {
        /// <summary>Id of additional service group</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServicesGroupRequest 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AdditionalServiceRequest> AdditionalServices { get; set; } = new System.Collections.ObjectModel.Collection<AdditionalServiceRequest>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServicesGroupResponse 
    {
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        public System.Collections.Generic.ICollection<AdditionalServiceResponse> AdditionalServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public Reference Seller { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServicesGroups 
    {
        [Newtonsoft.Json.JsonProperty("additionalServicesGroups")]
        public System.Collections.Generic.ICollection<AdditionalServicesGroupResponse> AdditionalServicesGroups1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Address 
    {
        [Newtonsoft.Json.JsonProperty("street")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Street { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coordinates")]
        public Coordinates Coordinates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The definitions of the different after sales services assigned to the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AfterSalesServices 
    {
        [Newtonsoft.Json.JsonProperty("impliedWarranty")]
        public ImpliedWarranty ImpliedWarranty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("returnPolicy")]
        public ReturnPolicy ReturnPolicy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("warranty")]
        public Warranty Warranty { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AfterSalesServicesAttachment 
    {
        /// <summary>The Id of the attachment.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        /// <summary>Attachment file name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Direct link to the attachment.</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The implied warranty information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarranty 
    {
        /// <summary>The ID of the implied warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The return policy information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicy 
    {
        /// <summary>The ID of the return policy definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The warranty information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Warranty 
    {
        /// <summary>The ID of the warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantyRequest 
    {
        /// <summary>Warranty name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarrantyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("individual")]
        public WarrantyPeriod Individual { get; set; }
    
        [Newtonsoft.Json.JsonProperty("corporate")]
        public WarrantyPeriod Corporate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public WarrantyAttachment Attachment { get; set; }
    
        /// <summary>Warranty description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantyResponse 
    {
        /// <summary>The ID of the warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public Seller Seller { get; set; }
    
        /// <summary>Warranty name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarrantyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("individual")]
        public WarrantyPeriod Individual { get; set; }
    
        [Newtonsoft.Json.JsonProperty("corporate")]
        public WarrantyPeriod Corporate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public AfterSalesServicesAttachment Attachment { get; set; }
    
        /// <summary>Warranty description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Defines who is warrantor.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum WarrantyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MANUFACTURER")]
        MANUFACTURER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantyPeriod 
    {
        /// <summary>Period in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("period")]
        public string Period { get; set; }
    
        /// <summary>Indices if it is lifetime warranty.</summary>
        [Newtonsoft.Json.JsonProperty("lifetime")]
        public bool Lifetime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantyAttachment 
    {
        /// <summary>The Id of the attachment received in a response from *POST /afters-sales-service-conditions/attachments*</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        /// <summary>Attachment file name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarrantyRequest 
    {
        /// <summary>Warranty name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("individual")]
        public ImpliedWarrantyPeriod Individual { get; set; }
    
        [Newtonsoft.Json.JsonProperty("corporate")]
        public ImpliedWarrantyPeriod Corporate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public AfterSalesServicesAddress Address { get; set; }
    
        /// <summary>Implied warranty description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarrantyResponse 
    {
        /// <summary>The ID of the implied warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public Seller Seller { get; set; }
    
        /// <summary>Implied warranty name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("individual")]
        public ImpliedWarrantyPeriod Individual { get; set; }
    
        [Newtonsoft.Json.JsonProperty("corporate")]
        public ImpliedWarrantyPeriod Corporate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public AfterSalesServicesAddress Address { get; set; }
    
        /// <summary>Implied warranty description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarrantyPeriod 
    {
        /// <summary>Period in ISO 8601 format. Only periods in full years are accepted.</summary>
        [Newtonsoft.Json.JsonProperty("period")]
        public string Period { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AfterSalesServicesAddress 
    {
        /// <summary>Company or person name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        /// <summary>Street name.</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Street { get; set; }
    
        /// <summary>Post code.</summary>
        [Newtonsoft.Json.JsonProperty("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; }
    
        /// <summary>City name.</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string City { get; set; }
    
        /// <summary>Country code.</summary>
        [Newtonsoft.Json.JsonProperty("countyCode")]
        public string CountyCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicyRequest 
    {
        /// <summary>Return policy name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("availability")]
        public ReturnPolicyAvailability Availability { get; set; }
    
        /// <summary>Period in ISO 8601 format. Only periods in full days are accepted.</summary>
        [Newtonsoft.Json.JsonProperty("withdrawalPeriod")]
        public string WithdrawalPeriod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("returnCost")]
        public ReturnPolicyReturnCost ReturnCost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public AfterSalesServicesAttachment Attachment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public AfterSalesServicesAddress Address { get; set; }
    
        /// <summary>Return policy description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicyResponse 
    {
        /// <summary>The ID of the return policy definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public Seller Seller { get; set; }
    
        /// <summary>Return policy name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("availability")]
        public ReturnPolicyAvailability Availability { get; set; }
    
        /// <summary>Period in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("withdrawalPeriod")]
        public string WithdrawalPeriod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("returnCost")]
        public ReturnPolicyReturnCost ReturnCost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public AfterSalesServicesAttachment Attachment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public AfterSalesServicesAddress Address { get; set; }
    
        /// <summary>Return policy description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.StringLength(10240)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicyAvailability 
    {
        /// <summary>Indicates if return policy is full or restricted.</summary>
        [Newtonsoft.Json.JsonProperty("range")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnPolicyAvailabilityRange Range { get; set; }
    
        /// <summary>Type of return policy restrictions. Required if range of policy is set to RESTRICTED.</summary>
        [Newtonsoft.Json.JsonProperty("restrictionCause")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnPolicyAvailabilityRestrictionCause RestrictionCause { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicyReturnCost 
    {
        /// <summary>Indicates who covers the return delivery costs.</summary>
        [Newtonsoft.Json.JsonProperty("coveredBy")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnPolicyReturnCostCoveredBy CoveredBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Attachment 
    {
        /// <summary>The ID of an attachment received in a response from *POST /sale/offer-attachments*</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Answer for user's rating.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserRatingAnswerRequest 
    {
        /// <summary>Answer message.</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Seller's answer, if null seller did not publish answer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Answer 
    {
        /// <summary>Answer creation datetime in ISO 8601 format</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>Answer message</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AvailableConstraint 
    {
        /// <summary>One of the type COUNTRY_SAME_QUANTITY or COUNTRY_DELIVERY_SAME_QUANTITY</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("availableDeliveryMethods")]
        public System.Collections.Generic.ICollection<string> AvailableDeliveryMethods { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The rates broken down into detailed categories. Note that this information is only available if the seller has received enough detailed ratings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AverageRates 
    {
        /// <summary>The average value of delivery rate.</summary>
        [Newtonsoft.Json.JsonProperty("delivery")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double Delivery { get; set; }
    
        /// <summary>The average value of delivery cost rate.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryCost")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double DeliveryCost { get; set; }
    
        /// <summary>The average value of description rate.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double Description { get; set; }
    
        /// <summary>The average value of service rate.</summary>
        [Newtonsoft.Json.JsonProperty("service")]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double Service { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BasicDefinitionResponse 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Benefit 
    {
        [Newtonsoft.Json.JsonProperty("specification")]
        [System.ComponentModel.DataAnnotations.Required]
        public BenefitSpecification Specification { get; set; } = new BenefitSpecification();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>One of: BundleBenefitSpecification, MultiPackBenefitSpecification</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("ORDER_FIXED_DISCOUNT", typeof(BundleBenefitSpecification))]
    [JsonInheritanceAttribute("UNIT_PERCENTAGE_DISCOUNT", typeof(MultiPackBenefitSpecification))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BenefitSpecification 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BundleBenefitSpecification : BenefitSpecification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "ORDER_FIXED_DISCOUNT";
    
        [Newtonsoft.Json.JsonProperty("value")]
        public PriceModificationFixedPriceHolder Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MultiPackBenefitSpecification : BenefitSpecification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "UNIT_PERCENTAGE_DISCOUNT";
    
        /// <summary>What rebate will be given.</summary>
        [Newtonsoft.Json.JsonProperty("configuration")]
        [System.ComponentModel.DataAnnotations.Required]
        public Configuration2 Configuration { get; set; } = new Configuration2();
    
        /// <summary>Describes what will cause the rebate.</summary>
        [Newtonsoft.Json.JsonProperty("trigger")]
        [System.ComponentModel.DataAnnotations.Required]
        public Trigger Trigger { get; set; } = new Trigger();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Caption 
    {
        [Newtonsoft.Json.JsonProperty("index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The list of categories.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoriesDto 
    {
     
        public System.Collections.Generic.ICollection<CategoryDto> Categories { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Category 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The category data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryDto 
    {
        /// <summary>The ID of the category. This can be either in UUID format or an integer format. You should be ready to accept any string value as the category ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Indicates whether the category is at the lowest level. Leaf categories do not have any children. Offers can be listed only in leaf categories.</summary>
        [Newtonsoft.Json.JsonProperty("leaf")]
        public bool Leaf { get; set; }
    
        /// <summary>Name of the category in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options")]
        public CategoryOptionsDto Options { get; set; }
    
        /// <summary>The parent category data.</summary>
        [Newtonsoft.Json.JsonProperty("parent")]
        public Parent Parent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A list of the different options which can be used with this category.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryOptionsDto 
    {
        /// <summary>Indicates whether offers of type ADVERTISEMENT can be listed in this category.</summary>
        [Newtonsoft.Json.JsonProperty("advertisement" )]
        public bool Advertisement { get; set; }
    
        /// <summary>Indicates whether advertisements listed in this category must have a price given. If the value is `true` then you don't have to provide a price when listing an advertisement in this category.</summary>
        [Newtonsoft.Json.JsonProperty("advertisementPriceOptional")]
        public bool AdvertisementPriceOptional { get; set; }
    
        /// <summary>Indicates whether you can combine offers from this category into variant sets based on the color and pattern.</summary>
        [Newtonsoft.Json.JsonProperty("variantsByColorPatternAllowed")]
        public bool VariantsByColorPatternAllowed { get; set; }
    
        /// <summary>Information whether the category supports assigning offers to a product.</summary>
        [Newtonsoft.Json.JsonProperty("offersWithProductPublicationEnabled")]
        public bool OffersWithProductPublicationEnabled { get; set; }
    
        /// <summary>Indicates whether the category supports creating products.</summary>
        [Newtonsoft.Json.JsonProperty("productCreationEnabled")]
        public bool ProductCreationEnabled { get; set; }
    
        /// <summary>Indicates whether at least one EAN is required when creating products.</summary>
        [Newtonsoft.Json.JsonProperty("productEANRequired")]
        public bool ProductEANRequired { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListSupportedCategoriesDto 
    {
        /// <summary>List with information about categories where compatibility list is supported. &lt;a href=" https://developer.allegro.pl/compatibility_list/" target="_blank"&gt;Read more&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("supportedCategories")]
        public System.Collections.Generic.ICollection<SupportedCategories> SupportedCategories { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibleProductsGroupsDto 
    {
        /// <summary>List of groups for given type of compatible products.</summary>
        [Newtonsoft.Json.JsonProperty("groups")]
        public System.Collections.Generic.ICollection<Groups> Groups { get; set; }
    
        /// <summary>Number of returned elements.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>Total number of available elements.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibleProductsListDto 
    {
        /// <summary>List of compatible products for given type and parameters.</summary>
        [Newtonsoft.Json.JsonProperty("compatibleProducts")]
        public System.Collections.Generic.ICollection<CompatibleProductDto> CompatibleProducts { get; set; }
    
        /// <summary>Number of returned elements.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>Total number of available elements. Field is not present when `phrase` parameter is used.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibleProductDto 
    {
        /// <summary>Identifier of the compatible product.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Textual representation of the compatible product.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        /// <summary>Group to which compatible product is assigned to.</summary>
        [Newtonsoft.Json.JsonProperty("group")]
        public Group Group { get; set; }
    
        /// <summary>List of compatible products attributes.</summary>
        [Newtonsoft.Json.JsonProperty("attributes")]
        public System.Collections.Generic.ICollection<Attributes> Attributes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Cells 
    {
        [Newtonsoft.Json.JsonProperty("cells")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Cells1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ChangePrice 
    {
        /// <summary>The unique command id provided in the input.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ChangePriceInput Input { get; set; } = new ChangePriceInput();
    
        [Newtonsoft.Json.JsonProperty("output")]
        public CommandOutput Output { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The input of the command, i.e. the new Buy Now price for the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ChangePriceInput 
    {
        [Newtonsoft.Json.JsonProperty("buyNowPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder BuyNowPrice { get; set; } = new PriceModificationFixedPriceHolder();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ChangePriceWithoutOutput 
    {
        /// <summary>The unique command id generated by you. This should be the same UUID as used in the path.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public ChangePriceInput Input { get; set; } = new ChangePriceInput();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The output of the command.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommandOutput 
    {
        [Newtonsoft.Json.JsonProperty("status")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProcessingStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errors")]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Status of single command task.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommandTask 
    {
        /// <summary>Modified field as JSON path.</summary>
        [Newtonsoft.Json.JsonProperty("field")]
        public string Field { get; set; }
    
        /// <summary>Date of completion of the modification. Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ</summary>
        [Newtonsoft.Json.JsonProperty("finishedAt")]
        public System.DateTimeOffset FinishedAt { get; set; }
    
        /// <summary>General fail reason. You should check the errors structure to get more detailed information of the encountered errors.</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offer")]
        public OfferId Offer { get; set; }
    
        /// <summary>Date of the modification schedule. Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ</summary>
        [Newtonsoft.Json.JsonProperty("scheduledAt")]
        public System.DateTimeOffset ScheduledAt { get; set; }
    
        /// <summary>Available statuses: NEW, SUCCESS, FAIL</summary>
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status { get; set; }
    
        /// <summary>The list of error objects explaining the problems with command processing for the given offer.</summary>
        [Newtonsoft.Json.JsonProperty("errors")]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("MANUAL", typeof(CompatibilityListManual))]
    [JsonInheritanceAttribute("PRODUCT_BASED", typeof(CompatibilityListProductBased))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityList 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of items compatible with offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListManual : CompatibilityList
    {
        /// <summary>List of the compatible items. Maximum number of elements on the list depends on type of included compatible items. Configuration and details concerning the compatible items in selected category are provided in the response for GET &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource in `validationRules` object.</summary>
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CompatibilityListItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<CompatibilityListItem>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListProductBased : CompatibilityList
    {
        /// <summary>Id of product-based compatibility list.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Text representation of the compatibility list items. Provided for informational purposes only - ignored when creating (Post) or updating (Put) compatibility list in the offer.</summary>
        [Newtonsoft.Json.JsonProperty("items")]
        public System.Collections.Generic.ICollection<CompatibilityListItemProductBased> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("TEXT", typeof(CompatibilityListTextItem))]
    [JsonInheritanceAttribute("ID", typeof(CompatibilityListIdItem))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListItem 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListItemProductBased 
    {
        /// <summary>Text description of the compatible item.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListTextItem : CompatibilityListItem
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "TEXT";
    
        /// <summary>Text description of the compatible item. Maximum length of the text depends on category where compatible item is used. Should be used in categories where TEXT version of compatible list is supported. See &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource. &lt;a href="../../compatibility_list" target="_blank"&gt;Read more&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListIdItem : CompatibilityListItem
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "ID";
    
        /// <summary>Id of the compatible item. Should be used in categories where ID version of compatible list is supported. See &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get"&gt; supported-categories&lt;/a&gt; resource. &lt;a href="../../compatibility_list" target="_blank"&gt;Read more&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Text description of the compatible item. When creating (Post) or updating (Put) a compatibility list the field is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        /// <summary>Details of the compatible item represented by ID.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo")]
        public System.Collections.Generic.ICollection<CompatibilityListIdItemAdditionalInfo> AdditionalInfo { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CompatibilityListIdItemAdditionalInfo 
    {
        /// <summary>Additional information describing the compatible item. E.g. for cars it can be an engine code or an equipment version.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Configuration 
    {
        [Newtonsoft.Json.JsonProperty("constraints")]
        public ConstraintCriteria Constraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price")]
        public PriceModificationFixedPriceHolder Price { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConstraintCriteria 
    {
        [Newtonsoft.Json.JsonProperty("country")]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConstraintCriteriaType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deliveryMethods")]
        public System.Collections.Generic.ICollection<JustId> DeliveryMethods { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContactRequest 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emails")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<EmailRequest> Emails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phones")]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<PhonesRequest> Phones { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContactResponse 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emails")]
        public System.Collections.Generic.ICollection<EmailResponse> Emails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phones")]
        public System.Collections.Generic.ICollection<PhonesResponse> Phones { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContactResponseList 
    {
        [Newtonsoft.Json.JsonProperty("contacts")]
        public System.Collections.Generic.ICollection<ContactResponse> Contacts { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Coordinates 
    {
        [Newtonsoft.Json.JsonProperty("lat")]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lon")]
        public double Lon { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DefinitionsResponse 
    {
        [Newtonsoft.Json.JsonProperty("definitions")]
        public System.Collections.Generic.ICollection<FullDefinitionResponse> Definitions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Delivery 
    {
        [Newtonsoft.Json.JsonProperty("additionalInfo")]
        [System.ComponentModel.DataAnnotations.StringLength(650)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>Handling time, ISO 8601 duration format</summary>
        [Newtonsoft.Json.JsonProperty("handlingTime")]
        public string HandlingTime { get; set; }
    
        /// <summary>Shipment date, Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ</summary>
        [Newtonsoft.Json.JsonProperty("shipmentDate")]
        public string ShipmentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public JustId ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DescriptionSection 
    {
        [Newtonsoft.Json.JsonProperty("items")]
        public System.Collections.Generic.ICollection<DescriptionSectionItem> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>One of: TextItem, ImageItem</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("TEXT", typeof(DescriptionSectionItemText))]
    [JsonInheritanceAttribute("IMAGE", typeof(DescriptionSectionItemImage))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DescriptionSectionItem 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DescriptionSectionItemText : DescriptionSectionItem
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "TEXT";
    
        [Newtonsoft.Json.JsonProperty("content")]
        public string Content { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DescriptionSectionItemImage : DescriptionSectionItem
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "IMAGE";
    
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EmailRequest 
    {
        /// <summary>The contact's email address. The user part (before `@`) cannot be longer than 64 characters.</summary>
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EmailResponse 
    {
        [Newtonsoft.Json.JsonProperty("address")]
        public string Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Error 
    {
        /// <summary>The error code. You can use this code when contacting us about any problems with our systems.</summary>
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code { get; set; }
    
        /// <summary>For some cases, this field provides more details regarding the error. This field can be empty.</summary>
        [Newtonsoft.Json.JsonProperty("details")]
        public string Details { get; set; }
    
        /// <summary>A message directed to the developer of the program. This message will always be in English and give you some more technical details on what exactly has happened.</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message { get; set; }
    
        /// <summary>This field will point to a specific field in object if the error is connected to a problem with such specific field. This field can be empty</summary>
        [Newtonsoft.Json.JsonProperty("path")]
        public string Path { get; set; }
    
        /// <summary>The message that can be presented directly to your user. It will not contain any technical information. This message is translated based on the value of the "Accept-Language" header. By default message in English is returned.</summary>
        [Newtonsoft.Json.JsonProperty("userMessage")]
        public string UserMessage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The list of all the error objects explaining the error.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Errors : System.Collections.ObjectModel.Collection<Error>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ErrorsHolder 
    {
        [Newtonsoft.Json.JsonProperty("errors")]
        public Errors Errors { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AuthError 
    {
        /// <summary>Authorization error code</summary>
        [Newtonsoft.Json.JsonProperty("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; }
    
        /// <summary>Authorization error message</summary>
        [Newtonsoft.Json.JsonProperty("error_description")]
        public string Error_description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Fee 
    {
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FullDefinitionResponse 
    {
        [Newtonsoft.Json.JsonProperty("availableConstraints")]
        public System.Collections.Generic.ICollection<AvailableConstraint> AvailableConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FeePreviewResponse 
    {
        /// <summary>An array of commissions.</summary>
        [Newtonsoft.Json.JsonProperty("commissions")]
        public System.Collections.Generic.ICollection<CommissionResponse> Commissions { get; set; }
    
        /// <summary>An array of quotes.</summary>
        [Newtonsoft.Json.JsonProperty("quotes")]
        public System.Collections.Generic.ICollection<QuoteResponse> Quotes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CommissionResponse 
    {
        /// <summary>Commission fee name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee")]
        public PriceModificationFixedPriceHolder Fee { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class QuoteResponse 
    {
        /// <summary>Quote fee name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee")]
        public PriceModificationFixedPriceHolder Fee { get; set; }
    
        /// <summary>Duration in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("cycleDuration")]
        public string CycleDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("classifiedsPackage")]
        public ClassifiedPackage ClassifiedsPackage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Command execution summary</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GeneralReport 
    {
        /// <summary>Command ID</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskCount")]
        public TaskCount TaskCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Header 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Image url</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImageUrl 
    {
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarrantyBasic 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JustId 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The information on the offer in an external system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExternalId 
    {
        /// <summary>The ID of the offer in the external system.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>for offer with a delivery method it is a parcel dispatch location. For offers with personal pick-up it is a pick-up location, additionally we recommend to use points of service (&lt;a href="../../documentation/#tag/Points-of-service" target="_blank"&gt;https://developer.allegro.pl/documentation/#tag/Points-of-service&lt;/a&gt;)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Location 
    {
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode")]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postCode")]
        public string PostCode { get; set; }
    
        /// <summary>This field is mandatory if countryCode is set to "PL", for other values, currently, it is ignored. For countryCode equalling "PL", this field must be set to one of the following: DOLNOSLASKIE, KUJAWSKO_POMORSKIE, LUBELSKIE, LUBUSKIE, LODZKIE, MALOPOLSKIE, MAZOWIECKIE, OPOLSKIE, PODKARPACKIE, PODLASKIE, POMORSKIE, SLASKIE, SWIETOKRZYSKIE, WARMINSKO_MAZURSKIE, WIELKOPOLSKIE, ZACHODNIOPOMORSKIE.</summary>
        [Newtonsoft.Json.JsonProperty("province")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Province { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains fields to change</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Modification 
    {
        [Newtonsoft.Json.JsonProperty("additionalServicesGroup")]
        public AdditionalServicesGroup AdditionalServicesGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public ModificationDelivery Delivery { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payments")]
        public ModificationPayments Payments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("promotion")]
        public ModificationPromotion Promotion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sizeTable")]
        public ModificationSizeTable SizeTable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public ModificationPublication Publication { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains shipping rates to change</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ModificationDelivery 
    {
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public ShippingRates ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Allows you to change duration of offers. You can include only property in a request "duration" or "durationUnlimited".</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ModificationPublication 
    {
        /// <summary>Offer duration time provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</summary>
        [Newtonsoft.Json.JsonProperty("duration")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModificationPublicationDuration Duration { get; set; }
    
        /// <summary>Unlimited duration time.</summary>
        [Newtonsoft.Json.JsonProperty("durationUnlimited")]
        public bool DurationUnlimited { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ModificationPayments 
    {
        /// <summary>Invoice type: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE</summary>
        [Newtonsoft.Json.JsonProperty("invoice")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModificationPaymentsInvoice Invoice { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ModificationPromotion 
    {
        /// <summary>Bold flag: true, false, null</summary>
        [Newtonsoft.Json.JsonProperty("bold")]
        public bool Bold { get; set; }
    
        /// <summary>DepartmentPage flag: true, false, null</summary>
        [Newtonsoft.Json.JsonProperty("departmentPage")]
        public bool DepartmentPage { get; set; }
    
        /// <summary>Emphasized flag: true, false, null</summary>
        [Newtonsoft.Json.JsonProperty("emphasized")]
        public bool Emphasized { get; set; }
    
        /// <summary>EmphasizedHighlightBoldPackage flag: true, false, null</summary>
        [Newtonsoft.Json.JsonProperty("emphasizedHighlightBoldPackage")]
        public bool EmphasizedHighlightBoldPackage { get; set; }
    
        /// <summary>Highlight flag: true, false, null</summary>
        [Newtonsoft.Json.JsonProperty("highlight")]
        public bool Highlight { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ModificationSizeTable 
    {
        /// <summary>Id of size table</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferAttachment 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttachmentType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file")]
        public AttachmentFile File { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicOfferPreviewRequest 
    {
        [Newtonsoft.Json.JsonProperty("offer")]
        public Offer Offer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("classifiedsPackages")]
        public ClassifiedsPackages ClassifiedsPackages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedsPackages 
    {
        [Newtonsoft.Json.JsonProperty("basePackage")]
        public ClassifiedPackage BasePackage { get; set; }
    
        /// <summary>An array of extra packages.</summary>
        [Newtonsoft.Json.JsonProperty("extraPackages")]
        public System.Collections.Generic.ICollection<ClassifiedPackage> ExtraPackages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPackage 
    {
        /// <summary>The classifieds package ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferAttachmentRequest 
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttachmentType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file")]
        public AttachmentFileRequest File { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>offer attachment type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AttachmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPECIAL_OFFER_RULES")]
        SPECIAL_OFFER_RULES = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPETITION_RULES")]
        COMPETITION_RULES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOK_EXCERPT")]
        BOOK_EXCERPT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USER_MANUAL")]
        USER_MANUAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSTALLATION_INSTRUCTIONS")]
        INSTALLATION_INSTRUCTIONS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GAME_INSTRUCTIONS")]
        GAME_INSTRUCTIONS = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AttachmentFile 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AttachmentFileRequest 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferImageLinkUploadRequest 
    {
        /// <summary>URL of the image. It has to contain domain name, not an IP address. Currently we support http and https protocols. When using https the certificate chain needs to be valid.</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferImageUploadResponse 
    {
        /// <summary>Date of file expiration (removal from the server). We will remove it unless you use it in your offer.</summary>
        [Newtonsoft.Json.JsonProperty("expiresAt")]
        public System.DateTimeOffset ExpiresAt { get; set; }
    
        /// <summary>Link to the uploaded image</summary>
        [Newtonsoft.Json.JsonProperty("location")]
        public string Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Single offer data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Offer 
    {
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        public JustId AdditionalServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("afterSalesServices")]
        public AfterSalesServices AfterSalesServices { get; set; }
    
        /// <summary>List of offer attachments. You can attach up to 7 files to the offer – one per each attachment type as described in &lt;a href="/documentation/#operation/createOfferAttachmentUsingPOST" target="_blank"&gt;uploading offer attachments flow&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("attachments")]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        public Category Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compatibilityList")]
        public CompatibilityList CompatibilityList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact")]
        public JustId Contact { get; set; }
    
        /// <summary>Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public Delivery Delivery { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description")]
        public StandardizedDescription Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ean")]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("external")]
        public ExternalId External { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<ImageUrl> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location")]
        public Location Location { get; set; }
    
        /// <summary>Name of the offer. Words used in the name field cannot be longer than 30 characters.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("payments")]
        public Payments Payments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product")]
        public JustId Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("promotion")]
        public Promotion Promotion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public Publication Publication { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sellingMode")]
        public SellingMode SellingMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sizeTable")]
        public JustId SizeTable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock")]
        public Stock Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tecdocSpecification")]
        public TecdocSpecification TecdocSpecification { get; set; }
    
        /// <summary>Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validation")]
        public Validation Validation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Modification command payload</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferChangeCommand 
    {
        [Newtonsoft.Json.JsonProperty("modification")]
        public Modification Modification { get; set; }
    
        /// <summary>List of offer criteria</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        public System.Collections.Generic.ICollection<OfferCriterium> OfferCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Price modification command payload</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferPriceChangeCommand 
    {
        [Newtonsoft.Json.JsonProperty("modification")]
        public PriceModification Modification { get; set; }
    
        /// <summary>List of offer criteria</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        public System.Collections.Generic.ICollection<OfferCriterium> OfferCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The way the offer price should be changed. One of three ways is possible: new price, increase/decrease price, percentage change and only one can be chosen at once.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("FIXED_PRICE", typeof(PriceModificationFixedPrice))]
    [JsonInheritanceAttribute("INCREASE_PRICE", typeof(PriceModificationValueChangeIncrease))]
    [JsonInheritanceAttribute("DECREASE_PRICE", typeof(PriceModificationValueChangeDecrease))]
    [JsonInheritanceAttribute("INCREASE_PERCENTAGE", typeof(PriceModificationPercentageChangeIncrease))]
    [JsonInheritanceAttribute("DECREASE_PERCENTAGE", typeof(PriceModificationPercentageChangeDecrease))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModification 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationFixedPrice : PriceModification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "FIXED_PRICE";
    
        [Newtonsoft.Json.JsonProperty("price")]
        public PriceModificationFixedPriceHolder Price { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationValueChangeIncrease : PriceModification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "INCREASE_PRICE";
    
        [Newtonsoft.Json.JsonProperty("value")]
        public PriceModificationFixedPriceHolder Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationValueChangeDecrease : PriceModification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "DECREASE_PRICE";
    
        [Newtonsoft.Json.JsonProperty("value")]
        public PriceModificationFixedPriceHolder Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationPercentageChangeIncrease : PriceModification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "INCREASE_PERCENTAGE";
    
        [Newtonsoft.Json.JsonProperty("percentage")]
        public string Percentage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationPercentageChangeDecrease : PriceModification
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "DECREASE_PERCENTAGE";
    
        [Newtonsoft.Json.JsonProperty("percentage")]
        public string Percentage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The price data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PriceModificationFixedPriceHolder 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Quantity modification command payload</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferQuantityChangeCommand 
    {
        [Newtonsoft.Json.JsonProperty("modification")]
        public QuantityModification Modification { get; set; }
    
        /// <summary>List of offer criteria</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        public System.Collections.Generic.ICollection<OfferCriterium> OfferCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The way the offer quantity should be changed. One of two ways is possible: new quantity, increase/decrease quantity and only one can be chosen at once.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class QuantityModification 
    {
        /// <summary>modification type</summary>
        [Newtonsoft.Json.JsonProperty("changeType")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantityModificationChangeType ChangeType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value")]
        public int Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerRebateOfferCriterion 
    {
        /// <summary>Set of offers</summary>
        [Newtonsoft.Json.JsonProperty("offers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Offers> Offers { get; set; } = new System.Collections.ObjectModel.Collection<Offers>();
    
        /// <summary>Criteria type: CONTAINS_OFFERS</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellerRebateOfferCriterionType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains offers criteria</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferCriterium 
    {
        /// <summary>Set of offers</summary>
        [Newtonsoft.Json.JsonProperty("offers")]
        public System.Collections.Generic.ICollection<OfferId> Offers { get; set; }
    
        /// <summary>Criteria type: CONTAINS_OFFERS</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferCriteriumType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferId 
    {
        /// <summary>Offer id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferQuoteDto 
    {
        [Newtonsoft.Json.JsonProperty("enabled")]
        public bool Enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fee")]
        public Fee Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextDate")]
        public System.DateTimeOffset NextDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offer")]
        public OfferId Offer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferQuotesDto 
    {
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quotes")]
        public System.Collections.Generic.ICollection<OfferQuoteDto> Quotes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OpenHour 
    {
        /// <summary>Days of the week: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY. Date format ISO 8601</summary>
        [Newtonsoft.Json.JsonProperty("dayOfWeek")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DayOfWeek { get; set; }
    
        /// <summary>Date format (ISO 8601) - HH:mm:ss.SSS</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }
    
        /// <summary>Date format (ISO 8601) - HH:mm:ss.SSS</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Order 
    {
        /// <summary>Order id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>List of order offers</summary>
        [Newtonsoft.Json.JsonProperty("offers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Offer> Offers { get; set; } = new System.Collections.ObjectModel.Collection<Offer>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Offer's parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Parameter 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rangeValue")]
        public ParameterRangeValue RangeValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("valuesIds")]
        public System.Collections.Generic.ICollection<string> ValuesIds { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("integer", typeof(IntegerCategoryParameter))]
    [JsonInheritanceAttribute("float", typeof(FloatCategoryParameter))]
    [JsonInheritanceAttribute("string", typeof(StringCategoryParameter))]
    [JsonInheritanceAttribute("dictionary", typeof(DictionaryCategoryParameter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryParameter 
    {
        /// <summary>The ID of the parameter.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The name of the parameter in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Indicates whether the value of this parameter must be set in an offer. Offers without required parameters set cannot be published.</summary>
        [Newtonsoft.Json.JsonProperty("required")]
        public bool Required { get; set; }
    
        /// <summary>The unit in which values of the parameter are used. May be `null`.</summary>
        [Newtonsoft.Json.JsonProperty("unit")]
        public string Unit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options")]
        public CategoryParameterOptions Options { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("integer", typeof(IntegerCategoryProductParameter))]
    [JsonInheritanceAttribute("float", typeof(FloatCategoryProductParameter))]
    [JsonInheritanceAttribute("string", typeof(StringCategoryProductParameter))]
    [JsonInheritanceAttribute("dictionary", typeof(DictionaryCategoryProductParameter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryProductParameter 
    {
        /// <summary>The ID of the parameter.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The name of the parameter in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Indicates whether the value of this parameter must be set in a product. Product without required parameters set cannot be created.</summary>
        [Newtonsoft.Json.JsonProperty("required")]
        public bool Required { get; set; }
    
        /// <summary>The unit in which values of the parameter are used. May be `null`.</summary>
        [Newtonsoft.Json.JsonProperty("unit")]
        public string Unit { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DictionaryCategoryProductParameter : CategoryProductParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "dictionary";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions Restrictions { get; set; }
    
        /// <summary>Defines the values accepted for this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("dictionary")]
        public System.Collections.Generic.ICollection<Dictionary> Dictionary { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IntegerCategoryProductParameter : CategoryProductParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "integer";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions2 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FloatCategoryProductParameter : CategoryProductParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "float";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions3 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StringCategoryProductParameter : CategoryProductParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "string";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions4 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A list of the different options which can be used with this parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryParameterOptions 
    {
        /// <summary>Parameters with this option enabled can be used for offer variants creation.</summary>
        [Newtonsoft.Json.JsonProperty("variantsAllowed")]
        public bool VariantsAllowed { get; set; }
    
        /// <summary>All offer variants must have the same values in parameters with this option enabled.</summary>
        [Newtonsoft.Json.JsonProperty("variantsEqual")]
        public bool VariantsEqual { get; set; }
    
        /// <summary>Indicates what value in the dictionary is defined as an ambiguous one. Only parameters with dictionaries might have this option defined.</summary>
        [Newtonsoft.Json.JsonProperty("ambiguousValueId")]
        public string AmbiguousValueId { get; set; }
    
        /// <summary>Values in the dictionary depend on the parameter referenced by this field. Only parameters with dictionaries can have this option defined.</summary>
        [Newtonsoft.Json.JsonProperty("dependsOnParameterId")]
        public string DependsOnParameterId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DictionaryCategoryParameter : CategoryParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "dictionary";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions5 Restrictions { get; set; }
    
        /// <summary>Defines the values accepted for this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("dictionary")]
        public System.Collections.Generic.ICollection<Dictionary2> Dictionary { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IntegerCategoryParameter : CategoryParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "integer";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions6 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FloatCategoryParameter : CategoryParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "float";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions7 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StringCategoryParameter : CategoryParameter
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "string";
    
        /// <summary>The restrictions on values of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("restrictions")]
        public Restrictions8 Restrictions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Parameter's range value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ParameterRangeValue 
    {
        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryParameterList 
    {
        /// <summary>The list of parameters supported by the category.</summary>
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<CategoryParameter> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CategoryProductParameterList 
    {
        /// <summary>The list of product parameters supported by the category.</summary>
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<CategoryProductParameter> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Payment 
    {
        /// <summary>Available forms of payment: CASH - cash, CARD - card.</summary>
        [Newtonsoft.Json.JsonProperty("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Payments 
    {
        /// <summary>Invoice type, one of: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE</summary>
        [Newtonsoft.Json.JsonProperty("invoice")]
        public string Invoice { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PhonesRequest 
    {
        /// <summary>A valid phone number</summary>
        [Newtonsoft.Json.JsonProperty("number")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Number { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PhonesResponse 
    {
        [Newtonsoft.Json.JsonProperty("number")]
        public string Number { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Pos 
    {
        /// <summary>UUID. When creating a point of service (Post) the field is ignored. It is required when updating (Put) a point of service.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>ID from external client system.</summary>
        [Newtonsoft.Json.JsonProperty("externalId")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public Seller Seller { get; set; }
    
        /// <summary>Indicates point type. The only valid value so far is PICKUP_POINT.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();
    
        [Newtonsoft.Json.JsonProperty("phoneNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Email { get; set; }
    
        /// <summary>Possible empty list of opening hours.</summary>
        [Newtonsoft.Json.JsonProperty("openHours")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OpenHour> OpenHours { get; set; } = new System.Collections.ObjectModel.Collection<OpenHour>();
    
        /// <summary>Delivery time / Time period for receipt. Date format ISO 8601 e.g. 'PT24H'</summary>
        [Newtonsoft.Json.JsonProperty("serviceTime")]
        public string ServiceTime { get; set; }
    
        /// <summary>An empty list of payment types is available.</summary>
        [Newtonsoft.Json.JsonProperty("payments")]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }
    
        /// <summary>Confirmation method: AWAIT_CONTACT - We will inform you about the time of receipt, CALL_US - Please make an appointment, CONTACT_NOT_REQUIRED - Contact is not required.</summary>
        [Newtonsoft.Json.JsonProperty("confirmationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmationType { get; set; }
    
        /// <summary>Point of service status: ACTIVE - active, TEMPORARILY_CLOSED - temporarily closed, CLOSED_DOWN - closed down, DELETED - deleted.</summary>
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }
    
        /// <summary>Creation date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service (Post) the field is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public string CreatedAt { get; set; }
    
        /// <summary>Modification date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service (Post) the field is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public string UpdatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The processing status of the command.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ProcessingStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"QUEUEING")]
        QUEUEING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATED_AND_RUNNING")]
        VALIDATED_AND_RUNNING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING_BUT_WITH_ERRORS")]
        RUNNING_BUT_WITH_ERRORS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESSFUL")]
        SUCCESSFUL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_SUCCESS")]
        PARTIAL_SUCCESS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Promotion 
    {
        [Newtonsoft.Json.JsonProperty("bold")]
        public bool Bold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departmentPage")]
        public bool DepartmentPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emphasized")]
        public bool Emphasized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emphasizedHighlightBoldPackage")]
        public bool EmphasizedHighlightBoldPackage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("highlight")]
        public bool Highlight { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicTableDto 
    {
        [Newtonsoft.Json.JsonProperty("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Header> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Header>();
    
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image")]
        public PublicTableImageDto Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orientation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicTableDtoOrientation Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Cells> Values { get; set; } = new System.Collections.ObjectModel.Collection<Cells>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicTableImageDto 
    {
        [Newtonsoft.Json.JsonProperty("captions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Caption> Captions { get; set; } = new System.Collections.ObjectModel.Collection<Caption>();
    
        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicTablesDto 
    {
        [Newtonsoft.Json.JsonProperty("tables")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PublicTableDto> Tables { get; set; } = new System.Collections.ObjectModel.Collection<PublicTableDto>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Publication 
    {
        /// <summary>Publication duration, ISO 8601 duration format</summary>
        [Newtonsoft.Json.JsonProperty("duration")]
        public string Duration { get; set; }
    
        /// <summary>Publication ending date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified</summary>
        [Newtonsoft.Json.JsonProperty("endingAt")]
        public System.DateTimeOffset? EndingAt { get; set; }
    
        /// <summary>Publication starting date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified</summary>
        [Newtonsoft.Json.JsonProperty("startingAt")]
        public System.DateTimeOffset ? StartingAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferStatus Status { get; set; }
    
        /// <summary>Indicates the reason for ending the offer:
        ///  - `USER` - offer ended by the seller.
        ///  - `ADMIN` - offer ended by an admin.
        ///  - `EXPIRATION` - offer ended because all available items had been sold out or offer duration had expired (valid for
        ///    offers with specified duration).
        ///  - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
        ///    success status, but further processing failed.</summary>
        [Newtonsoft.Json.JsonProperty("endedBy")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicationEndedBy EndedBy { get; set; }
    
        /// <summary>Whether to republish an offer after ending. Automatically republish offers or auctions:&lt;/br&gt; - `BUY_NOW` offer type are republished with initial stock, regardless of how many items you have sold.&lt;/br&gt; - `AUCTION` offer type are republished only if they were not concluded with purchase.&lt;/br&gt; - `ADVERTISEMENT` offer type cannot be republished.</summary>
        [Newtonsoft.Json.JsonProperty("republish")]
        public bool Republish { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Publication modification command payload</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicationChangeCommandDto 
    {
        /// <summary>List of offer criteria</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        public System.Collections.Generic.ICollection<OfferCriterium> OfferCriteria { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public Publication_modification Publication { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Rates 
    {
        /// <summary>Delivery rate value</summary>
        [Newtonsoft.Json.JsonProperty("delivery")]
        public RatesDelivery Delivery { get; set; }
    
        /// <summary>Delivery cost rate value</summary>
        [Newtonsoft.Json.JsonProperty("deliveryCost")]
        public RatesDeliveryCost DeliveryCost { get; set; }
    
        /// <summary>Description rate value</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        public RatesDescription Description { get; set; }
    
        /// <summary>Service rate value</summary>
        [Newtonsoft.Json.JsonProperty("service")]
        public RatesService Service { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Reference 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Removal 
    {
        /// <summary>Date until a removal request can be submitted in ISO 8601 format</summary>
        [Newtonsoft.Json.JsonProperty("possibleTo")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PossibleTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("request")]
        public RemovalRequest Request { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Submitted removal request, null if removal was not requested</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RemovalRequest 
    {
        /// <summary>Removal request creation datetime in ISO 8601 format</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>Message containing explanation for removing rating</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserRatingRemovalRequest 
    {
        [Newtonsoft.Json.JsonProperty("request")]
        [System.ComponentModel.DataAnnotations.Required]
        public Request Request { get; set; } = new Request();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicyBasic 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SearchResult 
    {
        [Newtonsoft.Json.JsonProperty("posList")]
        public System.Collections.Generic.ICollection<Pos> PosList { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Seller 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerCreateRebateRequestDto 
    {
        /// <summary>What kind of rebate will be given</summary>
        [Newtonsoft.Json.JsonProperty("benefits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Benefit> Benefits { get; set; } = new System.Collections.ObjectModel.Collection<Benefit>();
    
        /// <summary>What offers will be included</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SellerRebateOfferCriterion> OfferCriteria { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateOfferCriterion>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerRebateDto 
    {
        /// <summary>What kind of rebate will be given</summary>
        [Newtonsoft.Json.JsonProperty("benefits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Benefit> Benefits { get; set; } = new System.Collections.ObjectModel.Collection<Benefit>();
    
        /// <summary>when was this rebate created</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>Rebate identifier</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>What offers will be included</summary>
        [Newtonsoft.Json.JsonProperty("offerCriteria")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SellerRebateOfferCriterion> OfferCriteria { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateOfferCriterion>();
    
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellerRebateDtoStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerRebatesDto 
    {
        [Newtonsoft.Json.JsonProperty("promotions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SellerRebateDto> Promotions { get; set; } = new System.Collections.ObjectModel.Collection<SellerRebateDto>();
    
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public long TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRate 
    {
        [Newtonsoft.Json.JsonProperty("deliveryMethod")]
        [System.ComponentModel.DataAnnotations.Required]
        public DeliveryMethod DeliveryMethod { get; set; } = new DeliveryMethod();
    
        /// <summary>Maximum quantity per package for the given delivery method. Minimum value is 1.</summary>
        [Newtonsoft.Json.JsonProperty("maxQuantityPerPackage")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int MaxQuantityPerPackage { get; set; }
    
        /// <summary>Rate for the first item in the parcel for the given delivery method</summary>
        [Newtonsoft.Json.JsonProperty("firstItemRate")]
        [System.ComponentModel.DataAnnotations.Required]
        public FirstItemRate FirstItemRate { get; set; } = new FirstItemRate();
    
        /// <summary>Rate for every other item, after the first, in the same parcel for the given delivery method</summary>
        [Newtonsoft.Json.JsonProperty("nextItemRate")]
        [System.ComponentModel.DataAnnotations.Required]
        public NextItemRate NextItemRate { get; set; } = new NextItemRate();
    
        /// <summary>Custom shipping time for the given delivery method (allowed only for methods with shippingRatesConstraints.shippingTime.customizable set to true in the delivery-methods resource). If not set the default shipping time specified in the delivery-methods resource is used.</summary>
        [Newtonsoft.Json.JsonProperty("shippingTime")]
        public ShippingTime ShippingTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRates 
    {
        /// <summary>Id of shipping rates</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferShippingRates 
    {
        /// <summary>If empty there is the shipping rates set attached to offer. You should use the GET /sale/offers/{offerId} resource to retrieve the shipping rates set ID.</summary>
        [Newtonsoft.Json.JsonProperty("rates")]
        public System.Collections.Generic.ICollection<ShippingRate> Rates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRatesSet 
    {
        /// <summary>Shipping rates set ID (UUID) When creating a shipping rates set (Post) the field is ignored. It is required when updating (Put) a shipping rates.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>User defined name of the shipping rates set. It may only contain: letters, numbers, hyphens, dots, commas and spaces.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShippingRate> Rates { get; set; } = new System.Collections.ObjectModel.Collection<ShippingRate>();
    
        /// <summary>Date and time of the last modification of the set in UTC ISO 8601 format. When creating (Post) or updating (Put) a shipping rates set the field is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("lastModified")]
        public string LastModified { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeliverySettingsDto 
    {
        /// <summary>A minimum total order amount required to qualify for free delivery.</summary>
        [Newtonsoft.Json.JsonProperty("freeDelivery")]
        public FreeDelivery FreeDelivery { get; set; }
    
        /// <summary>Policy of calculating delivery costs.</summary>
        [Newtonsoft.Json.JsonProperty("joinPolicy")]
        public JoinPolicy JoinPolicy { get; set; }
    
        /// <summary>Policy of custom delivery cost.</summary>
        [Newtonsoft.Json.JsonProperty("customCost")]
        public CustomCost CustomCost { get; set; }
    
        /// <summary>Date and time of the last modification of the set in UTC ISO 8601 format. When updating (Put) settings the field is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public string UpdatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The description section cannot have more than 40000 bytes in length.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StandardizedDescription 
    {
        [Newtonsoft.Json.JsonProperty("sections")]
        public System.Collections.Generic.ICollection<DescriptionSection> Sections { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Stock 
    {
        [Newtonsoft.Json.JsonProperty("available")]
        public int Available { get; set; }
    
        /// <summary>Stock unit, one of: UNIT, PAIR, SET</summary>
        [Newtonsoft.Json.JsonProperty("unit")]
        public string Unit { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Offers updates summary</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TaskCount 
    {
        /// <summary>Current number of failed offers updates</summary>
        [Newtonsoft.Json.JsonProperty("failed")]
        public int Failed { get; set; }
    
        /// <summary>Current number of success offers updates</summary>
        [Newtonsoft.Json.JsonProperty("success")]
        public int Success { get; set; }
    
        /// <summary>Total number of scheduled offers updates</summary>
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains list of task results</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TaskReport 
    {
        /// <summary>List of task results</summary>
        [Newtonsoft.Json.JsonProperty("tasks")]
        public System.Collections.Generic.ICollection<CommandTask> Tasks { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class User 
    {
        /// <summary>Buyer id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Buyer's login</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserRating 
    {
        [Newtonsoft.Json.JsonProperty("answer")]
        public Answer Answer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public User Buyer { get; set; } = new User();
    
        /// <summary>Buyer's text comment</summary>
        [Newtonsoft.Json.JsonProperty("comment")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Comment { get; set; }
    
        /// <summary>Creation datetime in ISO 8601 format</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>If true this rating was not included in calculating average user rates</summary>
        [Newtonsoft.Json.JsonProperty("excludedFromAverageRates")]
        public bool ExcludedFromAverageRates { get; set; }
    
        /// <summary>Rating id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("order")]
        public Order Order { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rates")]
        public Rates Rates { get; set; }
    
        /// <summary>Whether buyer recommends the order</summary>
        [Newtonsoft.Json.JsonProperty("recommended")]
        public bool Recommended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("removal")]
        public Removal Removal { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserRatingListResponse 
    {
        /// <summary>List of ratings that match requested filter. Empty when no rating matched.</summary>
        [Newtonsoft.Json.JsonProperty("ratings")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserRating> Ratings { get; set; } = new System.Collections.ObjectModel.Collection<UserRating>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserRatingSummaryResponse 
    {
        [Newtonsoft.Json.JsonProperty("averageRates")]
        public AverageRates AverageRates { get; set; }
    
        /// <summary>Summary of data concerning users that do not recommend the seller.</summary>
        [Newtonsoft.Json.JsonProperty("notRecommended")]
        [System.ComponentModel.DataAnnotations.Required]
        public NotRecommended NotRecommended { get; set; } = new NotRecommended();
    
        /// <summary>Summary of data concerning users that recommend the seller.</summary>
        [Newtonsoft.Json.JsonProperty("recommended")]
        [System.ComponentModel.DataAnnotations.Required]
        public Recommended2 Recommended { get; set; } = new Recommended2();
    
        /// <summary>Percentage of unique buyers recommending the seller.</summary>
        [Newtonsoft.Json.JsonProperty("recommendedPercentage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecommendedPercentage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Validation 
    {
        [Newtonsoft.Json.JsonProperty("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ValidationError> Errors { get; set; } = new System.Collections.ObjectModel.Collection<ValidationError>();
    
        [Newtonsoft.Json.JsonProperty("validatedAt")]
        public System.DateTimeOffset ValidatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ValidationError 
    {
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("details")]
        public string Details { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path")]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userMessage")]
        public string UserMessage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantyBasic 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Describes_listing_fee 
    {
        [Newtonsoft.Json.JsonProperty("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Pricing cycle duration, ISO 8601 duration format</summary>
        [Newtonsoft.Json.JsonProperty("cycleDuration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CycleDuration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Describes_success_commission_fee 
    {
        [Newtonsoft.Json.JsonProperty("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarrantiesList_ImpliedWarrantyBasic_ 
    {
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("impliedWarranties")]
        public System.Collections.Generic.ICollection<ImpliedWarrantyBasic> ImpliedWarranties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ParametersForPreviewPrice 
    {
        [Newtonsoft.Json.JsonProperty("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();
    
        /// <summary>Offer condition, if is new, used or other.</summary>
        [Newtonsoft.Json.JsonProperty("condition")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParametersForPreviewPriceCondition Condition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParametersForPreviewPriceDuration Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAnyQuantity")]
        public bool HasAnyQuantity { get; set; }
    
        /// <summary>If set, minimum value 0</summary>
        [Newtonsoft.Json.JsonProperty("numberOfBigPhotos")]
        public int NumberOfBigPhotos { get; set; }
    
        /// <summary>If set, minimum value 0</summary>
        [Newtonsoft.Json.JsonProperty("numberOfPhotos")]
        public int NumberOfPhotos { get; set; }
    
        /// <summary>Quantity of items to be sold. If set, minimum value 1</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public int Quantity { get; set; }
    
        /// <summary>Deprecated. Value 'true' sets the 'offer.type' field to 'shop', value 'false' to 'offer'. This field is ignored if 'offer.type' field is set.</summary>
        [Newtonsoft.Json.JsonProperty("shop")]
        public bool Shop { get; set; }
    
        /// <summary>Quantity of sold items. Relates to commission success fee. If set, minimum value 1</summary>
        [Newtonsoft.Json.JsonProperty("soldQuantity")]
        public int SoldQuantity { get; set; }
    
        /// <summary>Offer type. 'type' or 'shop' fields must be provided. Takes precedence over 'shop' field. Note: if type = 'advertisement' then either 'quantity' or 'soldQuantity' field must be set.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParametersForPreviewPriceType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitPrice")]
        public double UnitPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bold")]
        public bool Bold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("highlight")]
        public bool Highlight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departmentPage")]
        public bool DepartmentPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emphasized")]
        public bool Emphasized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emphasizedHighlightBoldPackage")]
        public bool EmphasizedHighlightBoldPackage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("multiVariant")]
        public bool MultiVariant { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains publication's fields to change</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Publication_modification 
    {
        /// <summary>Action to perform</summary>
        [Newtonsoft.Json.JsonProperty("action")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Publication_modificationAction Action { get; set; }
    
        /// <summary>Date and time for scheduling ACTIVATE action, will be ignored for another actions</summary>
        [Newtonsoft.Json.JsonProperty("scheduledFor")]
        public System.DateTimeOffset? ScheduledFor { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPoliciesList_ReturnPolicyBasic_ 
    {
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("returnPolicies")]
        public System.Collections.Generic.ICollection<ReturnPolicyBasic> ReturnPolicies { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WarrantiesList_WarrantyBasic_ 
    {
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("warranties")]
        public System.Collections.Generic.ICollection<WarrantyBasic> Warranties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Wrapper_type_for_preview_conditions 
    {
        /// <summary>Include in calculation user's active bundles which allow to publish for free offer or use for free promotion options.</summary>
        [Newtonsoft.Json.JsonProperty("includeQuotingBundles")]
        public bool IncludeQuotingBundles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offer")]
        public ParametersForPreviewPrice Offer { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Wraps_listing_and_commissions_fees 
    {
        [Newtonsoft.Json.JsonProperty("commissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Describes_success_commission_fee> Commissions { get; set; } = new System.Collections.ObjectModel.Collection<Describes_success_commission_fee>();
    
        [Newtonsoft.Json.JsonProperty("quotes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Describes_listing_fee> Quotes { get; set; } = new System.Collections.ObjectModel.Collection<Describes_listing_fee>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSet 
    {
        [Newtonsoft.Json.JsonProperty("offers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VariantSet_Offer> Offers { get; set; } = new System.Collections.ObjectModel.Collection<VariantSet_Offer>();
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VariantSet_Parameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<VariantSet_Parameter>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSetResponse : VariantSet
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSet_Offer 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Label that allows to group variants via image. All variants having the same image should have identical identifier in this field.</summary>
        [Newtonsoft.Json.JsonProperty("colorPattern")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ColorPattern { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSet_Parameter 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSets 
    {
        /// <summary>Total number of variant sets matching the query.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offerVariants")]
        public System.Collections.Generic.ICollection<VariantSets_VariantSet> OfferVariants { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VariantSets_VariantSet 
    {
        /// <summary>Variant set id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Variant set name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingOffer 
    {
        /// <summary>The offer ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The title of the offer.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seller")]
        public OfferSeller Seller { get; set; }
    
        [Newtonsoft.Json.JsonProperty("promotion")]
        public OfferPromotion Promotion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public OfferDelivery Delivery { get; set; }
    
        /// <summary>The gallery of images. Only the URL of the original sized image is provided. The first image represents the thumbnail image used on listing.</summary>
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<OfferImages> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sellingMode")]
        public OfferSellingMode SellingMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock")]
        public OfferStock Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendor")]
        public OfferVendor Vendor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        public OfferCategory Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public OfferPublication Publication { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingCategoryWithCount 
    {
        /// <summary>The category ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The category name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Results count in this category.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingCategory 
    {
        /// <summary>The Category ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The category name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponse 
    {
        [Newtonsoft.Json.JsonProperty("items")]
        public ListingResponseOffers Items { get; set; }
    
        [Newtonsoft.Json.JsonProperty("categories")]
        public ListingResponseCategories Categories { get; set; }
    
        /// <summary>An array of filters with counters available for given search. This can be used to refine the search results.</summary>
        [Newtonsoft.Json.JsonProperty("filters")]
        public System.Collections.Generic.ICollection<ListingResponseFilters> Filters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchMeta")]
        public ListingResponseSearchMeta SearchMeta { get; set; }
    
        /// <summary>Available sorting options.</summary>
        [Newtonsoft.Json.JsonProperty("sort")]
        public System.Collections.Generic.ICollection<ListingResponseSort> Sort { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about the seller.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferSeller 
    {
        /// <summary>The seller ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Indicates whether the seller represents a registered business.</summary>
        [Newtonsoft.Json.JsonProperty("company")]
        public bool Company { get; set; }
    
        /// <summary>Indicates whether the seller has the "Super Sprzedawca" status.</summary>
        [Newtonsoft.Json.JsonProperty("superSeller")]
        public bool SuperSeller { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about the stock.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferStock 
    {
        /// <summary>The unit type of the stock.</summary>
        [Newtonsoft.Json.JsonProperty("unit")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferStockUnit Unit { get; set; }
    
        /// <summary>The available stock value.</summary>
        [Newtonsoft.Json.JsonProperty("available")]
        public int Available { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about promotion options for the item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferPromotion 
    {
        /// <summary>Indicates whether the offer is promoted.</summary>
        [Newtonsoft.Json.JsonProperty("emphasized")]
        public bool Emphasized { get; set; }
    
        /// <summary>Indicates whether the offer has bold title option.</summary>
        [Newtonsoft.Json.JsonProperty("bold")]
        public bool Bold { get; set; }
    
        /// <summary>Indicates whether the offer has highlight option.</summary>
        [Newtonsoft.Json.JsonProperty("highlight")]
        public bool Highlight { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The lowest shipping cost available. Lack of this entity means that the offer has no shipping options (i.e. it is an advertisement or an offer with electronic delivery only).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferLowestPrice 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The price of the offer. It is the buy now price for *BUY_NOW* selling format and current auction price for *AUCTION* format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferPrice 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Fixed (buy now) price of the offer in case of *AUCTION* selling format with buy now option enabled.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferFixedPrice 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about shipping options for the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferDelivery 
    {
        /// <summary>Indicates whether the offer has free shipping option.</summary>
        [Newtonsoft.Json.JsonProperty("availableForFree")]
        public bool AvailableForFree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lowestPrice")]
        public OfferLowestPrice LowestPrice { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferImages 
    {
        /// <summary>The URL of the original sized image.</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>This section describes the selling format and prices.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferSellingMode 
    {
        [Newtonsoft.Json.JsonProperty("format")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellingModeFormat Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price")]
        public OfferPrice Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fixedPrice")]
        public OfferFixedPrice FixedPrice { get; set; }
    
        /// <summary>Popularity of the offer for *BUY_NOW* selling format.</summary>
        [Newtonsoft.Json.JsonProperty("popularity")]
        public int Popularity { get; set; }
    
        /// <summary>Number of bidders for *AUCTION* selling format.</summary>
        [Newtonsoft.Json.JsonProperty("bidCount")]
        public int BidCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The category to which the offer is assigned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferCategory 
    {
        /// <summary>The category ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>This section is available only for the charity offers.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferVendor 
    {
        /// <summary>Identifier of the external service.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferVendorId Id { get; set; }
    
        /// <summary>URL to the web page of the offer.</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>This section is available only for offers with a defined end of publication.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferPublication 
    {
        /// <summary>Publication ending date and time in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("endingAt")]
        public string EndingAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The lists of search results.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseOffers 
    {
        /// <summary>List of promoted offers.</summary>
        [Newtonsoft.Json.JsonProperty("promoted")]
        public System.Collections.Generic.ICollection<ListingOffer> Promoted { get; set; }
    
        /// <summary>List of regular (non-promoted) offers.</summary>
        [Newtonsoft.Json.JsonProperty("regular")]
        public System.Collections.Generic.ICollection<ListingOffer> Regular { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about categories.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseCategories 
    {
        /// <summary>Categories with counters, which can be used to refine search results.</summary>
        [Newtonsoft.Json.JsonProperty("subcategories")]
        public System.Collections.Generic.ICollection<ListingCategoryWithCount> Subcategories { get; set; }
    
        /// <summary>Categories path to the current listing category (breadcrumbs).</summary>
        [Newtonsoft.Json.JsonProperty("path")]
        public System.Collections.Generic.ICollection<ListingCategory> Path { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseFiltersValues 
    {
        /// <summary>Name of the option; for NUMERIC parameters - word indicating start or end of range (i.e. *from*, *to*).</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Filter value. Should be used as query parameter value in the request. This can be:
        /// 
        ///  - for MULTI and SINGLE parameters - a value identifier (e.g. KUJAWSKO_POMORSKIE option in location.province
        ///  filter),
        ///  - for other types - a value entered by user.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public string Value { get; set; }
    
        /// <summary>Suffix used as a second part of query parameter name to be used in the request (the first part is the filter ID). Applicable for NUMERIC values only.</summary>
        [Newtonsoft.Json.JsonProperty("idSuffix")]
        public string IdSuffix { get; set; }
    
        /// <summary>Number of search results matching this filter value.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>Indicates whether this filter value was used in the current request.</summary>
        [Newtonsoft.Json.JsonProperty("selected")]
        public bool Selected { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseFilters 
    {
        /// <summary>Identifier of the filter. Should be used as query parameter key, optionally followed by idSuffix from parameter value (only for NUMERIC filters).</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The type of the filter:
        /// 
        ///  - *MULTI* - multiple choice filter,
        ///  - *SINGLE* - single select (dropdown) filter,
        ///  - *NUMERIC* - range of numeric values (search offers with value matching this range),
        ///  - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),
        ///  - *TEXT* - filter allowing user to input any text.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListingResponseFiltersType Type { get; set; }
    
        /// <summary>Name of the filter.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Available filter values.</summary>
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<ListingResponseFiltersValues> Values { get; set; }
    
        /// <summary>Minimum valid value for filters of type NUMERIC.</summary>
        [Newtonsoft.Json.JsonProperty("minValue")]
        public double MinValue { get; set; }
    
        /// <summary>Maximum valid value for filters of type NUMERIC.</summary>
        [Newtonsoft.Json.JsonProperty("maxValue")]
        public double MaxValue { get; set; }
    
        /// <summary>Unit of the NUMERIC/NUMERIC_SINGLE filter.</summary>
        [Newtonsoft.Json.JsonProperty("unit")]
        public string Unit { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Search metadata.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseSearchMeta 
    {
        /// <summary>The number of results available for navigation. If this number is less than total count, the search criteria (categories, filters, etc.) should be narrowed down to make all results available.</summary>
        [Newtonsoft.Json.JsonProperty("availableCount")]
        public int AvailableCount { get; set; }
    
        /// <summary>The total number of search results with given parameters.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        /// <summary>Indicates whether the search fallback was used. If true, no items matching exact given phrase were found and related items are presented.</summary>
        [Newtonsoft.Json.JsonProperty("fallback")]
        public bool Fallback { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Available sort options.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ListingResponseSort 
    {
        /// <summary>The query parameter value which should be used for this sorting option.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public string Value { get; set; }
    
        /// <summary>The sorting option name in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>The order label in Polish specifying ascending or descending mode.</summary>
        [Newtonsoft.Json.JsonProperty("order")]
        public string Order { get; set; }
    
        /// <summary>Indicates whether this sorting option was used in the current request.</summary>
        [Newtonsoft.Json.JsonProperty("selected")]
        public bool Selected { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The definition of the additional services assigned to the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferAdditionalServices 
    {
        /// <summary>The ID of the additional services definition.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OffersSearchResultDto 
    {
        /// <summary>The list of seller's offers matching the request's criteria.</summary>
        [Newtonsoft.Json.JsonProperty("offers")]
        public System.Collections.Generic.ICollection<OfferListingDto> Offers { get; set; }
    
        /// <summary>Number of offers in the search result.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>The total number of offers matching the request's criteria.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>An offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDto 
    {
        /// <summary>The offer ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The title of the offer.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        public OfferCategory Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("primaryImage")]
        public OfferListingDtoImage PrimaryImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sellingMode")]
        public SellingMode SellingMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saleInfo")]
        public OfferListingDtoV1SaleInfo SaleInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock")]
        public OfferListingDtoV1Stock Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stats")]
        public OfferListingDtoV1Stats Stats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public OfferListingDtoV1Publication Publication { get; set; }
    
        [Newtonsoft.Json.JsonProperty("afterSalesServices")]
        public AfterSalesServices AfterSalesServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalServices")]
        public OfferAdditionalServices AdditionalServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("external")]
        public ExternalId External { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public OfferListingDtoV1Delivery Delivery { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The image used as a thumbnail on the listings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoImage 
    {
        /// <summary>The url to the image in its original size.</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information on the offer's selling mode.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellingMode 
    {
        [Newtonsoft.Json.JsonProperty("format")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SellingModeFormat Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price")]
        public PriceModificationFixedPriceHolder Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimalPrice")]
        public PriceModificationFixedPriceHolder MinimalPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startingPrice")]
        public PriceModificationFixedPriceHolder StartingPrice { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The selling format of the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SellingModeFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUY_NOW")]
        BUY_NOW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUCTION")]
        AUCTION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTISEMENT")]
        ADVERTISEMENT = 2,
    
    }
    
    /// <summary>Delivery information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoV1Delivery 
    {
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public ShippingRates ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Additional information about offers in auction format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoV1SaleInfo 
    {
        [Newtonsoft.Json.JsonProperty("currentPrice")]
        public PriceModificationFixedPriceHolder CurrentPrice { get; set; }
    
        /// <summary>The number of bidders.</summary>
        [Newtonsoft.Json.JsonProperty("biddersCount")]
        public int BiddersCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information on the offer's stock.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoV1Stock 
    {
        /// <summary>The available stock value.</summary>
        [Newtonsoft.Json.JsonProperty("available")]
        public int Available { get; set; }
    
        /// <summary>The number of sold items in the last 30 days.</summary>
        [Newtonsoft.Json.JsonProperty("sold")]
        public int Sold { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The offer's statistics.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoV1Stats 
    {
        /// <summary>The number of users who added this offer to their watch lists.</summary>
        [Newtonsoft.Json.JsonProperty("watchersCount")]
        public int WatchersCount { get; set; }
    
        /// <summary>The number of unique users viewing this offer in the past 30 days.</summary>
        [Newtonsoft.Json.JsonProperty("visitsCount")]
        public int VisitsCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information on the offer's publication status and dates.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferListingDtoV1Publication 
    {
        [Newtonsoft.Json.JsonProperty("status")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferStatus Status { get; set; }
    
        /// <summary>The date and time of activation in UTC for a planned listing.</summary>
        [Newtonsoft.Json.JsonProperty("startingAt")]
        public string StartingAt { get; set; }
    
        /// <summary>The actual date and time of activation in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("startedAt")]
        public string StartedAt { get; set; }
    
        /// <summary>The date and time of a planned ending in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("endingAt")]
        public string EndingAt { get; set; }
    
        /// <summary>The actual date and time of last ending in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("endedAt")]
        public string EndedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The publication status of the current offer. The possible values:
    /// 
    ///   - *INACTIVE* - a draft offer
    ///   - *ACTIVATING* - the offer is planned for listing or is during the process of activation
    ///   - *ACTIVE* - the offer is active
    ///   - *ENDED* - the offer was active and is now ended (for whatever reason)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OfferStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATING")]
        ACTIVATING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENDED")]
        ENDED = 3,
    
    }
    
    /// <summary>Order events list</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrderEventsList 
    {
        [Newtonsoft.Json.JsonProperty("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderEvent> Events { get; set; } = new System.Collections.ObjectModel.Collection<OrderEvent>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order event</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrderEvent 
    {
        /// <summary>event id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("order")]
        [System.ComponentModel.DataAnnotations.Required]
        public OrderEventData Order { get; set; } = new OrderEventData();
    
        [Newtonsoft.Json.JsonProperty("type")]
        public OrderEventType Type { get; set; }
    
        /// <summary>Date when the event occurred</summary>
        [Newtonsoft.Json.JsonProperty("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order event data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrderEventData 
    {
        [Newtonsoft.Json.JsonProperty("seller")]
        [System.ComponentModel.DataAnnotations.Required]
        public SellerReference Seller { get; set; } = new SellerReference();
    
        [Newtonsoft.Json.JsonProperty("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BuyerReference Buyer { get; set; } = new BuyerReference();
    
        [Newtonsoft.Json.JsonProperty("lineItems")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderLineItem> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<OrderLineItem>();
    
        [Newtonsoft.Json.JsonProperty("checkoutForm")]
        public CheckoutFormReference CheckoutForm { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Seller identifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerReference 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Offer identifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferReference 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Offer name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("external")]
        public ExternalId External { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Buyer data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BuyerReference 
    {
        /// <summary>buyer id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }
    
        /// <summary>is a guest account?</summary>
        [Newtonsoft.Json.JsonProperty("guest")]
        public bool Guest { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrderLineItem 
    {
        /// <summary>Order item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferReference Offer { get; set; } = new OfferReference();
    
        /// <summary>quantity</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public double Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalPrice")]
        public PriceModificationFixedPriceHolder OriginalPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder Price { get; set; } = new PriceModificationFixedPriceHolder();
    
        /// <summary>ISO date when offer was bought</summary>
        [Newtonsoft.Json.JsonProperty("boughtAt")]
        public System.DateTimeOffset BoughtAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Event statistics, currently contains only basic information about the latest event.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrderEventStats 
    {
        [Newtonsoft.Json.JsonProperty("latestEvent")]
        public LatestOrderEvent LatestEvent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Basic information about the latest order event.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LatestOrderEvent 
    {
        /// <summary>event id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Date when the event occurred</summary>
        [Newtonsoft.Json.JsonProperty("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormReference 
    {
        /// <summary>Checkout form identifier</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Checkout form revision</summary>
        [Newtonsoft.Json.JsonProperty("revision")]
        public string Revision { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Describes status of the form delivery and purchase options based on payment and purchase status. * `BOUGHT` - purchase without checkout form filled in * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing. * `CANCELLED` - purchase cancelled by buyer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BOUGHT")]
        BOUGHT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FILLED_IN")]
        FILLED_IN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_PROCESSING")]
        READY_FOR_PROCESSING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,
    
    }
    
    /// <summary>Type of order event. * `BOUGHT` - purchase without checkout form filled in * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing. * `BUYER_CANCELLED` - purchase cancelled by buyer * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OrderEventType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BOUGHT")]
        BOUGHT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FILLED_IN")]
        FILLED_IN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_PROCESSING")]
        READY_FOR_PROCESSING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUYER_CANCELLED")]
        BUYER_CANCELLED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FULFILLMENT_STATUS_CHANGED")]
        FULFILLMENT_STATUS_CHANGED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutForms 
    {
        [Newtonsoft.Json.JsonProperty("checkoutForms")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CheckoutForm> CheckoutForms1 { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutForm>();
    
        /// <summary>number of returned objects</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public double Count { get; set; }
    
        /// <summary>Number of all objects of requested status(es) available (regardless of the provided limit and offset)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public double TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutForm 
    {
        /// <summary>Checkout form id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        /// <summary>Message from buyer to seller</summary>
        [Newtonsoft.Json.JsonProperty("messageToSeller")]
        public string MessageToSeller { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public CheckoutFormBuyerReference Buyer { get; set; } = new CheckoutFormBuyerReference();
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public CheckoutFormPaymentReference Payment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status")]
        public CheckoutFormStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fulfillment")]
        public CheckoutFormFulfillment Fulfillment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public CheckoutFormDeliveryReference Delivery { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoice")]
        public CheckoutFormInvoiceInfo Invoice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lineItems")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CheckoutFormLineItem> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormLineItem>();
    
        [Newtonsoft.Json.JsonProperty("surcharges")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CheckoutFormPaymentReference> Surcharges { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormPaymentReference>();
    
        [Newtonsoft.Json.JsonProperty("discounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CheckoutFormDiscount> Discounts { get; set; } = new System.Collections.ObjectModel.Collection<CheckoutFormDiscount>();
    
        [Newtonsoft.Json.JsonProperty("summary")]
        [System.ComponentModel.DataAnnotations.Required]
        public CheckoutFormSummary Summary { get; set; } = new CheckoutFormSummary();
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public string UpdatedAt { get; set; }
    
        /// <summary>Checkout form revision</summary>
        [Newtonsoft.Json.JsonProperty("revision")]
        public string Revision { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Buyer data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormBuyerReference 
    {
        /// <summary>buyer id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }
    
        /// <summary>Buyer's first name</summary>
        [Newtonsoft.Json.JsonProperty("firstName")]
        public string FirstName { get; set; }
    
        /// <summary>Buyer's last name</summary>
        [Newtonsoft.Json.JsonProperty("lastName")]
        public string LastName { get; set; }
    
        /// <summary>Company name</summary>
        [Newtonsoft.Json.JsonProperty("companyName")]
        public string CompanyName { get; set; }
    
        /// <summary>is a guest account?</summary>
        [Newtonsoft.Json.JsonProperty("guest")]
        public bool Guest { get; set; }
    
        /// <summary>Buyer's personal identity number (PESEL)</summary>
        [Newtonsoft.Json.JsonProperty("personalIdentity")]
        public string PersonalIdentity { get; set; }
    
        /// <summary>Phone number</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber")]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public CheckoutFormBuyerAddressReference Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Buyer address</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormBuyerAddressReference 
    {
        /// <summary>Street</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        public string Street { get; set; }
    
        /// <summary>City name</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        public string City { get; set; }
    
        /// <summary>Postal code</summary>
        [Newtonsoft.Json.JsonProperty("postCode")]
        public string PostCode { get; set; }
    
        /// <summary>Country code</summary>
        [Newtonsoft.Json.JsonProperty("countryCode")]
        public string CountryCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormPaymentReference 
    {
        /// <summary>Payment id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckoutFormPaymentType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("provider")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckoutFormPaymentProvider Provider { get; set; }
    
        /// <summary>Date when the event occurred</summary>
        [Newtonsoft.Json.JsonProperty("finishedAt")]
        public System.DateTimeOffset FinishedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("paidAmount")]
        public PriceModificationFixedPriceHolder PaidAmount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Payment type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormPaymentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CASH_ON_DELIVERY")]
        CASH_ON_DELIVERY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WIRE_TRANSFER")]
        WIRE_TRANSFER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLINE")]
        ONLINE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_PAYMENT")]
        SPLIT_PAYMENT = 3,
    
    }
    
    /// <summary>Payment provider</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormPaymentProvider
    {
        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE")]
        OFFLINE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormFulfillment 
    {
        [Newtonsoft.Json.JsonProperty("status")]
        public CheckoutFormFulfillmentStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentSummary")]
        public CheckoutFormFulfillmentShipmentSummary ShipmentSummary { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order seller status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormFulfillmentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY_FOR_SHIPMENT")]
        READY_FOR_SHIPMENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormFulfillmentShipmentSummary 
    {
        [Newtonsoft.Json.JsonProperty("lineItemsSent")]
        public CheckoutFormFulfillmentShipmentSummaryLineItemsSent LineItemsSent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Indicates how many line items have tracking number specified.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormFulfillmentShipmentSummaryLineItemsSent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SOME")]
        SOME = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryReference 
    {
        [Newtonsoft.Json.JsonProperty("address")]
        public CheckoutFormDeliveryAddress Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("method")]
        public CheckoutFormDeliveryMethod Method { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupPoint")]
        public CheckoutFormDeliveryPickupPoint PickupPoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cost")]
        public PriceModificationFixedPriceHolder Cost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("time")]
        public CheckoutFormDeliveryTime Time { get; set; }
    
        /// <summary>Buyer used a SMART option</summary>
        [Newtonsoft.Json.JsonProperty("smart")]
        public bool Smart { get; set; }
    
        /// <summary>Calculated number of packages.</summary>
        [Newtonsoft.Json.JsonProperty("calculatedNumberOfPackages")]
        public int CalculatedNumberOfPackages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryAddress 
    {
        /// <summary>Receiver's first name</summary>
        [Newtonsoft.Json.JsonProperty("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>Receiver's last name</summary>
        [Newtonsoft.Json.JsonProperty("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        /// <summary>Street name</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>City name</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Postal code</summary>
        [Newtonsoft.Json.JsonProperty("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ZipCode { get; set; }
    
        /// <summary>Country code</summary>
        [Newtonsoft.Json.JsonProperty("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }
    
        /// <summary>Company name</summary>
        [Newtonsoft.Json.JsonProperty("companyName")]
        public string CompanyName { get; set; }
    
        /// <summary>Phone number</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber")]
        public string PhoneNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryMethod 
    {
        /// <summary>Delivery method id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Delivery method name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryPickupPoint 
    {
        /// <summary>Delivery point id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Delivery point name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Delivery point description</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public CheckoutFormDeliveryPickupPointAddress Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryPickupPointAddress 
    {
        /// <summary>Delivery point street name</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        public string Street { get; set; }
    
        /// <summary>Delivery point postal code</summary>
        [Newtonsoft.Json.JsonProperty("zipCode")]
        public string ZipCode { get; set; }
    
        /// <summary>City name</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        public string City { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryTime 
    {
        [Newtonsoft.Json.JsonProperty("guaranteed")]
        public CheckoutFormDeliveryTimeGuaranteed Guaranteed { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Guaranteed date when first delivery attempt takes place. This is always filled for X-press Couriers delivery method.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDeliveryTimeGuaranteed 
    {
        /// <summary>ISO date when the earliest delivery attempt can take place.</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public System.DateTimeOffset From { get; set; }
    
        /// <summary>ISO date when the latest delivery attempt can take place.</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public System.DateTimeOffset To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormInvoiceInfo 
    {
        /// <summary>Is invoice required by buyer?</summary>
        [Newtonsoft.Json.JsonProperty("required")]
        public bool Required { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public CheckoutFormInvoiceAddress Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormInvoiceAddress 
    {
        /// <summary>Street name</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>City name</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Postal code</summary>
        [Newtonsoft.Json.JsonProperty("zipCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ZipCode { get; set; }
    
        /// <summary>Country code</summary>
        [Newtonsoft.Json.JsonProperty("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company")]
        public CheckoutFormInvoiceAddressCompany Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("naturalPerson")]
        public CheckoutFormInvoiceAddressNaturalPerson NaturalPerson { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormInvoiceAddressCompany 
    {
        /// <summary>Name of a company for which invoice should be issued</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Tax id</summary>
        [Newtonsoft.Json.JsonProperty("taxId")]
        public string TaxId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormInvoiceAddressNaturalPerson 
    {
        /// <summary>Invoice receiver first name</summary>
        [Newtonsoft.Json.JsonProperty("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>Invoice receiver last name</summary>
        [Newtonsoft.Json.JsonProperty("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormLineItem 
    {
        /// <summary>Line item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferReference Offer { get; set; } = new OfferReference();
    
        /// <summary>quantity</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public double Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder OriginalPrice { get; set; } = new PriceModificationFixedPriceHolder();
    
        [Newtonsoft.Json.JsonProperty("price")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder Price { get; set; } = new PriceModificationFixedPriceHolder();
    
        [Newtonsoft.Json.JsonProperty("selectedAdditionalServices")]
        public System.Collections.Generic.ICollection<CheckoutFormAdditionalService> SelectedAdditionalServices { get; set; }
    
        /// <summary>ISO date when offer was bought</summary>
        [Newtonsoft.Json.JsonProperty("boughtAt")]
        public System.DateTimeOffset BoughtAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormAdditionalService 
    {
        /// <summary>Additional service id</summary>
        [Newtonsoft.Json.JsonProperty("definitionId")]
        public string DefinitionId { get; set; }
    
        /// <summary>Additional service name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price")]
        public PriceModificationFixedPriceHolder Price { get; set; }
    
        /// <summary>Quantity of an additional service</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public int Quantity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormDiscount 
    {
        /// <summary>Describes type of discount used in checkout form. The types of discounts can be as follows: * `COUPON` - coupon was used during payment * `BUNDLE` - some of the line items were bought as a bundle * `MULTIPACK` - at least one line item was bought with multipack option * `CROSSMULTIPACK` - some of line items each from different offers were bought together as multipack
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckoutFormDiscountType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormSummary 
    {
        [Newtonsoft.Json.JsonProperty("totalToPay")]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalToPay TotalToPay { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeListResponse 
    {
        [Newtonsoft.Json.JsonProperty("disputes")]
        public System.Collections.Generic.ICollection<Dispute> Disputes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dispute 
    {
        /// <summary>Identifier of the dispute</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subject")]
        [System.ComponentModel.DataAnnotations.Required]
        public Subject Subject { get; set; } = new Subject();
    
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisputeStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buyer")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeUser Buyer { get; set; } = new DisputeUser();
    
        [Newtonsoft.Json.JsonProperty("seller")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeUser Seller { get; set; } = new DisputeUser();
    
        [Newtonsoft.Json.JsonProperty("checkoutForm")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeCheckoutForm CheckoutForm { get; set; } = new DisputeCheckoutForm();
    
        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeFirstMessage Message { get; set; } = new DisputeFirstMessage();
    
        [Newtonsoft.Json.JsonProperty("messagesCount")]
        public int MessagesCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Subject of the dispute</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Subject 
    {
        /// <summary>Subject name</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeUser 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeMessageList 
    {
        [Newtonsoft.Json.JsonProperty("messages")]
        public System.Collections.Generic.ICollection<DisputeMessage> Messages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Initial dispute message with text OR attachment OR both</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeFirstMessage 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public DisputeAttachment Attachment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeAuthor Author { get; set; } = new DisputeAuthor();
    
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Initial dispute message with text OR attachment OR both</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeMessage 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        public DisputeAttachment Attachment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeMessageAuthor Author { get; set; } = new DisputeMessageAuthor();
    
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Author of the message</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeMessageAuthor 
    {
        /// <summary>Not present if role is ADMIN or SYSTEM</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageAuthorRole Role { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeAttachment 
    {
        [Newtonsoft.Json.JsonProperty("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string FileName { get; set; }
    
        /// <summary>Direct link to the attachment</summary>
        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeAttachmentId 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AttachmentDeclaration 
    {
        [Newtonsoft.Json.JsonProperty("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size")]
        public int Size { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeCheckoutForm 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DisputeAuthor 
    {
        /// <summary>Not present if role is ADMIN</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisputeAuthorRole Role { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DisputeAuthorRole
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MessageAuthorRole
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
        SYSTEM = 3,
    
    }
    
    /// <summary>Request body to add message to the dispute. Presence of text or attachment fields or both is required.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MessageRequest 
    {
        [Newtonsoft.Json.JsonProperty("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20000)]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment")]
        [System.ComponentModel.DataAnnotations.Required]
        public DisputeAttachmentId Attachment { get; set; } = new DisputeAttachmentId();
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageRequestType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TagRequest 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hidden")]
        public bool Hidden { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TagId 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TagResponse 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hidden")]
        public bool Hidden { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TagListResponse 
    {
        [Newtonsoft.Json.JsonProperty("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TagResponse> Tags { get; set; } = new System.Collections.ObjectModel.Collection<TagResponse>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TagIdsRequest 
    {
        [Newtonsoft.Json.JsonProperty("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TagId> Tags { get; set; } = new System.Collections.ObjectModel.Collection<TagId>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LineItemIdMappings 
    {
        [Newtonsoft.Json.JsonProperty("mappings")]
        public System.Collections.Generic.ICollection<Mappings> Mappings { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PromotionResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CampaignResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SinglePromotionCampaignResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public CampaignResponseDto Campaign { get; set; } = new CampaignResponseDto();
    
        [Newtonsoft.Json.JsonProperty("promotion")]
        [System.ComponentModel.DataAnnotations.Required]
        public PromotionResponseDto Promotion { get; set; } = new PromotionResponseDto();
    
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SinglePromotionCampaignResponseDtoStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PromotionCampaignsResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("promotionCampaigns")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SinglePromotionCampaignResponseDto> PromotionCampaigns { get; set; } = new System.Collections.ObjectModel.Collection<SinglePromotionCampaignResponseDto>();
    
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public long TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PromotionCampaignResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public CampaignResponseDto Campaign { get; set; } = new CampaignResponseDto();
    
        [Newtonsoft.Json.JsonProperty("link")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Link { get; set; }
    
        [Newtonsoft.Json.JsonProperty("promotion")]
        [System.ComponentModel.DataAnnotations.Required]
        public PromotionResponseDto Promotion { get; set; } = new PromotionResponseDto();
    
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PromotionCampaignResponseDtoStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CampaignRequestDto 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PromotionRequestDto 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PromotionCampaignRequestDto 
    {
        [Newtonsoft.Json.JsonProperty("promotion")]
        [System.ComponentModel.DataAnnotations.Required]
        public PromotionRequestDto Promotion { get; set; } = new PromotionRequestDto();
    
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public CampaignRequestDto Campaign { get; set; } = new CampaignRequestDto();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormAddWaybillRequest 
    {
        /// <summary>Supported carriers are available via &lt;a href="#operation/getOrdersCarriersUsingGET" target="_blank"&gt;shipping carriers resource&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("carrierId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierId { get; set; }
    
        /// <summary>Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters. It can contain any word character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.</summary>
        [Newtonsoft.Json.JsonProperty("waybill")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Waybill { get; set; }
    
        /// <summary>Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.</summary>
        [Newtonsoft.Json.JsonProperty("carrierName")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CarrierName { get; set; }
    
        /// <summary>List of order line items. They must be from the order specified in the path parameter. List cannot be empty.</summary>
        [Newtonsoft.Json.JsonProperty("lineItems")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LineItems> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<LineItems>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrdersShippingCarrier 
    {
        /// <summary>Identifier of a carrier - unique to every carrier.
        /// 
        /// It’s highly recommended to use an identifier different from `OTHER`, because its parcel status may be updated automatically. Carrier identifier `OTHER` is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Name of a carrier.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormAddWaybillCreated 
    {
        /// <summary>Identifier of a shipment.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters. It can contain any word character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.</summary>
        [Newtonsoft.Json.JsonProperty("waybill")]
        public string Waybill { get; set; }
    
        /// <summary>Supported carriers are available via &lt;a href="#operation/getOrdersCarriersUsingGET" target="_blank"&gt;shipping carriers resource&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("carrierId")]
        public string CarrierId { get; set; }
    
        /// <summary>Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.</summary>
        [Newtonsoft.Json.JsonProperty("carrierName")]
        public string CarrierName { get; set; }
    
        /// <summary>List of order line items. They must be from the order specified in the path parameter. List cannot be empty.</summary>
        [Newtonsoft.Json.JsonProperty("lineItems")]
        public object LineItems { get; set; }
    
        /// <summary>Date and time of the parcel tracking number registration in UTC (ISO8601 format).</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public string CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OrdersShippingCarriersResponse 
    {
        /// <summary>List of shipping carriers.</summary>
        [Newtonsoft.Json.JsonProperty("carriers")]
        public System.Collections.Generic.ICollection<OrdersShippingCarrier> Carriers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CheckoutFormOrderWaybillResponse 
    {
        /// <summary>List of parcel tracking numbers currently assigned to the order.</summary>
        [Newtonsoft.Json.JsonProperty("shipments")]
        public System.Collections.Generic.ICollection<CheckoutFormAddWaybillCreated> Shipments { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GetSaleProductsResponse 
    {
        [Newtonsoft.Json.JsonProperty("products")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SaleProductResponseDto> Products { get; set; } = new System.Collections.ObjectModel.Collection<SaleProductResponseDto>();
    
        [Newtonsoft.Json.JsonProperty("categories")]
        public System.Collections.Generic.ICollection<SaleProductResponseCategoriesDto> Categories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filters")]
        public System.Collections.Generic.ICollection<ListingResponseFilters> Filters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextPage")]
        public NextPage NextPage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProposeSaleProductRequest 
    {
        /// <summary>Suggested product name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();
    
        /// <summary>A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.</summary>
        [Newtonsoft.Json.JsonProperty("eans")]
        public System.Collections.Generic.ICollection<string> Eans { get; set; }
    
        /// <summary>List of product images. At least one image is required.</summary>
        [Newtonsoft.Json.JsonProperty("images")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ImageUrl> Images { get; set; } = new System.Collections.ObjectModel.Collection<ImageUrl>();
    
        /// <summary>List of product parameters.</summary>
        [Newtonsoft.Json.JsonProperty("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductParameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<ProductParameter>();
    
        [Newtonsoft.Json.JsonProperty("description")]
        public StandardizedDescription Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductDto 
    {
        /// <summary>Product id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Product name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();
    
        /// <summary>A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.</summary>
        [Newtonsoft.Json.JsonProperty("eans")]
        public System.Collections.Generic.ICollection<string> Eans { get; set; }
    
        /// <summary>List of product images.</summary>
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<ImageUrl> Images { get; set; }
    
        /// <summary>List of product parameters.</summary>
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<ProductParameter> Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offerRequirements")]
        public OfferRequirements OfferRequirements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compatibilityList")]
        public SaleProductCompatibilityList CompatibilityList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tecdocSpecification")]
        public TecdocSpecification TecdocSpecification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description")]
        public StandardizedDescription Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductResponseDto 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Name of the product.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        [System.ComponentModel.DataAnnotations.Required]
        public Category Category { get; set; } = new Category();
    
        /// <summary>A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.</summary>
        [Newtonsoft.Json.JsonProperty("eans")]
        public System.Collections.Generic.ICollection<string> Eans { get; set; }
    
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<ImageUrl> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<ProductParameter> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Compatibility list assigned to this product, based on information from TecDoc database.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductCompatibilityList 
    {
        /// <summary>Id of product-based compatibility list.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Type of compatibility list.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = "PRODUCT_BASED";
    
        /// <summary>List of the compatible items.</summary>
        [Newtonsoft.Json.JsonProperty("items")]
        public System.Collections.Generic.ICollection<CompatibilityListItemProductBased> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductResponseCategoriesDto 
    {
        /// <summary>A list of categories that contain results for given search parameters.</summary>
        [Newtonsoft.Json.JsonProperty("subcategories")]
        public System.Collections.Generic.ICollection<ProductsCategorySubcategories> Subcategories { get; set; }
    
        /// <summary>The path of current category used as categrory filter in search.</summary>
        [Newtonsoft.Json.JsonProperty("path")]
        public System.Collections.Generic.ICollection<ProductsCategoryPath> Path { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProductsCategorySubcategories 
    {
        /// <summary>Category id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Category name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Total number of products matching query criteria in this category.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProductsCategoryPath 
    {
        /// <summary>Category id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Category name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Product's parameter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProductParameter 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rangeValue")]
        public ParameterRangeValue RangeValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("valuesIds")]
        public System.Collections.Generic.ICollection<string> ValuesIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("valuesLabels")]
        public System.Collections.Generic.ICollection<string> ValuesLabels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unit")]
        public string Unit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options")]
        public System.Collections.Generic.ICollection<Options> Options { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Single offer data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductOffer 
    {
        [Newtonsoft.Json.JsonProperty("payments")]
        public Payments Payments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sellingMode")]
        public SellingMode SellingMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stock Stock { get; set; } = new Stock();
    
        [Newtonsoft.Json.JsonProperty("location")]
        public Location Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public Publication Publication { get; set; }
    
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<string> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description")]
        public StandardizedDescription Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductOfferRequest : SaleProductOffer
    {
        [Newtonsoft.Json.JsonProperty("product")]
        public ProductOffer Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("afterSalesServices")]
        public AfterSalesServicesProductOfferRequest AfterSalesServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public DeliveryProductOfferRequest Delivery { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<ParameterProductOfferRequest> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SaleProductOfferResponse : SaleProductOffer
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product")]
        public JustId Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("afterSalesServices")]
        public AfterSalesServices AfterSalesServices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("delivery")]
        public Delivery4 Delivery { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validation")]
        public Validation Validation { get; set; }
    
        /// <summary>Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProductOffer 
    {
        /// <summary>Product id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Product name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category")]
        public Category Category { get; set; }
    
        /// <summary>List of product images.</summary>
        [Newtonsoft.Json.JsonProperty("images")]
        public System.Collections.Generic.ICollection<string> Images { get; set; }
    
        /// <summary>List of product parameters.</summary>
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<ParameterProductOfferRequest> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The definitions of the different after sales services assigned to the offer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AfterSalesServicesProductOfferRequest 
    {
        [Newtonsoft.Json.JsonProperty("impliedWarranty")]
        public ImpliedWarranty2 ImpliedWarranty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("returnPolicy")]
        public ReturnPolicy2 ReturnPolicy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("warranty")]
        public Warranty2 Warranty { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeliveryProductOfferRequest 
    {
        /// <summary>Handling time, ISO 8601 duration format</summary>
        [Newtonsoft.Json.JsonProperty("handlingTime")]
        public string HandlingTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public ShippingRates2 ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Offer's parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ParameterProductOfferRequest 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The name of the parameter.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rangeValue")]
        public ParameterRangeValue RangeValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("valuesIds")]
        public System.Collections.Generic.ICollection<string> ValuesIds { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Conditions which an offer must meet to be assigned with the product, i.e. Condition parameter must be set to New.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferRequirements 
    {
        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.ICollection<ProductParameter> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalEmailsResponse 
    {
        [Newtonsoft.Json.JsonProperty("additional-emails")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AdditionalEmail> AdditionalEmails { get; set; } = new System.Collections.ObjectModel.Collection<AdditionalEmail>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details of a single additional email address.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalEmail 
    {
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalEmailRequest 
    {
        /// <summary>A valid email address you want to add to your account. Maximum length of the part before the `@` sign is 64 characters.</summary>
        [Newtonsoft.Json.JsonProperty("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPackages 
    {
        [Newtonsoft.Json.JsonProperty("basePackage")]
        [System.ComponentModel.DataAnnotations.Required]
        public ClassifiedPackage BasePackage { get; set; } = new ClassifiedPackage();
    
        [Newtonsoft.Json.JsonProperty("extraPackages")]
        public System.Collections.Generic.ICollection<ClassifiedPackage> ExtraPackages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedResponse 
    {
        [Newtonsoft.Json.JsonProperty("basePackage")]
        [System.ComponentModel.DataAnnotations.Required]
        public ClassifiedPackage BasePackage { get; set; } = new ClassifiedPackage();
    
        [Newtonsoft.Json.JsonProperty("extraPackages")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ClassifiedPackage> ExtraPackages { get; set; } = new System.Collections.ObjectModel.Collection<ClassifiedPackage>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedExtension 
    {
        /// <summary>The classified extension description.</summary>
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description { get; set; }
    
        /// <summary>The classified extension name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPackageConfig 
    {
        [Newtonsoft.Json.JsonProperty("extensions")]
        public System.Collections.Generic.ICollection<ClassifiedExtension> Extensions { get; set; }
    
        /// <summary>The classifieds package ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>The classifieds package name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>A list of additional promotions included in the package.</summary>
        [Newtonsoft.Json.JsonProperty("promotions")]
        public System.Collections.Generic.ICollection<ClassifiedPromotion> Promotions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public ClassifiedPublication Publication { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClassifiedPackageConfigType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPackageConfigs 
    {
        [Newtonsoft.Json.JsonProperty("packages")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ClassifiedPackageConfig> Packages { get; set; } = new System.Collections.ObjectModel.Collection<ClassifiedPackageConfig>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPromotion 
    {
        /// <summary>Duration in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("duration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; }
    
        /// <summary>Name of the promotion.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ClassifiedPublication 
    {
        /// <summary>Duration in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("duration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PaymentOperations 
    {
        /// <summary>Collection of payment operations.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOperations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BaseOperation> PaymentOperations1 { get; set; } = new System.Collections.ObjectModel.Collection<BaseOperation>();
    
        /// <summary>Number of payment operations returned in search result for the given parameters.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>Total number of payment operations for the given parameters.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("CORRECTION", typeof(CorrectionOperation))]
    [JsonInheritanceAttribute("CONTRIBUTION", typeof(ContributionOperation))]
    [JsonInheritanceAttribute("PAYOUT", typeof(PayoutOperation))]
    [JsonInheritanceAttribute("PAYOUT_CANCEL", typeof(PayoutOperationCancel))]
    [JsonInheritanceAttribute("REFUND_INCREASE", typeof(RefundIncreaseOperation))]
    [JsonInheritanceAttribute("REFUND_CHARGE", typeof(RefundChargeOperation))]
    [JsonInheritanceAttribute("REFUND_CANCEL", typeof(RefundCancelOperation))]
    [JsonInheritanceAttribute("SURCHARGE", typeof(SurchargeOperation))]
    [JsonInheritanceAttribute("DEDUCTION_CHARGE", typeof(DeductionChargeOperation))]
    [JsonInheritanceAttribute("DEDUCTION_INCREASE", typeof(DeductionIncreaseOperation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaseOperation 
    {
        /// <summary>The group to which the given operation type belongs.</summary>
        [Newtonsoft.Json.JsonProperty("group")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseOperationGroup Group { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wallet")]
        [System.ComponentModel.DataAnnotations.Required]
        public Wallet Wallet { get; set; } = new Wallet();
    
        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public OperationValue Value { get; set; }
    
        /// <summary>Date and time of the operation in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The state of the wallet after the operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Wallet 
    {
        /// <summary>The payment operator.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOperator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WalletPaymentOperator PaymentOperator { get; set; }
    
        /// <summary>The type of the wallet.</summary>
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WalletType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public WalletBalance Balance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The wallet balance after the operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WalletBalance : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The operation value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperationValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Delivery amount for payment refund.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundDeliveryValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Overpaid amount for payment refund.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundOverpaidValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Additional services amount for payment refund.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundAdditionalServicesValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Surcharge refund amount.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundSurchargeValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Total amount for payment refund.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundTotalValue : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CorrectionOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "CORRECTION";
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContributionOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "CONTRIBUTION";
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public OperationPayment Payment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant")]
        public BuyerParticipant Participant { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PayoutOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "PAYOUT";
    
        [Newtonsoft.Json.JsonProperty("payout")]
        public Payout Payout { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PayoutOperationCancel : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "PAYOUT_CANCEL";
    
        [Newtonsoft.Json.JsonProperty("payout")]
        public Payout Payout { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundIncreaseOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "REFUND_INCREASE";
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public OperationPayment Payment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant")]
        public SellerParticipant Participant { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundCancelOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "REFUND_CANCEL";
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public OperationPayment Payment { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefundChargeOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "REFUND_CHARGE";
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public OperationPayment Payment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant")]
        public BuyerParticipant Participant { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SurchargeOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "SURCHARGE";
    
        [Newtonsoft.Json.JsonProperty("payment")]
        public OperationPayment Payment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("surcharge")]
        public Surcharge Surcharge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant")]
        public BuyerParticipant Participant { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeductionChargeOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "DEDUCTION_CHARGE";
    
        [Newtonsoft.Json.JsonProperty("deduction")]
        public Deduction Deduction { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeductionIncreaseOperation : BaseOperation
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "DEDUCTION_INCREASE";
    
        [Newtonsoft.Json.JsonProperty("deduction")]
        public Deduction Deduction { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Payment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperationPayment 
    {
        /// <summary>The payment ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Participant 
    {
        /// <summary>Company name.</summary>
        [Newtonsoft.Json.JsonProperty("companyName")]
        public string CompanyName { get; set; }
    
        /// <summary>Login.</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }
    
        /// <summary>First name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>Last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address")]
        public OperationParticipantAddress Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The seller's data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerParticipant : Participant
    {
        /// <summary>The seller's ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The buyer's data.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BuyerParticipant : Participant
    {
        /// <summary>The buyers's ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Address.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperationParticipantAddress 
    {
        /// <summary>Street.</summary>
        [Newtonsoft.Json.JsonProperty("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>City.</summary>
        [Newtonsoft.Json.JsonProperty("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Payout.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Payout 
    {
        /// <summary>The payout ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Surcharge.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Surcharge 
    {
        /// <summary>The surcharge ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Deduction.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Deduction 
    {
        /// <summary>The deduction ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PaymentIdMapping 
    {
        /// <summary>The payment ID compatible with RestAPI.</summary>
        [Newtonsoft.Json.JsonProperty("paymentId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid PaymentId { get; set; }
    
        /// <summary>The transaction ID compatible with WebAPI.</summary>
        [Newtonsoft.Json.JsonProperty("transactionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransactionId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains additional information describing products from automotive categories. Technical specification is created based on TecDoc database and can only be used while creating offer with assigned product to it. &lt;a href="../../productization" target="_blank"&gt;Read more&lt;/a&gt;.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TecdocSpecification 
    {
        /// <summary>Identifier of technical specification.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Text representation of the technical specification. Provided for informational purposes only - ignored when creating (Post) or updating (Put) compatibility list in the offer.</summary>
        [Newtonsoft.Json.JsonProperty("items")]
        public System.Collections.Generic.ICollection<TecdocSpecificationItem> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TecdocSpecificationItem 
    {
        /// <summary>Technical specification property name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Technical specification property values.</summary>
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BlackListResponse 
    {
        [Newtonsoft.Json.JsonProperty("user")]
        public BlacklistUser User { get; set; }
    
        /// <summary>Note about reason of blacklisting.</summary>
        [Newtonsoft.Json.JsonProperty("note")]
        public string Note { get; set; }
    
        /// <summary>Date and time of the creation in ISO 8601 format.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BlackListPagedResponse 
    {
        [Newtonsoft.Json.JsonProperty("blacklistedUsers")]
        public System.Collections.Generic.ICollection<BlackListResponse> BlacklistedUsers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("offset")]
        public int Offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit")]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BlacklistRequest 
    {
        [Newtonsoft.Json.JsonProperty("user")]
        public BlacklistUser User { get; set; }
    
        /// <summary>Note about reason of blacklisting.</summary>
        [Newtonsoft.Json.JsonProperty("note")]
        public string Note { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BlacklistUser 
    {
        /// <summary>Id of excluded user.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public double Id { get; set; }
    
        /// <summary>Login of excluded user.</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MeResponse 
    {
        /// <summary>User Id.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>User login.</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        /// <summary>User's first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName")]
        public string FirstName { get; set; }
    
        /// <summary>User's last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName")]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company")]
        public Company Company { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Company 
    {
        /// <summary>User's company name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>bid response</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MyBidResponse 
    {
        [Newtonsoft.Json.JsonProperty("maxAmount")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder MaxAmount { get; set; } = new PriceModificationFixedPriceHolder();
    
        /// <summary>This indicates if the minimal price of the auction has been met or is not set at all. A minimal price can be set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not higher than the minimal price when the auction ends, the listing ends and the item is not sold.</summary>
        [Newtonsoft.Json.JsonProperty("minimalPriceMet")]
        public bool MinimalPriceMet { get; set; }
    
        /// <summary>Is this bid currently winning?</summary>
        [Newtonsoft.Json.JsonProperty("highBidder")]
        public bool HighBidder { get; set; }
    
        /// <summary>Auction details.</summary>
        [Newtonsoft.Json.JsonProperty("auction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Auction Auction { get; set; } = new Auction();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerOfferEventsResponse 
    {
        /// <summary>The list of events.</summary>
        [Newtonsoft.Json.JsonProperty("offerEvents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SellerOfferBaseEvent> OfferEvents { get; set; } = new System.Collections.ObjectModel.Collection<SellerOfferBaseEvent>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The data of an event.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("OFFER_ACTIVATED", typeof(OfferActivatedEvent))]
    [JsonInheritanceAttribute("OFFER_CHANGED", typeof(OfferChangedEvent))]
    [JsonInheritanceAttribute("OFFER_ENDED", typeof(OfferEndedEvent))]
    [JsonInheritanceAttribute("OFFER_STOCK_CHANGED", typeof(OfferStockChangedEvent))]
    [JsonInheritanceAttribute("OFFER_PRICE_CHANGED", typeof(OfferPriceChangedEvent))]
    [JsonInheritanceAttribute("OFFER_ARCHIVED", typeof(OfferArchivedEvent))]
    [JsonInheritanceAttribute("OFFER_BID_PLACED", typeof(OfferBidPlacedEvent))]
    [JsonInheritanceAttribute("OFFER_BID_CANCELED", typeof(OfferBidCanceledEvent))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SellerOfferBaseEvent 
    {
        /// <summary>The ID of the event. It can be used in the `from` parameter of the query.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Id { get; set; }
    
        /// <summary>The date and time when the event occurred, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</summary>
        [Newtonsoft.Json.JsonProperty("occurredAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredAt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferActivatedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_ACTIVATED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferChangedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_CHANGED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferEndedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_ENDED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventEndedOffer Offer { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferStockChangedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_STOCK_CHANGED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferPriceChangedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_PRICE_CHANGED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferArchivedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_ARCHIVED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferBidPlacedEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_BID_PLACED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferBidCanceledEvent : SellerOfferBaseEvent
    {
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type { get; set; } = "OFFER_BID_CANCELED";
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferEventBaseOffer Offer { get; set; } = new OfferEventBaseOffer();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>The data of the offer, for which the event occurred.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferEventBaseOffer 
    {
        /// <summary>The offer ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferEventEndedOffer : OfferEventBaseOffer
    {
        /// <summary>Information about publication of the given offer.</summary>
        [Newtonsoft.Json.JsonProperty("publication")]
        [System.ComponentModel.DataAnnotations.Required]
        public Publication2 Publication { get; set; } = new Publication2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GetBadgeCampaignsList 
    {
        /// <summary>List of badge campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("badgeCampaigns")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BadgeCampaign> BadgeCampaigns { get; set; } = new System.Collections.ObjectModel.Collection<BadgeCampaign>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeCampaign 
    {
        /// <summary>Badge campaign ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Badge campaign name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BadgeCampaignType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eligibility")]
        [System.ComponentModel.DataAnnotations.Required]
        public UserCampaignEligibility Eligibility { get; set; } = new UserCampaignEligibility();
    
        [Newtonsoft.Json.JsonProperty("application")]
        [System.ComponentModel.DataAnnotations.Required]
        public ApplicationTimePolicy Application { get; set; } = new ApplicationTimePolicy();
    
        [Newtonsoft.Json.JsonProperty("visibility")]
        [System.ComponentModel.DataAnnotations.Required]
        public VisibilityTimePolicy Visibility { get; set; } = new VisibilityTimePolicy();
    
        [Newtonsoft.Json.JsonProperty("publication")]
        [System.ComponentModel.DataAnnotations.Required]
        public PublicationTimePolicy Publication { get; set; } = new PublicationTimePolicy();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Summary of user eligibility for participation in the campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UserCampaignEligibility 
    {
        /// <summary>Information whether user is eligible to participate in this campaign.</summary>
        [Newtonsoft.Json.JsonProperty("eligible")]
        public bool Eligible { get; set; }
    
        /// <summary>Information why user is not able to participate in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("refusalReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CampaignRefusalReason> RefusalReasons { get; set; } = new System.Collections.ObjectModel.Collection<CampaignRefusalReason>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CampaignRefusalReason 
    {
        /// <summary>Code corresponding to the message. For more information visit &lt;a href="/badge/#6" target="_blank"&gt;the list of available codes&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>List of refusal messages.</summary>
        [Newtonsoft.Json.JsonProperty("messages")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RefusalMessage> Messages { get; set; } = new System.Collections.ObjectModel.Collection<RefusalMessage>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RefusalMessage 
    {
        /// <summary>Detailed message.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        /// <summary>Optional link that redirects to page associated with refusal reason.</summary>
        [Newtonsoft.Json.JsonProperty("link")]
        public string Link { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Time period when the campaign is open for applying for badge.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApplicationTimePolicy 
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationTimePolicyType Type { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Time period when the campaign is visible in &lt;a href="https://allegro.pl/moje-allegro/sprzedaz/moje-oferty" target="_blank"&gt;My Allegro&lt;/a&gt; and &lt;a href="https://ms.allegro.pl/seller-offers/" target="_blank"&gt;Sales Manager (Menedżer sprzedaży)&lt;/a&gt; (it is not equal to the time period when badges are displayed on the list of offers or on the offer page).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VisibilityTimePolicy 
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VisibilityTimePolicyType Type { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Time period when the badge is displayed on the list of offers or on the offer page.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PublicationTimePolicy 
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicationTimePolicyType Type { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Time period when the badge is displayed on the list of offers or on the offer page.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgePublicationTimePolicy 
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BadgePublicationTimePolicyType Type { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationRequest 
    {
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationCampaign Campaign { get; set; } = new BadgeApplicationCampaign();
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();
    
        [Newtonsoft.Json.JsonProperty("prices")]
        public BadgeApplicationPrices Prices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("purchaseConstraints")]
        public BadgeApplicationPurchaseConstraints PurchaseConstraints { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationCampaign 
    {
        /// <summary>Badge campaign ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferBadgeCampaign 
    {
        /// <summary>Badge campaign ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Badge campaign name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationOffer 
    {
        /// <summary>Offer ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Required by DISCOUNT and SOURCING campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationPrices 
    {
        [Newtonsoft.Json.JsonProperty("market")]
        public BadgeApplicationMarketPrice Market { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bargain")]
        public BadgeApplicationBargainPrice Bargain { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Suggested market price. Required by DISCOUNT campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationMarketPrice 
    {
        /// <summary>Positive number. Must be equal to or greater than 1.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only PLN values is supported.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Bargain price. Required by DISCOUNT and SOURCING campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationBargainPrice 
    {
        /// <summary>Positive number. Must be equal to or greater than 1.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only PLN values is supported.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Constraints of purchase of this offer while it participates in the campaign. Optional for all campaigns types.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationPurchaseConstraints 
    {
        [Newtonsoft.Json.JsonProperty("limit")]
        public BadgeApplicationPurchaseConstraintsLimit Limit { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Limits of purchase of this offer while it participates in the campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationPurchaseConstraintsLimit 
    {
        [Newtonsoft.Json.JsonProperty("perUser")]
        public BadgeApplicationPurchaseConstraintsLimitPerUser PerUser { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Limits of purchase of this offer per user while it participates in the campaign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationPurchaseConstraintsLimitPerUser 
    {
        /// <summary>Maximum number of items that one user can buy of this offer, while it participates in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("maxItems")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int MaxItems { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplications 
    {
        [Newtonsoft.Json.JsonProperty("badgeApplications")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BadgeApplication> BadgeApplications1 { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplication>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplication 
    {
        /// <summary>Badge application ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedAt { get; set; }
    
        /// <summary>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpdatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationCampaign Campaign { get; set; } = new BadgeApplicationCampaign();
    
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();
    
        [Newtonsoft.Json.JsonProperty("prices")]
        public BadgeApplicationPrices Prices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationProcess Process { get; set; } = new BadgeApplicationProcess();
    
        [Newtonsoft.Json.JsonProperty("purchaseConstraints")]
        public BadgeApplicationPurchaseConstraints PurchaseConstraints { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about processing of the application.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationProcess 
    {
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BadgeApplicationProcessStatus Status { get; set; }
    
        /// <summary>A list of rejection reasons for the badge application. Returned for process.status = DECLINED only.</summary>
        [Newtonsoft.Json.JsonProperty("rejectionReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BadgeApplicationRejectionReason> RejectionReasons { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReason>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationRejectionReason 
    {
        /// <summary>Code corresponding to the message. For more information visit &lt;a href="/badge/#6" target="_blank"&gt;the list of available codes&lt;/a&gt;.</summary>
        [Newtonsoft.Json.JsonProperty("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        /// <summary>List of messages with rejection reasons.</summary>
        [Newtonsoft.Json.JsonProperty("messages")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BadgeApplicationRejectionReasonMessage> Messages { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReasonMessage>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeApplicationRejectionReasonMessage 
    {
        /// <summary>Detailed message.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        /// <summary>Optional link that redirects to page associated with rejection reason.</summary>
        [Newtonsoft.Json.JsonProperty("link")]
        public string Link { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of badges</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgesList 
    {
        [Newtonsoft.Json.JsonProperty("badges")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Badge> Badges { get; set; } = new System.Collections.ObjectModel.Collection<Badge>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Badge 
    {
        [Newtonsoft.Json.JsonProperty("offer")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeApplicationOffer Offer { get; set; } = new BadgeApplicationOffer();
    
        [Newtonsoft.Json.JsonProperty("campaign")]
        [System.ComponentModel.DataAnnotations.Required]
        public OfferBadgeCampaign Campaign { get; set; } = new OfferBadgeCampaign();
    
        [Newtonsoft.Json.JsonProperty("publication")]
        public BadgePublicationTimePolicy Publication { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prices")]
        public BadgeApplicationPrices Prices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public BadgeProcess Process { get; set; } = new BadgeProcess();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about badge processing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BadgeProcess 
    {
        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BadgeProcessStatus Status { get; set; }
    
        /// <summary>A list of messages with rejection reasons. Returned for process.status = DECLINED only.</summary>
        [Newtonsoft.Json.JsonProperty("rejectionReasons")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BadgeApplicationRejectionReason> RejectionReasons { get; set; } = new System.Collections.ObjectModel.Collection<BadgeApplicationRejectionReason>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OfferRating 
    {
        /// <summary>Average score of offer rating.</summary>
        [Newtonsoft.Json.JsonProperty("averageScore")]
        public string AverageScore { get; set; }
    
        /// <summary>List score distribution with count.</summary>
        [Newtonsoft.Json.JsonProperty("scoreDistribution")]
        public System.Collections.Generic.ICollection<ScoreDistribution> ScoreDistribution { get; set; }
    
        /// <summary>Number of total responses.</summary>
        [Newtonsoft.Json.JsonProperty("totalResponses")]
        public int TotalResponses { get; set; }
    
        /// <summary>List of size feedback.</summary>
        [Newtonsoft.Json.JsonProperty("sizeFeedback")]
        public System.Collections.Generic.ICollection<SizeFeedback> SizeFeedback { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATING")]
        ACTIVATING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENDED")]
        ENDED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUY_NOW")]
        BUY_NOW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTISEMENT")]
        ADVERTISEMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUCTION")]
        AUCTION = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Sort
    {
        [System.Runtime.Serialization.EnumMember(Value = @"sellingMode.price.amount")]
        SellingMode_price_amount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-sellingMode.price.amount")]
        SellingMode_price_amount_desc = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stock.sold")]
        Stock_sold = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-stock.sold")]
        Stock_sold_desc = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stock.available")]
        Stock_available = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-stock.available")]
        Stock_available_desc = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Recommended
    {
        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PromotionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPACK")]
        MULTIPACK = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSS_MULTIPACK")]
        CROSS_MULTIPACK = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Body 
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SearchMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTIONS")]
        DESCRIPTIONS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Sort2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"relevance")]
        Relevance = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"+price")]
        _price = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-price")]
        Price = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"+withDeliveryPrice")]
        _withDeliveryPrice = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-withDeliveryPrice")]
        WithDeliveryPrice = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-popularity")]
        Popularity = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"+endTime")]
        _endTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-startTime")]
        StartTime = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Sort3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"lineItems.boughtAt")]
        LineItems_boughtAt = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-lineItems.boughtAt")]
        LineItems_boughtAt_desc = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"updatedAt")]
        UpdatedAt = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"-updatedAt")]
        UpdatedAt_desc = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PaymentOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INCOME")]
        INCOME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUTCOME")]
        OUTCOME = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 2,
    
    }
    
    /// <summary>The bid request.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BidRequest 
    {
        [Newtonsoft.Json.JsonProperty("maxAmount")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder MaxAmount { get; set; } = new PriceModificationFixedPriceHolder();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ACTIVATED")]
        OFFER_ACTIVATED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_CHANGED")]
        OFFER_CHANGED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ENDED")]
        OFFER_ENDED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_STOCK_CHANGED")]
        OFFER_STOCK_CHANGED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_PRICE_CHANGED")]
        OFFER_PRICE_CHANGED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_ARCHIVED")]
        OFFER_ARCHIVED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_BID_PLACED")]
        OFFER_BID_PLACED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFER_BID_CANCELED")]
        OFFER_BID_CANCELED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Anonymous5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PAYMENT_REFUND")]
        WAITING_FOR_PAYMENT_REFUND = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GRANTED")]
        GRANTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_AFTER_APPEAL")]
        REJECTED_AFTER_APPEAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPEALED")]
        APPEALED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public System.Collections.Generic.ICollection<ShippingRates3> ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("deliveryMethods")]
        public System.Collections.Generic.ICollection<DeliveryMethods> DeliveryMethods { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response3 
    {
        /// <summary>Collection of payments refunds.</summary>
        [Newtonsoft.Json.JsonProperty("refunds")]
        public System.Collections.Generic.ICollection<RefundDetails> Refunds { get; set; }
    
        /// <summary>Number of payment operations returned in search result for the given parameters.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        /// <summary>Total number of payment operations for the given parameters.</summary>
        [Newtonsoft.Json.JsonProperty("totalCount")]
        public int TotalCount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response4 
    {
        /// <summary>ID of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public System.Guid Id { get; set; }
    
        /// <summary>Date of billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("occurredAt")]
        public System.DateTimeOffset OccurredAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type")]
        public Type2 Type { get; set; }
    
        /// <summary>Offer associated with the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("offer")]
        public Offer2 Offer { get; set; }
    
        /// <summary>Money value of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public Value2 Value { get; set; }
    
        /// <summary>Tax rate applied to the returned billing entry. Optional field annotation is present if the returned billing entry is exempt from tax or tax is not applicable; possible values are "EXEMPT" and "NOT_APPLICABLE".</summary>
        [Newtonsoft.Json.JsonProperty("tax")]
        public Tax Tax { get; set; }
    
        /// <summary>User account balance calculated on billing date.</summary>
        [Newtonsoft.Json.JsonProperty("balance")]
        public Balance Balance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Response5 
    {
        /// <summary>Collection of refund applications.</summary>
        [Newtonsoft.Json.JsonProperty("refundClaims")]
        public System.Collections.Generic.ICollection<RefundClaim> RefundClaims { get; set; }
    
        /// <summary>Count of refund applications returned.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum InitializeRefundReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINT")]
        COMPLAINT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_NOT_AVAILABLE")]
        PRODUCT_NOT_AVAILABLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAID_VALUE_TOO_LOW")]
        PAID_VALUE_TOO_LOW = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Delivery2 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundDeliveryValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Overpaid 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundOverpaidValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundAdditionalServicesValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RefundClaimStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PAYMENT_REFUND")]
        WAITING_FOR_PAYMENT_REFUND = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GRANTED")]
        GRANTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_AFTER_APPEAL")]
        REJECTED_AFTER_APPEAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPEALED")]
        APPEALED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Commission 
    {
        /// <summary>Monetary amount of the returned refund application.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>Three-letter currency code (ISO-4217) of the returned refund application.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Buyer 
    {
        /// <summary>ID of the buyer associated with the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Login of the buyer associated with the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("login")]
        public string Login { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LineItem 
    {
        /// <summary>ID of the purchase associated with the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Total quantity of product purchased by the buyer. Equal to or greater than quantity for which the seller filed the refund application.</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public int Quantity { get; set; }
    
        /// <summary>Date when the purchase was made.</summary>
        [Newtonsoft.Json.JsonProperty("boughtAt")]
        public System.DateTimeOffset BoughtAt { get; set; }
    
        /// <summary>Offer associated with the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("offer")]
        public Offer3 Offer { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LineItem2 
    {
        /// <summary>ID of the purchase for which a refund application will be created.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RefundDetailsReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINT")]
        COMPLAINT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_NOT_AVAILABLE")]
        PRODUCT_NOT_AVAILABLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAID_VALUE_TOO_LOW")]
        PAID_VALUE_TOO_LOW = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RefundDetailsStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATE_FAILED")]
        VALIDATE_FAILED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Delivery3 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundDeliveryValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Overpaid2 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundOverpaidValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AdditionalServices2 
    {
        [Newtonsoft.Json.JsonProperty("value")]
        public RefundAdditionalServicesValue Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RefundLineItemType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AMOUNT")]
        AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QUANTITY")]
        QUANTITY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Value 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ReturnPolicyAvailabilityRange
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESTRICTED")]
        RESTRICTED = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ReturnPolicyAvailabilityRestrictionCause
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SEALED_MEDIA")]
        SEALED_MEDIA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE")]
        SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_ITEM")]
        CUSTOM_ITEM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHORT_SHELF_LIFE")]
        SHORT_SHELF_LIFE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSEPARABLY_LINKED")]
        INSEPARABLY_LINKED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALCOHOL")]
        ALCOHOL = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRESS")]
        PRESS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FULLY_IMPLEMENTED_SERVICE")]
        FULLY_IMPLEMENTED_SERVICE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEDICINAL_PRODUCT")]
        MEDICINAL_PRODUCT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOKED_SERVICE")]
        BOOKED_SERVICE = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_RECORDED_DIGITAL_CONTENT")]
        NOT_RECORDED_DIGITAL_CONTENT = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ReturnPolicyReturnCostCoveredBy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELLER")]
        SELLER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUYER")]
        BUYER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Configuration2 
    {
        /// <summary>discount percentage</summary>
        [Newtonsoft.Json.JsonProperty("percentage")]
        public double Percentage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Trigger 
    {
        /// <summary>For every pack of this quantity new rebate will be given.</summary>
        [Newtonsoft.Json.JsonProperty("forEachQuantity")]
        public double ForEachQuantity { get; set; }
    
        /// <summary>Describes how many offers in pack should be discounted by discount percentage.</summary>
        [Newtonsoft.Json.JsonProperty("discountedNumber")]
        public double DiscountedNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Parent 
    {
        /// <summary>The ID of the parent category.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SupportedCategories 
    {
        /// <summary>Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId")]
        public string CategoryId { get; set; }
    
        /// <summary>Name of supported category.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Type of the compatible item.</summary>
        [Newtonsoft.Json.JsonProperty("itemsType")]
        public string ItemsType { get; set; }
    
        /// <summary>Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;`TEXT` - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;`ID` - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get"&gt;compatible-products&lt;/a&gt; resource together with `itemsType` supported in particular category. &lt;/li&gt; &lt;/ul&gt; </summary>
        [Newtonsoft.Json.JsonProperty("inputType")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SupportedCategoriesInputType InputType { get; set; }
    
        /// <summary>Additional information about constraints assigned to the category.</summary>
        [Newtonsoft.Json.JsonProperty("validationRules")]
        public ValidationRules ValidationRules { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Groups 
    {
        /// <summary>Identifier of the group.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }
    
        /// <summary>Name of the group.</summary>
        [Newtonsoft.Json.JsonProperty("text")]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Group 
    {
        /// <summary>Identifier of the group.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Attributes 
    {
        /// <summary>Identifier of an attribute</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>List of attribute's values.</summary>
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ConstraintCriteriaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_SAME_QUANTITY")]
        COUNTRY_SAME_QUANTITY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_DELIVERY_SAME_QUANTITY")]
        COUNTRY_DELIVERY_SAME_QUANTITY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ModificationPublicationDuration
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PT72H")]
        PT72H = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT120H")]
        PT120H = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT168H")]
        PT168H = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT240H")]
        PT240H = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT480H")]
        PT480H = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT720H")]
        PT720H = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P3D")]
        P3D = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P5D")]
        P5D = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P7D")]
        P7D = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P10D")]
        P10D = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P20D")]
        P20D = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P30D")]
        P30D = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ModificationPaymentsInvoice
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VAT_MARGIN")]
        VAT_MARGIN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_VAT")]
        WITHOUT_VAT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_INVOICE")]
        NO_INVOICE = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum QuantityModificationChangeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GAIN")]
        GAIN = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Offers 
    {
        /// <summary>Offer id</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>that many pieces of your offer will be part of the bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions</summary>
        [Newtonsoft.Json.JsonProperty("quantity")]
        public double Quantity { get; set; }
    
        /// <summary>offers with this flag set to true will have a section that allows the users to purchase your bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions</summary>
        [Newtonsoft.Json.JsonProperty("promotionEntryPoint")]
        public bool PromotionEntryPoint { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SellerRebateOfferCriterionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS_OFFERS")]
        CONTAINS_OFFERS = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OfferCriteriumType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS_OFFERS")]
        CONTAINS_OFFERS = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions 
    {
        /// <summary>Indicates whether this parameter can have more than one value.</summary>
        [Newtonsoft.Json.JsonProperty("multipleChoices")]
        public bool MultipleChoices { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionary 
    {
        /// <summary>The ID of the dictionary value. Use it to set the value in an offer or in a product.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The label of the dictionary value in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public string Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions2 
    {
        /// <summary>The minimum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        public int Min { get; set; }
    
        /// <summary>The maximum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        public int Max { get; set; }
    
        /// <summary>Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.</summary>
        [Newtonsoft.Json.JsonProperty("range")]
        public bool Range { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions3 
    {
        /// <summary>The minimum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        public double Min { get; set; }
    
        /// <summary>The maximum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        public double Max { get; set; }
    
        /// <summary>Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.</summary>
        [Newtonsoft.Json.JsonProperty("range")]
        public bool Range { get; set; }
    
        /// <summary>Number of digits you can provide after a comma that can be transferred in the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("precision")]
        public int Precision { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions4 
    {
        /// <summary>The minimum length of the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("minLength")]
        public int MinLength { get; set; }
    
        /// <summary>The maximum length of the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("maxLength")]
        public int MaxLength { get; set; }
    
        /// <summary>Indicates how many different values can be provided for this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("allowedNumberOfValues")]
        public int AllowedNumberOfValues { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions5 
    {
        /// <summary>Indicates whether this parameter can have more than one value.</summary>
        [Newtonsoft.Json.JsonProperty("multipleChoices")]
        public bool MultipleChoices { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Dictionary2 
    {
        /// <summary>The ID of the dictionary value. Use it to set the value in an offer or in a product.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>The label of the dictionary value in Polish.</summary>
        [Newtonsoft.Json.JsonProperty("value")]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dependsOnValueIds")]
        public System.Collections.Generic.ICollection<string> DependsOnValueIds { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions6 
    {
        /// <summary>The minimum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        public int Min { get; set; }
    
        /// <summary>The maximum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        public int Max { get; set; }
    
        /// <summary>Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.</summary>
        [Newtonsoft.Json.JsonProperty("range")]
        public bool Range { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions7 
    {
        /// <summary>The minimum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        public double Min { get; set; }
    
        /// <summary>The maximum value of this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        public double Max { get; set; }
    
        /// <summary>Indicates whether this is a range parameter. If this is `true`, then you have to provide two values for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.</summary>
        [Newtonsoft.Json.JsonProperty("range")]
        public bool Range { get; set; }
    
        /// <summary>Number of digits you can provide after a comma that can be transferred in the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("precision")]
        public int Precision { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Restrictions8 
    {
        /// <summary>The minimum length of the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("minLength")]
        public int MinLength { get; set; }
    
        /// <summary>The maximum length of the parameter value.</summary>
        [Newtonsoft.Json.JsonProperty("maxLength")]
        public int MaxLength { get; set; }
    
        /// <summary>Indicates how many different values can be provided for this parameter.</summary>
        [Newtonsoft.Json.JsonProperty("allowedNumberOfValues")]
        public int AllowedNumberOfValues { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PublicTableDtoOrientation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HORIZONTAL")]
        HORIZONTAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERTICAL")]
        VERTICAL = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PublicationEndedBy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATION")]
        EXPIRATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RatesDelivery
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RatesDeliveryCost
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RatesDescription
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum RatesService
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Request 
    {
        /// <summary>Message containing explanation for removing rating.</summary>
        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SellerRebateDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeliveryMethod 
    {
        /// <summary>ID of the delivery method</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FirstItemRate 
    {
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>ISO 4217 currency code</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class NextItemRate 
    {
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>ISO 4217 currency code</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingTime 
    {
        /// <summary>ISO 8601 duration format, e.g. P3D for 3 days</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>ISO 8601 duration format, e.g. P3D for 3 days</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FreeDelivery 
    {
        /// <summary>The amount provided in a string format to avoid rounding errors.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JoinPolicy 
    {
        /// <summary>Strategy used to calculate delivery cost for items from offers with different delivery costs.
        /// The possible values:
        ///   * `MAX` - The buyer will pay for the most expensive delivery
        ///   * `MIN` - The buyer will pay for the cheapest delivery
        ///   * `SUM` - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.</summary>
        [Newtonsoft.Json.JsonProperty("strategy")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JoinPolicyStrategy Strategy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CustomCost 
    {
        /// <summary>If true the customer can enter a custom shipping cost.</summary>
        [Newtonsoft.Json.JsonProperty("allowed")]
        public bool Allowed { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class NotRecommended 
    {
        /// <summary>Total number of negative feedbacks received.</summary>
        [Newtonsoft.Json.JsonProperty("total")]
        public long Total { get; set; }
    
        /// <summary>Number of unique users.</summary>
        [Newtonsoft.Json.JsonProperty("unique")]
        public long Unique { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Recommended2 
    {
        /// <summary>Total number of positive feedbacks received.</summary>
        [Newtonsoft.Json.JsonProperty("total")]
        public long Total { get; set; }
    
        /// <summary>Number of unique users.</summary>
        [Newtonsoft.Json.JsonProperty("unique")]
        public long Unique { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ParametersForPreviewPriceCondition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED")]
        USED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ParametersForPreviewPriceDuration
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PT72H")]
        PT72H = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT120H")]
        PT120H = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT168H")]
        PT168H = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT240H")]
        PT240H = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT336H")]
        PT336H = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT480H")]
        PT480H = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PT720H")]
        PT720H = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ParametersForPreviewPriceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"shop")]
        Shop = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"offer")]
        Offer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"advertisement")]
        Advertisement = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Publication_modificationAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATE")]
        ACTIVATE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"END")]
        END = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OfferStockUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAIR")]
        PAIR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OfferVendorId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHARYTATYWNI_ALLEGRO")]
        CHARYTATYWNI_ALLEGRO = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ListingResponseFiltersType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MULTI")]
        MULTI = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
        NUMERIC = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC_SINGLE")]
        NUMERIC_SINGLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum CheckoutFormDiscountType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"COUPON")]
        COUPON = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPACK")]
        MULTIPACK = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSMULTIPACK")]
        CROSSMULTIPACK = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TotalToPay : PriceModificationFixedPriceHolder
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DisputeStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONGOING")]
        ONGOING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNRESOLVED")]
        UNRESOLVED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MessageRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"END_REQUEST")]
        END_REQUEST = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Mappings 
    {
        /// <summary>WebAPI deal id</summary>
        [Newtonsoft.Json.JsonProperty("dealId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DealId { get; set; }
    
        /// <summary>Order API line item id</summary>
        [Newtonsoft.Json.JsonProperty("lineItemId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid LineItemId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SinglePromotionCampaignResponseDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PromotionCampaignResponseDtoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION")]
        VERIFICATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LineItems 
    {
        /// <summary>Identifier of an order line item.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class NextPage 
    {
        /// <summary>A "cursor" to the next set of results.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Options 
    {
        [Newtonsoft.Json.JsonProperty("identifiesProduct")]
        public bool IdentifiesProduct { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Delivery4 
    {
        /// <summary>Handling time, ISO 8601 duration format</summary>
        [Newtonsoft.Json.JsonProperty("handlingTime")]
        public string HandlingTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shippingRates")]
        public JustId ShippingRates { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ImpliedWarranty2 : ImpliedWarranty
    {
        /// <summary>The name of the implied warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReturnPolicy2 : ReturnPolicy
    {
        /// <summary>The name of the return policy definition.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Warranty2 : Warranty
    {
        /// <summary>The name of the warranty definition.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRates2 : JustId
    {
        /// <summary>The name of the shipping rate.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ClassifiedPackageConfigType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BASE")]
        BASE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA")]
        EXTRA = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BaseOperationGroup
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INCOME")]
        INCOME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUTCOME")]
        OUTCOME = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum WalletPaymentOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PAYU")]
        PAYU = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P24")]
        P24 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum WalletType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Auction 
    {
        [Newtonsoft.Json.JsonProperty("currentPrice")]
        [System.ComponentModel.DataAnnotations.Required]
        public PriceModificationFixedPriceHolder CurrentPrice { get; set; } = new PriceModificationFixedPriceHolder();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Publication2 
    {
        /// <summary>Indicates the reason for ending the offer:
        ///  - `USER` - offer ended by the seller.
        ///  - `ADMIN` - offer ended by an admin.
        ///  - `EXPIRATION` - offer ended because all available items had been sold out or offer duration had expired (valid for
        ///    offers with specified duration).
        ///  - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
        ///    success status, but further processing failed.
        ///  - `UNKNOWN` - in rare cases the reason might be unknown.</summary>
        [Newtonsoft.Json.JsonProperty("endedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Publication2EndedBy EndedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BadgeCampaignType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DISCOUNT")]
        DISCOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SOURCING")]
        SOURCING = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ApplicationTimePolicyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum VisibilityTimePolicyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PublicationTimePolicyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BadgePublicationTimePolicyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINCE")]
        SINCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WITHIN")]
        WITHIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNTIL")]
        UNTIL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEVER")]
        NEVER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BadgeApplicationProcessStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED")]
        PROCESSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum BadgeProcessStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_VERIFICATION")]
        IN_VERIFICATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PUBLICATION")]
        WAITING_FOR_PUBLICATION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ScoreDistribution 
    {
        /// <summary>Identifier of score: 5, 4, 3, 2, 1.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Count of score.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SizeFeedback 
    {
        /// <summary>Identifier of sizeFeedback: BIGGER, FIT, SMALLER.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Count of sizeFeedback responses.</summary>
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRates3 
    {
        /// <summary>Shipping rate ID</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>User defined name of the shipping rates set</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeliveryMethods 
    {
        /// <summary>Delivery method ID.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Delivery method name.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        /// <summary>Whether the payment is to be collected in advance or on delivery.</summary>
        [Newtonsoft.Json.JsonProperty("paymentPolicy")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryMethodsPaymentPolicy PaymentPolicy { get; set; }
    
        /// <summary>Indicates Allegro signed delivery method, which allows to easily distinguish similar delivery methods with various restrictions, e.g. Allegro Paczkomaty 24/7 InPost from Paczkomaty 24/7.</summary>
        [Newtonsoft.Json.JsonProperty("allegroEndorsed")]
        public bool AllegroEndorsed { get; set; }
    
        /// <summary>Rules for the delivery method, i.e. price, quantity, shipping time, etc.</summary>
        [Newtonsoft.Json.JsonProperty("shippingRatesConstraints")]
        public ShippingRatesConstraints ShippingRatesConstraints { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Type2 
    {
        /// <summary>Three-letter code of the billing type of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Billing type of the returned billing entry. This type is translated based on the value of the "Accept-Language" header. By default a message in English is returned.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Offer2 
    {
        /// <summary>ID of the offer associated with the billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Name of the offer associated with the billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Value2 
    {
        /// <summary>Monetary amount of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>Three-letter currency code (ISO-4217) of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Tax 
    {
        /// <summary>Tax rate shown as a number in the range 0-100.</summary>
        [Newtonsoft.Json.JsonProperty("percentage")]
        public string Percentage { get; set; }
    
        /// <summary>Optional annotation explaining the tax rate.</summary>
        [Newtonsoft.Json.JsonProperty("annotation")]
        public string Annotation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
 
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Balance 
    {
        /// <summary>Monetary amount of the balance calculated for the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("amount")]
        public string Amount { get; set; }
    
        /// <summary>Three-letter currency code (ISO-4217) of the balance of the returned billing entry.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Offer3 
    {
        /// <summary>ID of the offer associated with the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id { get; set; }
    
        /// <summary>Name of the offer associated with the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SupportedCategoriesInputType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ValidationRules 
    {
        /// <summary>Maximum number of items allowed on compatibility list.</summary>
        [Newtonsoft.Json.JsonProperty("maxRows")]
        public int MaxRows { get; set; }
    
        /// <summary>Maximum length of single item on the list.</summary>
        [Newtonsoft.Json.JsonProperty("maxCharactersPerLine")]
        public int MaxCharactersPerLine { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum JoinPolicyStrategy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MIN")]
        MIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MAX")]
        MAX = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUM")]
        SUM = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Publication2EndedBy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATION")]
        EXPIRATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DeliveryMethodsPaymentPolicy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_ADVANCE")]
        IN_ADVANCE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CASH_ON_DELIVERY")]
        CASH_ON_DELIVERY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingRatesConstraints 
    {
        /// <summary>Indicates whether delivery method can be used when adding or modifying shipping rates.</summary>
        [Newtonsoft.Json.JsonProperty("allowed")]
        public bool Allowed { get; set; }
    
        /// <summary>Rules for the quantity per parcel.</summary>
        [Newtonsoft.Json.JsonProperty("maxQuantityPerPackage")]
        public MaxQuantityPerPackage MaxQuantityPerPackage { get; set; }
    
        /// <summary>Rules for the shipping cost for the first item in the parcel.</summary>
        [Newtonsoft.Json.JsonProperty("firstItemRate")]
        public FirstItemRate2 FirstItemRate { get; set; }
    
        /// <summary>Rules for the shipping cost of another item in the parcel.</summary>
        [Newtonsoft.Json.JsonProperty("nextItemRate")]
        public NextItemRate2 NextItemRate { get; set; }
    
        /// <summary>Rules for the shipping time.</summary>
        [Newtonsoft.Json.JsonProperty("shippingTime")]
        public ShippingTime2 ShippingTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MaxQuantityPerPackage 
    {
        /// <summary>Upper limit for quantity per package.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        [System.ComponentModel.DataAnnotations.Range(1, 999999)]
        public int Max { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FirstItemRate2 
    {
        /// <summary>Lower limit for the rate.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Min { get; set; }
    
        /// <summary>Upper limit for the rate.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Max { get; set; }
    
        /// <summary>ISO 4217 currency code.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class NextItemRate2 
    {
        /// <summary>Lower limit for the rate.</summary>
        [Newtonsoft.Json.JsonProperty("min")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Min { get; set; }
    
        /// <summary>Upper limit for the rate.</summary>
        [Newtonsoft.Json.JsonProperty("max")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Max { get; set; }
    
        /// <summary>ISO 4217 currency code.</summary>
        [Newtonsoft.Json.JsonProperty("currency")]
        public string Currency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ShippingTime2 
    {
        /// <summary>Default shipping time.</summary>
        [Newtonsoft.Json.JsonProperty("default")]
        public Default Default { get; set; }
    
        /// <summary>Indicates if custom shipping time can be set when adding or modifying shipping rates.</summary>
        [Newtonsoft.Json.JsonProperty("customizable")]
        public bool Customizable { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Default 
    {
        /// <summary>ISO 8601 duration format.</summary>
        [Newtonsoft.Json.JsonProperty("from")]
        public string From { get; set; }
    
        /// <summary>ISO 8601 duration format.</summary>
        [Newtonsoft.Json.JsonProperty("to")]
        public string To { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.15.0 (Newtonsoft.Json v12.0.0.2)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                try
                {

                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                }
                catch(ArgumentException e)
                {
                    var a = 1;
                }   
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
           
            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class AllegroException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AllegroException(string message , int statusCode):base(message)
        {
            StatusCode = statusCode;
        }

        public AllegroException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class AllegroException<TResult> : AllegroException
    {
        public TResult Result { get; private set; }

        public AllegroException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108